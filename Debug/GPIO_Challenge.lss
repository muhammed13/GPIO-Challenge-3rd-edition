
GPIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003006  0000309a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800168  00800168  000031a2  2**0
                  ALLOC
  3 .stab         000042d8  00000000  00000000  000031a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e1e  00000000  00000000  0000747c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000929a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  000093da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  0000956f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  0000b081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  0000bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  0000ceec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  0000d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_10>
      2c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e0       	ldi	r30, 0x06	; 6
      78:	f0 e3       	ldi	r31, 0x30	; 48
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4f 10 	call	0x209e	; 0x209e <main>
      8a:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__clzsi2+0x7e>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__clzsi2+0x76>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <ultrasonic_sensor_start>:

#include "AGILE_REQ2.h"


void ultrasonic_sensor_start(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_obstacle_distance;
	gpioPinDirection(LED_0_GPIO,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	6f e0       	ldi	r22, 0x0F	; 15
     bee:	4f e0       	ldi	r20, 0x0F	; 15
     bf0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
			                    LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT);
	US_init();
     bf4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <US_init>
	while(1)
	{
		US_triger();
     bf8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <US_triger>
		US_start();
     bfc:	0e 94 16 0a 	call	0x142c	; 0x142c <US_start>
		u8_obstacle_distance=US_get_reading();
     c00:	0e 94 28 0a 	call	0x1450	; 0x1450 <US_get_reading>
     c04:	89 83       	std	Y+1, r24	; 0x01
		US_stop();
     c06:	0e 94 1f 0a 	call	0x143e	; 0x143e <US_stop>
		gpioPinWrite(LED_0_GPIO,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	6f e0       	ldi	r22, 0x0F	; 15
     c0e:	49 81       	ldd	r20, Y+1	; 0x01
     c10:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
				     u8_obstacle_distance);
		softwareDelayMs(1000);
     c14:	68 ee       	ldi	r22, 0xE8	; 232
     c16:	73 e0       	ldi	r23, 0x03	; 3
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
     c20:	eb cf       	rjmp	.-42     	; 0xbf8 <ultrasonic_sensor_start+0x18>

00000c22 <car_application_with_phase_correct>:

#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000

uint8_t g8_gloabal_car_duty;
void car_application_with_phase_correct(void)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <car_application_with_phase_correct+0x6>
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	sei();
     c2e:	78 94       	sei
	g8_gloabal_car_duty=0;
     c30:	10 92 6a 01 	sts	0x016A, r1
	uint8_t u8_i;
	uint8_t u8_j;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>



	for(u8_i=0;u8_i<10;u8_i++)
     c50:	1b 82       	std	Y+3, r1	; 0x03
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <car_application_with_phase_correct+0x56>
	{
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     c54:	80 91 6a 01 	lds	r24, 0x016A
     c58:	0e 94 3d 0b 	call	0x167a	; 0x167a <MotorDC_Speed_HwPWM>
		softwareDelayMs(500);
     c5c:	64 ef       	ldi	r22, 0xF4	; 244
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
		g8_gloabal_car_duty+=10;
     c68:	80 91 6a 01 	lds	r24, 0x016A
     c6c:	86 5f       	subi	r24, 0xF6	; 246
     c6e:	80 93 6a 01 	sts	0x016A, r24
	MotorDC_Dir(MOT_1,FORWARD);
	MotorDC_Dir(MOT_2,FORWARD);



	for(u8_i=0;u8_i<10;u8_i++)
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	8a 30       	cpi	r24, 0x0A	; 10
     c7c:	58 f3       	brcs	.-42     	; 0xc54 <car_application_with_phase_correct+0x32>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
     c7e:	84 e6       	ldi	r24, 0x64	; 100
     c80:	80 93 6a 01 	sts	0x016A, r24
	for(u8_j=0;u8_j<10;u8_j++)
     c84:	1a 82       	std	Y+2, r1	; 0x02
     c86:	12 c0       	rjmp	.+36     	; 0xcac <car_application_with_phase_correct+0x8a>
	{
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     c88:	80 91 6a 01 	lds	r24, 0x016A
     c8c:	0e 94 3d 0b 	call	0x167a	; 0x167a <MotorDC_Speed_HwPWM>
		softwareDelayMs(500);
     c90:	64 ef       	ldi	r22, 0xF4	; 244
     c92:	71 e0       	ldi	r23, 0x01	; 1
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
		g8_gloabal_car_duty-=10;
     c9c:	80 91 6a 01 	lds	r24, 0x016A
     ca0:	8a 50       	subi	r24, 0x0A	; 10
     ca2:	80 93 6a 01 	sts	0x016A, r24
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
	for(u8_j=0;u8_j<10;u8_j++)
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	8a 30       	cpi	r24, 0x0A	; 10
     cb0:	58 f3       	brcs	.-42     	; 0xc88 <car_application_with_phase_correct+0x66>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty-=10;
	}

	MotorDC_Dir(MOT_1,STOP);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,STOP);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	softwareDelayMs(500);
     cc2:	64 ef       	ldi	r22, 0xF4	; 244
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	g8_gloabal_car_duty=80;
     cce:	80 e5       	ldi	r24, 0x50	; 80
     cd0:	80 93 6a 01 	sts	0x016A, r24
	for(u8_k=0;u8_k<1;u8_k++)
     cd4:	19 82       	std	Y+1, r1	; 0x01
     cd6:	11 c0       	rjmp	.+34     	; 0xcfa <car_application_with_phase_correct+0xd8>
	{
		MotorDC_Dir(MOT_1,FORWARD);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     ce0:	80 91 6a 01 	lds	r24, 0x016A
     ce4:	0e 94 3d 0b 	call	0x167a	; 0x167a <MotorDC_Speed_HwPWM>
		softwareDelayMs(1000);
     ce8:	68 ee       	ldi	r22, 0xE8	; 232
     cea:	73 e0       	ldi	r23, 0x03	; 3
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>

	MotorDC_Dir(MOT_1,STOP);
	MotorDC_Dir(MOT_2,STOP);
	softwareDelayMs(500);
	g8_gloabal_car_duty=80;
	for(u8_k=0;u8_k<1;u8_k++)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 23       	and	r24, r24
     cfe:	61 f3       	breq	.-40     	; 0xcd8 <car_application_with_phase_correct+0xb6>
	{
		MotorDC_Dir(MOT_1,FORWARD);
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(1000);
	}
	MotorDC_Dir(MOT_1,STOP);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	timer0Stop();
     d08:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>

}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <car_application>:

#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000

uint8_t g8_gloabal_car_duty;
void car_application(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <car_application+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	sei();
     d24:	78 94       	sei
	g8_gloabal_car_duty=0;
     d26:	10 92 6a 01 	sts	0x016A, r1
	uint8_t u8_i;
	uint8_t u8_j;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>



	for(u8_i=0;u8_i<10;u8_i++)
     d46:	1b 82       	std	Y+3, r1	; 0x03
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <car_application+0x56>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     d4a:	80 91 6a 01 	lds	r24, 0x016A
     d4e:	0e 94 2f 0b 	call	0x165e	; 0x165e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(500);
     d52:	64 ef       	ldi	r22, 0xF4	; 244
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
		g8_gloabal_car_duty+=10;
     d5e:	80 91 6a 01 	lds	r24, 0x016A
     d62:	86 5f       	subi	r24, 0xF6	; 246
     d64:	80 93 6a 01 	sts	0x016A, r24
	MotorDC_Dir(MOT_1,FORWARD);
	MotorDC_Dir(MOT_2,FORWARD);



	for(u8_i=0;u8_i<10;u8_i++)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	8f 5f       	subi	r24, 0xFF	; 255
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	8a 30       	cpi	r24, 0x0A	; 10
     d72:	58 f3       	brcs	.-42     	; 0xd4a <car_application+0x32>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	80 93 6a 01 	sts	0x016A, r24
	for(u8_j=0;u8_j<10;u8_j++)
     d7a:	1a 82       	std	Y+2, r1	; 0x02
     d7c:	12 c0       	rjmp	.+36     	; 0xda2 <car_application+0x8a>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     d7e:	80 91 6a 01 	lds	r24, 0x016A
     d82:	0e 94 2f 0b 	call	0x165e	; 0x165e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(500);
     d86:	64 ef       	ldi	r22, 0xF4	; 244
     d88:	71 e0       	ldi	r23, 0x01	; 1
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
		g8_gloabal_car_duty-=10;
     d92:	80 91 6a 01 	lds	r24, 0x016A
     d96:	8a 50       	subi	r24, 0x0A	; 10
     d98:	80 93 6a 01 	sts	0x016A, r24
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
	for(u8_j=0;u8_j<10;u8_j++)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	58 f3       	brcs	.-42     	; 0xd7e <car_application+0x66>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty-=10;
	}

	MotorDC_Dir(MOT_1,STOP);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,STOP);
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	softwareDelayMs(500);
     db8:	64 ef       	ldi	r22, 0xF4	; 244
     dba:	71 e0       	ldi	r23, 0x01	; 1
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	g8_gloabal_car_duty=80;
     dc4:	80 e5       	ldi	r24, 0x50	; 80
     dc6:	80 93 6a 01 	sts	0x016A, r24
	for(u8_k=0;u8_k<1;u8_k++)
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <car_application+0xd8>
	{
		MotorDC_Dir(MOT_1,FORWARD);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     dd6:	80 91 6a 01 	lds	r24, 0x016A
     dda:	0e 94 2f 0b 	call	0x165e	; 0x165e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(1000);
     dde:	68 ee       	ldi	r22, 0xE8	; 232
     de0:	73 e0       	ldi	r23, 0x03	; 3
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>

	MotorDC_Dir(MOT_1,STOP);
	MotorDC_Dir(MOT_2,STOP);
	softwareDelayMs(500);
	g8_gloabal_car_duty=80;
	for(u8_k=0;u8_k<1;u8_k++)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 23       	and	r24, r24
     df4:	61 f3       	breq	.-40     	; 0xdce <car_application+0xb6>
	{
		MotorDC_Dir(MOT_1,FORWARD);
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);
	}
	MotorDC_Dir(MOT_1,STOP);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MotorDC_Dir>
	timer0Stop();
     dfe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>

}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <sevensegments>:
#define MAX_NUMBER 9
#define SWITCHING_TIME 5
#define NUMBER_OF_ITERATION_FOR_ONE_SEC 50

void sevensegments(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <sevensegments+0x6>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	sevenSegInit(SEG_0);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 57 11 	call	0x22ae	; 0x22ae <sevenSegInit>
	sevenSegInit(SEG_1);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 57 11 	call	0x22ae	; 0x22ae <sevenSegInit>

	uint8_t counter1;
	uint8_t counter2=START_;
     e26:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     e28:	1b 82       	std	Y+3, r1	; 0x03
     e2a:	37 c0       	rjmp	.+110    	; 0xe9a <sevensegments+0x8c>
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	2f c0       	rjmp	.+94     	; 0xe8e <sevensegments+0x80>
			{
				sevenSegWrite(SEG_0, counter1);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	6b 81       	ldd	r22, Y+3	; 0x03
     e34:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <sevenSegWrite>
				sevenSegEnable(SEG_0);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 9c 11 	call	0x2338	; 0x2338 <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     e3e:	65 e0       	ldi	r22, 0x05	; 5
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				sevenSegDisable(SEG_0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 c3 11 	call	0x2386	; 0x2386 <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     e50:	65 e0       	ldi	r22, 0x05	; 5
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>

				sevenSegWrite(SEG_1, counter2);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	6a 81       	ldd	r22, Y+2	; 0x02
     e60:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <sevenSegWrite>
				sevenSegEnable(SEG_1);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 9c 11 	call	0x2338	; 0x2338 <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				sevenSegDisable(SEG_1);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 c3 11 	call	0x2386	; 0x2386 <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     e7c:	65 e0       	ldi	r22, 0x05	; 5
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	82 33       	cpi	r24, 0x32	; 50
     e92:	70 f2       	brcs	.-100    	; 0xe30 <sevensegments+0x22>
	uint8_t counter1;
	uint8_t counter2=START_;
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	8a 30       	cpi	r24, 0x0A	; 10
     e9e:	30 f2       	brcs	.-116    	; 0xe2c <sevensegments+0x1e>
				sevenSegDisable(SEG_1);
				softwareDelayMs(SWITCHING_TIME);

			}
		}
		counter2++;
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	8a 83       	std	Y+2, r24	; 0x02
		if(counter2==MAX_NUMBER+1)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	8a 30       	cpi	r24, 0x0A	; 10
     eaa:	09 f0       	breq	.+2      	; 0xeae <sevensegments+0xa0>
     eac:	bd cf       	rjmp	.-134    	; 0xe28 <sevensegments+0x1a>
		{
			counter2=START_;
     eae:	1a 82       	std	Y+2, r1	; 0x02
     eb0:	bb cf       	rjmp	.-138    	; 0xe28 <sevensegments+0x1a>

00000eb2 <button_led>:
#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000
#define MIN_FLAG_VALUE 10
#define START 0

void button_led(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <button_led+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <button_led+0x8>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
     ec0:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	pushButtonInit(BTN_1);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	0e 94 56 10 	call	0x20ac	; 0x20ac <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 a4 10 	call	0x2148	; 0x2148 <pushButtonGetStatus>
     ed4:	88 23       	and	r24, r24
     ed6:	d9 f3       	breq	.-10     	; 0xece <button_led+0x1c>
		{
			Led_On(LED_1);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     ede:	19 82       	std	Y+1, r1	; 0x01
     ee0:	1a 82       	std	Y+2, r1	; 0x02
     ee2:	1b 82       	std	Y+3, r1	; 0x03
     ee4:	1c 82       	std	Y+4, r1	; 0x04
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <button_led+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	0e 94 a4 10 	call	0x2148	; 0x2148 <pushButtonGetStatus>
     eee:	88 23       	and	r24, r24
     ef0:	19 f0       	breq	.+6      	; 0xef8 <button_led+0x46>
	    		{
	    			u8_flag++;
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	ab 81       	ldd	r26, Y+3	; 0x03
     efe:	bc 81       	ldd	r27, Y+4	; 0x04
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	a1 1d       	adc	r26, r1
     f04:	b1 1d       	adc	r27, r1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	ab 83       	std	Y+3, r26	; 0x03
     f0c:	bc 83       	std	Y+4, r27	; 0x04
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	ab 81       	ldd	r26, Y+3	; 0x03
     f14:	bc 81       	ldd	r27, Y+4	; 0x04
     f16:	80 38       	cpi	r24, 0x80	; 128
     f18:	28 e3       	ldi	r18, 0x38	; 56
     f1a:	92 07       	cpc	r25, r18
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	a2 07       	cpc	r26, r18
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	b2 07       	cpc	r27, r18
     f24:	08 f3       	brcs	.-62     	; 0xee8 <button_led+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	8b 30       	cpi	r24, 0x0B	; 11
     f2a:	30 f0       	brcs	.+12     	; 0xf38 <button_led+0x86>
	    	{
	    		softwareDelayMs(ONE_SEC);
     f2c:	68 ee       	ldi	r22, 0xE8	; 232
     f2e:	73 e0       	ldi	r23, 0x03	; 3
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	    	}
	    	Led_Off(LED_1);
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
	    	softwareDelayMs(ONE_SEC);
     f3e:	68 ee       	ldi	r22, 0xE8	; 232
     f40:	73 e0       	ldi	r23, 0x03	; 3
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	    	u8_flag=START;
     f4a:	1d 82       	std	Y+5, r1	; 0x05
     f4c:	c0 cf       	rjmp	.-128    	; 0xece <button_led+0x1c>

00000f4e <button_led_using_timer0>:
	}
}


void button_led_using_timer0(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <button_led_using_timer0+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <button_led_using_timer0+0x8>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
     f5c:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	pushButtonInit(BTN_1);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 56 10 	call	0x20ac	; 0x20ac <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 a4 10 	call	0x2148	; 0x2148 <pushButtonGetStatus>
     f70:	88 23       	and	r24, r24
     f72:	d9 f3       	breq	.-10     	; 0xf6a <button_led_using_timer0+0x1c>
		{
			Led_On(LED_1);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	1a 82       	std	Y+2, r1	; 0x02
     f7e:	1b 82       	std	Y+3, r1	; 0x03
     f80:	1c 82       	std	Y+4, r1	; 0x04
     f82:	13 c0       	rjmp	.+38     	; 0xfaa <button_led_using_timer0+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	0e 94 a4 10 	call	0x2148	; 0x2148 <pushButtonGetStatus>
     f8a:	88 23       	and	r24, r24
     f8c:	19 f0       	breq	.+6      	; 0xf94 <button_led_using_timer0+0x46>
	    		{
	    			u8_flag++;
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	ab 81       	ldd	r26, Y+3	; 0x03
     f9a:	bc 81       	ldd	r27, Y+4	; 0x04
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	a1 1d       	adc	r26, r1
     fa0:	b1 1d       	adc	r27, r1
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	ab 83       	std	Y+3, r26	; 0x03
     fa8:	bc 83       	std	Y+4, r27	; 0x04
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	ab 81       	ldd	r26, Y+3	; 0x03
     fb0:	bc 81       	ldd	r27, Y+4	; 0x04
     fb2:	80 38       	cpi	r24, 0x80	; 128
     fb4:	28 e3       	ldi	r18, 0x38	; 56
     fb6:	92 07       	cpc	r25, r18
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	a2 07       	cpc	r26, r18
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	b2 07       	cpc	r27, r18
     fc0:	08 f3       	brcs	.-62     	; 0xf84 <button_led_using_timer0+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	8b 30       	cpi	r24, 0x0B	; 11
     fc6:	20 f0       	brcs	.+8      	; 0xfd0 <button_led_using_timer0+0x82>
	    	{
	    		timer0DelayMs(ONE_SEC);
     fc8:	88 ee       	ldi	r24, 0xE8	; 232
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <timer0DelayMs>
	    	}
	    	Led_Off(LED_1);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
	    	timer0DelayMs(ONE_SEC);
     fd6:	88 ee       	ldi	r24, 0xE8	; 232
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <timer0DelayMs>
	    	u8_flag=START;
     fde:	1d 82       	std	Y+5, r1	; 0x05
     fe0:	c4 cf       	rjmp	.-120    	; 0xf6a <button_led_using_timer0+0x1c>

00000fe2 <trafficlight>:
#include "GPIO_REQ9.h"
void trafficlight(void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <trafficlight+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_2);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_3);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	en_STATE state=GO_;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3b 83       	std	Y+3, r19	; 0x03
    100c:	2a 83       	std	Y+2, r18	; 0x02
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	91 05       	cpc	r25, r1
    1016:	c9 f0       	breq	.+50     	; 0x104a <trafficlight+0x68>
    1018:	2a 81       	ldd	r18, Y+2	; 0x02
    101a:	3b 81       	ldd	r19, Y+3	; 0x03
    101c:	23 30       	cpi	r18, 0x03	; 3
    101e:	31 05       	cpc	r19, r1
    1020:	19 f1       	breq	.+70     	; 0x1068 <trafficlight+0x86>
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	61 f7       	brne	.-40     	; 0x1004 <trafficlight+0x22>
		{
			case GO_:
				Led_On(LED_1);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				softwareDelayMs(ONE_SEC_);
    1032:	68 ee       	ldi	r22, 0xE8	; 232
    1034:	73 e0       	ldi	r23, 0x03	; 3
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				Led_Off(LED_1);
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=STOP_;
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	dd cf       	rjmp	.-70     	; 0x1004 <trafficlight+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				softwareDelayMs(ONE_SEC_);
    1050:	68 ee       	ldi	r22, 0xE8	; 232
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				Led_Off(LED_2);
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=GO_;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	ce cf       	rjmp	.-100    	; 0x1004 <trafficlight+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				softwareDelayMs(ONE_SEC_);
    106e:	68 ee       	ldi	r22, 0xE8	; 232
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				Led_Off(LED_3);
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=READY_;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	bf cf       	rjmp	.-130    	; 0x1004 <trafficlight+0x22>

00001086 <trafficlight_using_timer0>:

	}
}

void trafficlight_using_timer0(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <trafficlight_using_timer0+0x6>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_2);
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_3);
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	en_STATE state=GO_;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3b 83       	std	Y+3, r19	; 0x03
    10b0:	2a 83       	std	Y+2, r18	; 0x02
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	9b 81       	ldd	r25, Y+3	; 0x03
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	91 05       	cpc	r25, r1
    10ba:	b9 f0       	breq	.+46     	; 0x10ea <trafficlight_using_timer0+0x64>
    10bc:	2a 81       	ldd	r18, Y+2	; 0x02
    10be:	3b 81       	ldd	r19, Y+3	; 0x03
    10c0:	23 30       	cpi	r18, 0x03	; 3
    10c2:	31 05       	cpc	r19, r1
    10c4:	f9 f0       	breq	.+62     	; 0x1104 <trafficlight_using_timer0+0x7e>
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	61 f7       	brne	.-40     	; 0x10a8 <trafficlight_using_timer0+0x22>
		{
			case GO_:
				Led_On(LED_1);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer0DelayMs(ONE_SEC_);
    10d6:	88 ee       	ldi	r24, 0xE8	; 232
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <timer0DelayMs>
				Led_Off(LED_1);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=STOP_;
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	df cf       	rjmp	.-66     	; 0x10a8 <trafficlight_using_timer0+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer0DelayMs(ONE_SEC_);
    10f0:	88 ee       	ldi	r24, 0xE8	; 232
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <timer0DelayMs>
				Led_Off(LED_2);
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=GO_;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	d2 cf       	rjmp	.-92     	; 0x10a8 <trafficlight_using_timer0+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer0DelayMs(ONE_SEC_);
    110a:	88 ee       	ldi	r24, 0xE8	; 232
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <timer0DelayMs>
				Led_Off(LED_3);
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=READY_;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	c5 cf       	rjmp	.-118    	; 0x10a8 <trafficlight_using_timer0+0x22>

0000111e <trafficlight_using_timer1>:
	}
}


void trafficlight_using_timer1(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <trafficlight_using_timer1+0x6>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_2);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_3);
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	en_STATE state=GO_;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3b 83       	std	Y+3, r19	; 0x03
    1148:	2a 83       	std	Y+2, r18	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	91 05       	cpc	r25, r1
    1152:	b9 f0       	breq	.+46     	; 0x1182 <trafficlight_using_timer1+0x64>
    1154:	2a 81       	ldd	r18, Y+2	; 0x02
    1156:	3b 81       	ldd	r19, Y+3	; 0x03
    1158:	23 30       	cpi	r18, 0x03	; 3
    115a:	31 05       	cpc	r19, r1
    115c:	f9 f0       	breq	.+62     	; 0x119c <trafficlight_using_timer1+0x7e>
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	61 f7       	brne	.-40     	; 0x1140 <trafficlight_using_timer1+0x22>
		{
			case GO_:
				Led_On(LED_1);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer1DelayMs(ONE_SEC_);
    116e:	88 ee       	ldi	r24, 0xE8	; 232
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <timer1DelayMs>
				Led_Off(LED_1);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=STOP_;
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	df cf       	rjmp	.-66     	; 0x1140 <trafficlight_using_timer1+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer1DelayMs(ONE_SEC_);
    1188:	88 ee       	ldi	r24, 0xE8	; 232
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <timer1DelayMs>
				Led_Off(LED_2);
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=GO_;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	d2 cf       	rjmp	.-92     	; 0x1140 <trafficlight_using_timer1+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Led_On>
				timer1DelayMs(ONE_SEC_);
    11a2:	88 ee       	ldi	r24, 0xE8	; 232
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <timer1DelayMs>
				Led_Off(LED_3);
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Led_Off>
				state=READY_;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	c5 cf       	rjmp	.-118    	; 0x1140 <trafficlight_using_timer1+0x22>

000011b6 <trafficlight_using_timer0_using_interrupts>:
	}
}


void trafficlight_using_timer0_using_interrupts(void)
{
    11b6:	ef 92       	push	r14
    11b8:	0f 93       	push	r16
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	sei();
    11c2:	78 94       	sei
	Led_Init(LED_1);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_2);
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_3);
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
    g8_state=GO_;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 6c 01 	sts	0x016C, r24
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    11dc:	88 e0       	ldi	r24, 0x08	; 8
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	43 e0       	ldi	r20, 0x03	; 3
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	0a ef       	ldi	r16, 0xFA	; 250
    11e6:	ee 24       	eor	r14, r14
    11e8:	68 94       	set
    11ea:	e1 f8       	bld	r14, 1
    11ec:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
    11f0:	ff cf       	rjmp	.-2      	; 0x11f0 <trafficlight_using_timer0_using_interrupts+0x3a>

000011f2 <trafficlight_using_timer0_using_interrupts_button>:
	}
}


void trafficlight_using_timer0_using_interrupts_button(void)
{
    11f2:	ef 92       	push	r14
    11f4:	0f 93       	push	r16
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	sei();
    11fe:	78 94       	sei
	INT0_Init(RISIGING_EDGE);
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <INT0_Init>
	Led_Init(LED_1);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_2);
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	Led_Init(LED_3);
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Led_Init>
	pushButtonInit(BTN_4_INT0);
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	0e 94 56 10 	call	0x20ac	; 0x20ac <pushButtonInit>
	while(TRUE)
	{
		if(g8_gloabal_int0_flag==1)
    121e:	80 91 68 01 	lds	r24, 0x0168
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	e1 f7       	brne	.-8      	; 0x121e <trafficlight_using_timer0_using_interrupts_button+0x2c>
		{
		    g8_state=STOP_;
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	80 93 6c 01 	sts	0x016C, r24
			timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	43 e0       	ldi	r20, 0x03	; 3
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	0a ef       	ldi	r16, 0xFA	; 250
    1236:	ee 24       	eor	r14, r14
    1238:	68 94       	set
    123a:	e1 f8       	bld	r14, 1
    123c:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
			g8_gloabal_int0_flag=0;
    1240:	10 92 68 01 	sts	0x0168, r1
    1244:	ec cf       	rjmp	.-40     	; 0x121e <trafficlight_using_timer0_using_interrupts_button+0x2c>

00001246 <__vector_11>:


/****************************these ISRs for SWPWM****************************/

ISR(TIMER0_OVF_vect)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	gpioPinWrite(GPIOD, BIT4,BIT4);
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	60 e1       	ldi	r22, 0x10	; 16
    1274:	40 e1       	ldi	r20, 0x10	; 16
    1276:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
	gpioPinWrite(GPIOD, BIT5,BIT5);
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	60 e2       	ldi	r22, 0x20	; 32
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
	TCNT0=g8_TCNT0_value_Swpwm_ISR;
    1284:	e2 e5       	ldi	r30, 0x52	; 82
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 91 6d 01 	lds	r24, 0x016D
    128c:	80 83       	st	Z, r24
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	gpioPinWrite(GPIOD, BIT4,LOW);
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	60 e1       	ldi	r22, 0x10	; 16
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
	gpioPinWrite(GPIOD, BIT5,LOW);
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	60 e2       	ldi	r22, 0x20	; 32
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <SwICU_Init>:

#include "SwICU.h"
volatile uint8_t g8_SwICU;

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
    1318:	ef 92       	push	r14
    131a:	0f 93       	push	r16
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
	INT0_Init(a_en_inputCaptureEdge);
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <INT0_Init>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,0,0,T0_INTERRUPT_NORMAL);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	45 e0       	ldi	r20, 0x05	; 5
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	00 e0       	ldi	r16, 0x00	; 0
    1338:	ee 24       	eor	r14, r14
    133a:	e3 94       	inc	r14
    133c:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
}
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	0f 91       	pop	r16
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <SwICU_SetCfgEdge>:


void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01

}
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <SwICU_Read>:


void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <SwICU_Read+0x6>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
	*a_pu8_capt=g8_SwICU;
    136e:	80 91 6b 01 	lds	r24, 0x016B
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	80 83       	st	Z, r24
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <SwICU_Start>:

void SwICU_Start(void)
{
    1382:	ef 92       	push	r14
    1384:	0f 93       	push	r16
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	/* one timer tick = 4 (us) for 64 prescaller
	 * one timer tick = 16 (us) for 256 prescaller
	 * one timer tick = 64 (us) for 1024 prescaller
	 * */
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,0,T0_INTERRUPT_NORMAL);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	43 e0       	ldi	r20, 0x03	; 3
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	ee 24       	eor	r14, r14
    139a:	e3 94       	inc	r14
    139c:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	0f 91       	pop	r16
    13a6:	ef 90       	pop	r14
    13a8:	08 95       	ret

000013aa <SwICU_Stop>:

void SwICU_Stop(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	timer0Stop();
    13b2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <SwICU_Enable>:

void SwICU_Enable(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62

}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <SwICU_Disable>:

void SwICU_Disable(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	timer0Stop();
    13d2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>
	INT0_DeInit();
    13d6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <INT0_DeInit>
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <US_init>:

/************************************************************************/

/********************************functions********************************/
void US_init(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	gpioPinDirection(GPIOA, BIT0,OUTPUT);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	4f ef       	ldi	r20, 0xFF	; 255
    13ee:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
	SwICU_Init(SwICU_EdgeRisiging);
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	0e 94 8c 09 	call	0x1318	; 0x1318 <SwICU_Init>
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <US_triger>:

void US_triger(void)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	gpioPinWrite(US_TRIGGER_GPIO,US_TRIGGER_BIT,US_TRIGGER_BIT);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
	softwareDelayMs(10);
    1410:	6a e0       	ldi	r22, 0x0A	; 10
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
	gpioPinWrite(US_TRIGGER_GPIO,US_TRIGGER_BIT,LOW);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <US_start>:

void US_start(void)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	SwICU_Start();
    1434:	0e 94 c1 09 	call	0x1382	; 0x1382 <SwICU_Start>
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <US_stop>:

void US_stop(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	SwICU_Disable();
    1446:	0e 94 e5 09 	call	0x13ca	; 0x13ca <SwICU_Disable>
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <US_get_reading>:

uint8_t US_get_reading(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <US_get_reading+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	 * 4 m = 11764.7 us  with 1024 pre 183.8 ticks
	 * 15 m =44117.6 us */

	volatile uint8_t u8_timer_ticks;
	uint8_t u8_distance;
	while(g8_gloabal_int0_flag==DOWN);
    145a:	80 91 68 01 	lds	r24, 0x0168
    145e:	88 23       	and	r24, r24
    1460:	e1 f3       	breq	.-8      	; 0x145a <US_get_reading+0xa>
	g8_gloabal_int0_flag=DOWN;
    1462:	10 92 68 01 	sts	0x0168, r1
	SwICU_Read(&u8_timer_ticks);
    1466:	ce 01       	movw	r24, r28
    1468:	02 96       	adiw	r24, 0x02	; 2
    146a:	0e 94 b0 09 	call	0x1360	; 0x1360 <SwICU_Read>
	u8_distance=u8_timer_ticks/7;
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	97 e0       	ldi	r25, 0x07	; 7
    1472:	69 2f       	mov	r22, r25
    1474:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__udivmodqi4>
    1478:	89 83       	std	Y+1, r24	; 0x01
	return u8_distance;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <US_deinit>:

void US_deinit(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <MotorDC_Init>:
#include "dcMotor.h"



void MotorDC_Init(En_motorType_t en_motor_number)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <MotorDC_Init+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3b 83       	std	Y+3, r19	; 0x03
    14aa:	2a 83       	std	Y+2, r18	; 0x02
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <MotorDC_Init+0x2c>
    14b4:	2a 81       	ldd	r18, Y+2	; 0x02
    14b6:	3b 81       	ldd	r19, Y+3	; 0x03
    14b8:	21 30       	cpi	r18, 0x01	; 1
    14ba:	31 05       	cpc	r19, r1
    14bc:	01 f1       	breq	.+64     	; 0x14fe <MotorDC_Init+0x6a>
    14be:	3d c0       	rjmp	.+122    	; 0x153a <MotorDC_Init+0xa6>
	{
		case(MOT_1):
				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	60 e1       	ldi	r22, 0x10	; 16
    14c4:	4f ef       	ldi	r20, 0xFF	; 255
    14c6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,LOW);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	60 e1       	ldi	r22, 0x10	; 16
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	4f ef       	ldi	r20, 0xFF	; 255
    14da:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	64 e0       	ldi	r22, 0x04	; 4
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	68 e0       	ldi	r22, 0x08	; 8
    14ec:	4f ef       	ldi	r20, 0xFF	; 255
    14ee:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	68 e0       	ldi	r22, 0x08	; 8
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    14fc:	1e c0       	rjmp	.+60     	; 0x153a <MotorDC_Init+0xa6>

				break;

		case(MOT_2):
				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	60 e2       	ldi	r22, 0x20	; 32
    1502:	4f ef       	ldi	r20, 0xFF	; 255
    1504:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,LOW);   /*disable motor1*/
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	60 e2       	ldi	r22, 0x20	; 32
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	60 e4       	ldi	r22, 0x40	; 64
    1516:	4f ef       	ldi	r20, 0xFF	; 255
    1518:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	60 e4       	ldi	r22, 0x40	; 64
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	60 e8       	ldi	r22, 0x80	; 128
    152a:	4f ef       	ldi	r20, 0xFF	; 255
    152c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	60 e8       	ldi	r22, 0x80	; 128
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>

				break;
	}
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <MotorDC_Dir>:


void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	28 97       	sbiw	r28, 0x08	; 8
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	6a 83       	std	Y+2, r22	; 0x02
	switch(en_motor_number)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	38 87       	std	Y+8, r19	; 0x08
    1566:	2f 83       	std	Y+7, r18	; 0x07
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	98 85       	ldd	r25, Y+8	; 0x08
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	31 f0       	breq	.+12     	; 0x157c <MotorDC_Dir+0x36>
    1570:	2f 81       	ldd	r18, Y+7	; 0x07
    1572:	38 85       	ldd	r19, Y+8	; 0x08
    1574:	21 30       	cpi	r18, 0x01	; 1
    1576:	31 05       	cpc	r19, r1
    1578:	b1 f1       	breq	.+108    	; 0x15e6 <MotorDC_Dir+0xa0>
    157a:	68 c0       	rjmp	.+208    	; 0x164c <MotorDC_Dir+0x106>
	{
		case(MOT_1):
				switch(en_motor_dir)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3e 83       	std	Y+6, r19	; 0x06
    1584:	2d 83       	std	Y+5, r18	; 0x05
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	a9 f0       	breq	.+42     	; 0x15ba <MotorDC_Dir+0x74>
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	3e 81       	ldd	r19, Y+6	; 0x06
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	d9 f0       	breq	.+54     	; 0x15d0 <MotorDC_Dir+0x8a>
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <MotorDC_Dir+0x5e>
    15a2:	54 c0       	rjmp	.+168    	; 0x164c <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	64 e0       	ldi	r22, 0x04	; 4
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	68 e0       	ldi	r22, 0x08	; 8
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    15b8:	49 c0       	rjmp	.+146    	; 0x164c <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,LOW);

						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	64 e0       	ldi	r22, 0x04	; 4
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,MOTOR_OUT_1B_BIT);
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	68 e0       	ldi	r22, 0x08	; 8
    15c8:	48 e0       	ldi	r20, 0x08	; 8
    15ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    15ce:	3e c0       	rjmp	.+124    	; 0x164c <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,MOTOR_EN_1_BIT);
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,MOTOR_OUT_1A_BIT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	64 e0       	ldi	r22, 0x04	; 4
    15d4:	44 e0       	ldi	r20, 0x04	; 4
    15d6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	68 e0       	ldi	r22, 0x08	; 8
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    15e4:	33 c0       	rjmp	.+102    	; 0x164c <MotorDC_Dir+0x106>
				}

				break;

		case(MOT_2):
				switch(en_motor_dir)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3c 83       	std	Y+4, r19	; 0x04
    15ee:	2b 83       	std	Y+3, r18	; 0x03
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	a1 f0       	breq	.+40     	; 0x1622 <MotorDC_Dir+0xdc>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	d1 f0       	breq	.+52     	; 0x1638 <MotorDC_Dir+0xf2>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	01 f5       	brne	.+64     	; 0x164c <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	60 e4       	ldi	r22, 0x40	; 64
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	60 e8       	ldi	r22, 0x80	; 128
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1620:	15 c0       	rjmp	.+42     	; 0x164c <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,LOW);
						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	60 e4       	ldi	r22, 0x40	; 64
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,MOTOR_OUT_2B_BIT);
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	60 e8       	ldi	r22, 0x80	; 128
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1636:	0a c0       	rjmp	.+20     	; 0x164c <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,MOTOR_EN_2_BIT);
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,MOTOR_OUT_2A_BIT);
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	60 e4       	ldi	r22, 0x40	; 64
    163c:	40 e4       	ldi	r20, 0x40	; 64
    163e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	60 e8       	ldi	r22, 0x80	; 128
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,MOTOR_EN_2_BIT);
						break;
				}
	}
}
    164c:	28 96       	adiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <MotorDC_Speed_PollingWithT0>:


void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed,T0_FREQUENCY_61HZ);
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	65 e0       	ldi	r22, 0x05	; 5
    166e:	0e 94 47 14 	call	0x288e	; 0x288e <timer0SwPWM>
}
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <MotorDC_Speed_HwPWM>:


void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	89 83       	std	Y+1, r24	; 0x01
	timer1HwPWM_PhaseCorrect(u8_motor_speed,T1_PHASE_CORRECT_FREQUENCY_400HZ);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <timer1HwPWM_PhaseCorrect>
}
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <gpioPortDirection>:
#include "gpio.h"
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <gpioPortDirection+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <gpioPortDirection+0x8>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	d1 f0       	breq	.+52     	; 0x16ee <gpioPortDirection+0x58>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <gpioPortDirection+0x38>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <gpioPortDirection+0x4e>
    16cc:	1e c0       	rjmp	.+60     	; 0x170a <gpioPortDirection+0x74>
    16ce:	2b 81       	ldd	r18, Y+3	; 0x03
    16d0:	3c 81       	ldd	r19, Y+4	; 0x04
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <gpioPortDirection+0x62>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <gpioPortDirection+0x6c>
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <gpioPortDirection+0x74>
	{
	case 0:
			PORTA_DIR=u8_direction;
    16e4:	ea e3       	ldi	r30, 0x3A	; 58
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	80 83       	st	Z, r24
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <gpioPortDirection+0x74>
		break;

	case 1:
			PORTB_DIR=u8_direction;
    16ee:	e7 e3       	ldi	r30, 0x37	; 55
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <gpioPortDirection+0x74>
			break;
	case 2:
			PORTC_DIR=u8_direction;
    16f8:	e4 e3       	ldi	r30, 0x34	; 52
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
    1700:	04 c0       	rjmp	.+8      	; 0x170a <gpioPortDirection+0x74>
		break;

	case 3:
			PORTD_DIR=u8_direction;
    1702:	e1 e3       	ldi	r30, 0x31	; 49
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
		break;

	}
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <gpioPortWrite>:


void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <gpioPortWrite+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <gpioPortWrite+0x8>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3c 83       	std	Y+4, r19	; 0x04
    1730:	2b 83       	std	Y+3, r18	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	d1 f0       	breq	.+52     	; 0x1770 <gpioPortWrite+0x58>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <gpioPortWrite+0x38>
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	61 f0       	breq	.+24     	; 0x1766 <gpioPortWrite+0x4e>
    174e:	1e c0       	rjmp	.+60     	; 0x178c <gpioPortWrite+0x74>
    1750:	2b 81       	ldd	r18, Y+3	; 0x03
    1752:	3c 81       	ldd	r19, Y+4	; 0x04
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	81 f0       	breq	.+32     	; 0x177a <gpioPortWrite+0x62>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <gpioPortWrite+0x6c>
    1764:	13 c0       	rjmp	.+38     	; 0x178c <gpioPortWrite+0x74>
	{
	case 0:
			PORTA_DATA=u8_value;
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	80 83       	st	Z, r24
    176e:	0e c0       	rjmp	.+28     	; 0x178c <gpioPortWrite+0x74>

		break;

	case 1:
			PORTB_DATA=u8_value;
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
    1778:	09 c0       	rjmp	.+18     	; 0x178c <gpioPortWrite+0x74>
		break;

	case 2:
			PORTC_DATA=u8_value;
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24
    1782:	04 c0       	rjmp	.+8      	; 0x178c <gpioPortWrite+0x74>
		break;

	case 3:
			PORTD_DATA=u8_value;
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 83       	st	Z, r24
		break;

	}
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <gpioPortToggle+0x6>
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_port)
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3b 83       	std	Y+3, r19	; 0x03
    17b0:	2a 83       	std	Y+2, r18	; 0x02
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	9b 81       	ldd	r25, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	e9 f0       	breq	.+58     	; 0x17f6 <gpioPortToggle+0x5c>
    17bc:	2a 81       	ldd	r18, Y+2	; 0x02
    17be:	3b 81       	ldd	r19, Y+3	; 0x03
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <gpioPortToggle+0x36>
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <gpioPortToggle+0x4c>
    17ce:	2a c0       	rjmp	.+84     	; 0x1824 <gpioPortToggle+0x8a>
    17d0:	2a 81       	ldd	r18, Y+2	; 0x02
    17d2:	3b 81       	ldd	r19, Y+3	; 0x03
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	b1 f0       	breq	.+44     	; 0x1806 <gpioPortToggle+0x6c>
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	9b 81       	ldd	r25, Y+3	; 0x03
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	c9 f0       	breq	.+50     	; 0x1816 <gpioPortToggle+0x7c>
    17e4:	1f c0       	rjmp	.+62     	; 0x1824 <gpioPortToggle+0x8a>
	{
	case 0:
		PORTA_DATA ^= HIGH;
    17e6:	ab e3       	ldi	r26, 0x3B	; 59
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	eb e3       	ldi	r30, 0x3B	; 59
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 95       	com	r24
    17f2:	8c 93       	st	X, r24
    17f4:	17 c0       	rjmp	.+46     	; 0x1824 <gpioPortToggle+0x8a>
		break;

	case 1:
		PORTB_DATA ^= HIGH;
    17f6:	a8 e3       	ldi	r26, 0x38	; 56
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 95       	com	r24
    1802:	8c 93       	st	X, r24
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <gpioPortToggle+0x8a>
		break;

	case 2:
		PORTC_DATA ^= HIGH;
    1806:	a5 e3       	ldi	r26, 0x35	; 53
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 95       	com	r24
    1812:	8c 93       	st	X, r24
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <gpioPortToggle+0x8a>
		break;

	case 3:
		PORTD_DATA ^= HIGH;
    1816:	a2 e3       	ldi	r26, 0x32	; 50
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e2 e3       	ldi	r30, 0x32	; 50
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 95       	com	r24
    1822:	8c 93       	st	X, r24
		break;

	}
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <gpioPortRead+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <gpioPortRead+0x8>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	switch(u8_port)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3c 83       	std	Y+4, r19	; 0x04
    1846:	2b 83       	std	Y+3, r18	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	d1 f0       	breq	.+52     	; 0x1886 <gpioPortRead+0x56>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <gpioPortRead+0x36>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <gpioPortRead+0x4c>
    1864:	1e c0       	rjmp	.+60     	; 0x18a2 <gpioPortRead+0x72>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <gpioPortRead+0x60>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	81 f0       	breq	.+32     	; 0x189a <gpioPortRead+0x6a>
    187a:	13 c0       	rjmp	.+38     	; 0x18a2 <gpioPortRead+0x72>
	{
	case 0:
		data=PORTA_PIN;
    187c:	e9 e3       	ldi	r30, 0x39	; 57
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	0e c0       	rjmp	.+28     	; 0x18a2 <gpioPortRead+0x72>
		break;

	case 1:
		data=PORTB_PIN;
    1886:	e6 e3       	ldi	r30, 0x36	; 54
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <gpioPortRead+0x72>
		break;

	case 2:
		data=PORTC_PIN;
    1890:	e3 e3       	ldi	r30, 0x33	; 51
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <gpioPortRead+0x72>
		break;
	case 3:
		data=PORTD_PIN;
    189a:	e0 e3       	ldi	r30, 0x30	; 48
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <gpioPinDirection+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <gpioPinDirection+0x8>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
    18c4:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3d 83       	std	Y+5, r19	; 0x05
    18ce:	2c 83       	std	Y+4, r18	; 0x04
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	91 05       	cpc	r25, r1
    18d8:	69 f1       	breq	.+90     	; 0x1934 <gpioPinDirection+0x82>
    18da:	2c 81       	ldd	r18, Y+4	; 0x04
    18dc:	3d 81       	ldd	r19, Y+5	; 0x05
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	2c f4       	brge	.+10     	; 0x18ee <gpioPinDirection+0x3c>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f0       	breq	.+26     	; 0x1906 <gpioPinDirection+0x54>
    18ec:	67 c0       	rjmp	.+206    	; 0x19bc <gpioPinDirection+0x10a>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	a9 f1       	breq	.+106    	; 0x1962 <gpioPinDirection+0xb0>
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <gpioPinDirection+0x52>
    1902:	46 c0       	rjmp	.+140    	; 0x1990 <gpioPinDirection+0xde>
    1904:	5b c0       	rjmp	.+182    	; 0x19bc <gpioPinDirection+0x10a>
	{
	case 0:
		if(u8_direction == INPUT)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 23       	and	r24, r24
    190a:	59 f4       	brne	.+22     	; 0x1922 <gpioPinDirection+0x70>
		{
			PORTA_DIR &= ~(u8_pins);
    190c:	aa e3       	ldi	r26, 0x3A	; 58
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ea e3       	ldi	r30, 0x3A	; 58
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	98 2f       	mov	r25, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	80 95       	com	r24
    191c:	89 23       	and	r24, r25
    191e:	8c 93       	st	X, r24
    1920:	4d c0       	rjmp	.+154    	; 0x19bc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTA_DIR |= u8_pins;
    1922:	aa e3       	ldi	r26, 0x3A	; 58
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	90 81       	ld	r25, Z
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	89 2b       	or	r24, r25
    1930:	8c 93       	st	X, r24
    1932:	44 c0       	rjmp	.+136    	; 0x19bc <gpioPinDirection+0x10a>
		}
		break;

	case 1:
		if(u8_direction == INPUT)
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	88 23       	and	r24, r24
    1938:	59 f4       	brne	.+22     	; 0x1950 <gpioPinDirection+0x9e>
		{
			PORTB_DIR &= ~(u8_pins);
    193a:	a7 e3       	ldi	r26, 0x37	; 55
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e7 e3       	ldi	r30, 0x37	; 55
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	98 2f       	mov	r25, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	80 95       	com	r24
    194a:	89 23       	and	r24, r25
    194c:	8c 93       	st	X, r24
    194e:	36 c0       	rjmp	.+108    	; 0x19bc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTB_DIR |= u8_pins;
    1950:	a7 e3       	ldi	r26, 0x37	; 55
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e7 e3       	ldi	r30, 0x37	; 55
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	90 81       	ld	r25, Z
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	89 2b       	or	r24, r25
    195e:	8c 93       	st	X, r24
    1960:	2d c0       	rjmp	.+90     	; 0x19bc <gpioPinDirection+0x10a>
		}
		break;
	case 2:
		if(u8_direction == INPUT)
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	88 23       	and	r24, r24
    1966:	59 f4       	brne	.+22     	; 0x197e <gpioPinDirection+0xcc>
		{
			PORTC_DIR &= ~(u8_pins);
    1968:	a4 e3       	ldi	r26, 0x34	; 52
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e4 e3       	ldi	r30, 0x34	; 52
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	98 2f       	mov	r25, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 95       	com	r24
    1978:	89 23       	and	r24, r25
    197a:	8c 93       	st	X, r24
    197c:	1f c0       	rjmp	.+62     	; 0x19bc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTC_DIR |= u8_pins;
    197e:	a4 e3       	ldi	r26, 0x34	; 52
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e4 e3       	ldi	r30, 0x34	; 52
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	90 81       	ld	r25, Z
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	89 2b       	or	r24, r25
    198c:	8c 93       	st	X, r24
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <gpioPinDirection+0x10a>
		}
		break;

	case 3:
		if(u8_direction == INPUT)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 23       	and	r24, r24
    1994:	59 f4       	brne	.+22     	; 0x19ac <gpioPinDirection+0xfa>
		{
			PORTD_DIR &= ~(u8_pins);
    1996:	a1 e3       	ldi	r26, 0x31	; 49
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e1 e3       	ldi	r30, 0x31	; 49
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	98 2f       	mov	r25, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 95       	com	r24
    19a6:	89 23       	and	r24, r25
    19a8:	8c 93       	st	X, r24
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTD_DIR |= u8_pins;
    19ac:	a1 e3       	ldi	r26, 0x31	; 49
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e1 e3       	ldi	r30, 0x31	; 49
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	90 81       	ld	r25, Z
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	89 2b       	or	r24, r25
    19ba:	8c 93       	st	X, r24
		}
		break;

	}
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <gpioPinWrite>:
 * example: gpioPinWrite(PORTA_DATA, BIT3,BIT3);
 * to write 0 send LOW as u8_value and pins numbers as u8_pins
 * example: gpioPinWrite(PORTA_DATA, BIT3,LOW);
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <gpioPinWrite+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <gpioPinWrite+0x8>
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
    19de:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3d 83       	std	Y+5, r19	; 0x05
    19e8:	2c 83       	std	Y+4, r18	; 0x04
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	41 f1       	breq	.+80     	; 0x1a44 <gpioPinWrite+0x78>
    19f4:	2c 81       	ldd	r18, Y+4	; 0x04
    19f6:	3d 81       	ldd	r19, Y+5	; 0x05
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <gpioPinWrite+0x3c>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <gpioPinWrite+0x52>
    1a06:	56 c0       	rjmp	.+172    	; 0x1ab4 <gpioPinWrite+0xe8>
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	61 f1       	breq	.+88     	; 0x1a6a <gpioPinWrite+0x9e>
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	d1 f1       	breq	.+116    	; 0x1a90 <gpioPinWrite+0xc4>
    1a1c:	4b c0       	rjmp	.+150    	; 0x1ab4 <gpioPinWrite+0xe8>
	{
	case 0:
			PORTA_DATA &= ~(u8_pins);
    1a1e:	ab e3       	ldi	r26, 0x3B	; 59
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	eb e3       	ldi	r30, 0x3B	; 59
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	98 2f       	mov	r25, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 95       	com	r24
    1a2e:	89 23       	and	r24, r25
    1a30:	8c 93       	st	X, r24
			PORTA_DATA |= u8_value;
    1a32:	ab e3       	ldi	r26, 0x3B	; 59
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	90 81       	ld	r25, Z
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	89 2b       	or	r24, r25
    1a40:	8c 93       	st	X, r24
    1a42:	38 c0       	rjmp	.+112    	; 0x1ab4 <gpioPinWrite+0xe8>

		break;

	case 1:
			PORTB_DATA &= ~(u8_pins);
    1a44:	a8 e3       	ldi	r26, 0x38	; 56
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e3       	ldi	r30, 0x38	; 56
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	98 2f       	mov	r25, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 95       	com	r24
    1a54:	89 23       	and	r24, r25
    1a56:	8c 93       	st	X, r24
			PORTB_DATA |= u8_value;
    1a58:	a8 e3       	ldi	r26, 0x38	; 56
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e3       	ldi	r30, 0x38	; 56
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	90 81       	ld	r25, Z
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	89 2b       	or	r24, r25
    1a66:	8c 93       	st	X, r24
    1a68:	25 c0       	rjmp	.+74     	; 0x1ab4 <gpioPinWrite+0xe8>
		break;

	case 2:
			PORTC_DATA &= ~(u8_pins);
    1a6a:	a5 e3       	ldi	r26, 0x35	; 53
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e5 e3       	ldi	r30, 0x35	; 53
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	98 2f       	mov	r25, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	80 95       	com	r24
    1a7a:	89 23       	and	r24, r25
    1a7c:	8c 93       	st	X, r24
			PORTC_DATA |= u8_value;
    1a7e:	a5 e3       	ldi	r26, 0x35	; 53
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e3       	ldi	r30, 0x35	; 53
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	90 81       	ld	r25, Z
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	89 2b       	or	r24, r25
    1a8c:	8c 93       	st	X, r24
    1a8e:	12 c0       	rjmp	.+36     	; 0x1ab4 <gpioPinWrite+0xe8>
		break;

	case 3:
			PORTD_DATA &= ~(u8_pins);
    1a90:	a2 e3       	ldi	r26, 0x32	; 50
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e2 e3       	ldi	r30, 0x32	; 50
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 95       	com	r24
    1aa0:	89 23       	and	r24, r25
    1aa2:	8c 93       	st	X, r24
			PORTD_DATA |= u8_value;
    1aa4:	a2 e3       	ldi	r26, 0x32	; 50
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e2 e3       	ldi	r30, 0x32	; 50
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	90 81       	ld	r25, Z
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	89 2b       	or	r24, r25
    1ab2:	8c 93       	st	X, r24
		break;

	}
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <gpioPinToggle+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <gpioPinToggle+0x8>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3c 83       	std	Y+4, r19	; 0x04
    1adc:	2b 83       	std	Y+3, r18	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	f1 f0       	breq	.+60     	; 0x1b24 <gpioPinToggle+0x60>
    1ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aea:	3c 81       	ldd	r19, Y+4	; 0x04
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	2c f4       	brge	.+10     	; 0x1afc <gpioPinToggle+0x38>
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	61 f0       	breq	.+24     	; 0x1b12 <gpioPinToggle+0x4e>
    1afa:	2e c0       	rjmp	.+92     	; 0x1b58 <gpioPinToggle+0x94>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	3c 81       	ldd	r19, Y+4	; 0x04
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	31 05       	cpc	r19, r1
    1b04:	c1 f0       	breq	.+48     	; 0x1b36 <gpioPinToggle+0x72>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	e1 f0       	breq	.+56     	; 0x1b48 <gpioPinToggle+0x84>
    1b10:	23 c0       	rjmp	.+70     	; 0x1b58 <gpioPinToggle+0x94>
	{
	case 0:
			PORTA_DATA ^= u8_pins;
    1b12:	ab e3       	ldi	r26, 0x3B	; 59
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	eb e3       	ldi	r30, 0x3B	; 59
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	90 81       	ld	r25, Z
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	89 27       	eor	r24, r25
    1b20:	8c 93       	st	X, r24
    1b22:	1a c0       	rjmp	.+52     	; 0x1b58 <gpioPinToggle+0x94>
		break;

	case 1:
			PORTB_DATA ^= (u8_pins);
    1b24:	a8 e3       	ldi	r26, 0x38	; 56
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	90 81       	ld	r25, Z
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	89 27       	eor	r24, r25
    1b32:	8c 93       	st	X, r24
    1b34:	11 c0       	rjmp	.+34     	; 0x1b58 <gpioPinToggle+0x94>
		break;
	case 2:
			PORTC_DATA ^= (u8_pins);
    1b36:	a5 e3       	ldi	r26, 0x35	; 53
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e3       	ldi	r30, 0x35	; 53
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	90 81       	ld	r25, Z
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	89 27       	eor	r24, r25
    1b44:	8c 93       	st	X, r24
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <gpioPinToggle+0x94>
		break;

	case 3:
			PORTD_DATA ^= (u8_pins);
    1b48:	a2 e3       	ldi	r26, 0x32	; 50
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e2 e3       	ldi	r30, 0x32	; 50
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	90 81       	ld	r25, Z
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	89 27       	eor	r24, r25
    1b56:	8c 93       	st	X, r24
		break;

	}
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <gpioPinRead+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <gpioPinRead+0x8>
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t data;
	switch(u8_port)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3d 83       	std	Y+5, r19	; 0x05
    1b80:	2c 83       	std	Y+4, r18	; 0x04
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	e1 f0       	breq	.+56     	; 0x1bc4 <gpioPinRead+0x5e>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <gpioPinRead+0x3a>
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <gpioPinRead+0x50>
    1b9e:	26 c0       	rjmp	.+76     	; 0x1bec <gpioPinRead+0x86>
    1ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	a1 f0       	breq	.+40     	; 0x1bd2 <gpioPinRead+0x6c>
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	b1 f0       	breq	.+44     	; 0x1be0 <gpioPinRead+0x7a>
    1bb4:	1b c0       	rjmp	.+54     	; 0x1bec <gpioPinRead+0x86>
	{
	case 0:
		data= (PORTA_PIN & u8_pin);
    1bb6:	e9 e3       	ldi	r30, 0x39	; 57
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	90 81       	ld	r25, Z
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	89 23       	and	r24, r25
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <gpioPinRead+0x86>
		break;

	case 1:
		data= (PORTB_PIN & u8_pin);
    1bc4:	e6 e3       	ldi	r30, 0x36	; 54
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	90 81       	ld	r25, Z
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	89 23       	and	r24, r25
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <gpioPinRead+0x86>
		break;

	case 2:
		data= (PORTC_PIN & u8_pin);
    1bd2:	e3 e3       	ldi	r30, 0x33	; 51
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	90 81       	ld	r25, Z
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	89 23       	and	r24, r25
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <gpioPinRead+0x86>
		break;
	case 3:
		data= (PORTD_PIN & u8_pin);
    1be0:	e0 e3       	ldi	r30, 0x30	; 48
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	90 81       	ld	r25, Z
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	89 23       	and	r24, r25
    1bea:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(data!=LOW)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 23       	and	r24, r24
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <gpioPinRead+0x90>
	{
		data=HIGH;
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <INT0_Init>:
uint8_t g8_state;
uint8_t g8_interrupt_zero_flag=0;

/************************INT0*****************************************/
void INT0_Init(EN_Edge_t en_edge_selection)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <INT0_Init+0x6>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    1c16:	f8 94       	cli
	GICR  |= (1<<INT0);                 /* Enable external interrupt pin INT0*/
    1c18:	ab e5       	ldi	r26, 0x5B	; 91
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	eb e5       	ldi	r30, 0x5B	; 91
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	8c 93       	st	X, r24
	gpioPinDirection(GPIOD,BIT2,INPUT);  /*set INT0 pin as input */
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	64 e0       	ldi	r22, 0x04	; 4
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
	switch(en_edge_selection)
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3b 83       	std	Y+3, r19	; 0x03
    1c38:	2a 83       	std	Y+2, r18	; 0x02
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	81 f0       	breq	.+32     	; 0x1c64 <INT0_Init+0x5c>
    1c44:	2a 81       	ldd	r18, Y+2	; 0x02
    1c46:	3b 81       	ldd	r19, Y+3	; 0x03
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	14 f1       	brlt	.+68     	; 0x1c92 <INT0_Init+0x8a>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	91 05       	cpc	r25, r1
    1c56:	71 f0       	breq	.+28     	; 0x1c74 <INT0_Init+0x6c>
    1c58:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c5c:	23 30       	cpi	r18, 0x03	; 3
    1c5e:	31 05       	cpc	r19, r1
    1c60:	89 f0       	breq	.+34     	; 0x1c84 <INT0_Init+0x7c>
    1c62:	17 c0       	rjmp	.+46     	; 0x1c92 <INT0_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    1c64:	a5 e5       	ldi	r26, 0x55	; 85
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e5       	ldi	r30, 0x55	; 85
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	84 60       	ori	r24, 0x04	; 4
    1c70:	8c 93       	st	X, r24
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <INT0_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    1c74:	a5 e5       	ldi	r26, 0x55	; 85
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e5       	ldi	r30, 0x55	; 85
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	81 60       	ori	r24, 0x01	; 1
    1c80:	8c 93       	st	X, r24
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <INT0_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    1c84:	a5 e5       	ldi	r26, 0x55	; 85
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e5 e5       	ldi	r30, 0x55	; 85
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	83 60       	ori	r24, 0x03	; 3
    1c90:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1c92:	78 94       	sei
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <INT0_DeInit>:


void INT0_DeInit(void)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    1ca8:	f8 94       	cli
	GICR  &= ~(1<<INT0);                 /* Disable external interrupt pin INT0*/
    1caa:	ab e5       	ldi	r26, 0x5B	; 91
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8f 7b       	andi	r24, 0xBF	; 191
    1cb6:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    1cb8:	a5 e5       	ldi	r26, 0x55	; 85
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e5 e5       	ldi	r30, 0x55	; 85
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	8c 7f       	andi	r24, 0xFC	; 252
    1cc4:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    1cc6:	78 94       	sei
}
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <INT1_Init>:

/****************************INT1*******************************************/
void INT1_Init(EN_Edge_t en_edge_selection)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <INT1_Init+0x6>
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    1cdc:	f8 94       	cli
	GICR  |= (1<<INT1);                 /* Enable external interrupt pin INT1*/
    1cde:	ab e5       	ldi	r26, 0x5B	; 91
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	eb e5       	ldi	r30, 0x5B	; 91
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	8c 93       	st	X, r24
	gpioPinDirection(GPIOD,BIT3,INPUT); /*set INT1 pin as input*/
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	68 e0       	ldi	r22, 0x08	; 8
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
	switch(en_edge_selection)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3b 83       	std	Y+3, r19	; 0x03
    1cfe:	2a 83       	std	Y+2, r18	; 0x02
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	81 f0       	breq	.+32     	; 0x1d2a <INT1_Init+0x5c>
    1d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	14 f1       	brlt	.+68     	; 0x1d58 <INT1_Init+0x8a>
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	9b 81       	ldd	r25, Y+3	; 0x03
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	71 f0       	breq	.+28     	; 0x1d3a <INT1_Init+0x6c>
    1d1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d20:	3b 81       	ldd	r19, Y+3	; 0x03
    1d22:	23 30       	cpi	r18, 0x03	; 3
    1d24:	31 05       	cpc	r19, r1
    1d26:	89 f0       	breq	.+34     	; 0x1d4a <INT1_Init+0x7c>
    1d28:	17 c0       	rjmp	.+46     	; 0x1d58 <INT1_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    1d2a:	a5 e5       	ldi	r26, 0x55	; 85
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e5       	ldi	r30, 0x55	; 85
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	84 60       	ori	r24, 0x04	; 4
    1d36:	8c 93       	st	X, r24
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <INT1_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    1d3a:	a5 e5       	ldi	r26, 0x55	; 85
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e5       	ldi	r30, 0x55	; 85
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	8c 93       	st	X, r24
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <INT1_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    1d4a:	a5 e5       	ldi	r26, 0x55	; 85
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e5       	ldi	r30, 0x55	; 85
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	83 60       	ori	r24, 0x03	; 3
    1d56:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1d58:	78 94       	sei
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <INT1_DeInit>:

void INT1_DeInit(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    1d6e:	f8 94       	cli
	GICR  &= ~(1<<INT1);                 /* Disable external interrupt pin INT0*/
    1d70:	ab e5       	ldi	r26, 0x5B	; 91
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e5       	ldi	r30, 0x5B	; 91
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 77       	andi	r24, 0x7F	; 127
    1d7c:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    1d7e:	a5 e5       	ldi	r26, 0x55	; 85
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e5       	ldi	r30, 0x55	; 85
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8c 7f       	andi	r24, 0xFC	; 252
    1d8a:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    1d8c:	78 94       	sei
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <INT2_Init>:

/****************************INT2*******************************************/
void INT2_Init(EN_Edge_t en_edge_selection)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <INT2_Init+0x6>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    1da2:	f8 94       	cli
	GICR  |= (1<<INT2);                 /* Enable external interrupt pin INT1*/
    1da4:	ab e5       	ldi	r26, 0x5B	; 91
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	eb e5       	ldi	r30, 0x5B	; 91
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	8c 93       	st	X, r24
	gpioPinDirection(GPIOB,BIT2,INPUT); /*set INT2 pin as input*/
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	64 e0       	ldi	r22, 0x04	; 4
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
	switch(en_edge_selection)
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	3b 83       	std	Y+3, r19	; 0x03
    1dc4:	2a 83       	std	Y+2, r18	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <INT2_Init+0x5c>
    1dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	14 f1       	brlt	.+68     	; 0x1e1e <INT2_Init+0x8a>
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	91 05       	cpc	r25, r1
    1de2:	71 f0       	breq	.+28     	; 0x1e00 <INT2_Init+0x6c>
    1de4:	2a 81       	ldd	r18, Y+2	; 0x02
    1de6:	3b 81       	ldd	r19, Y+3	; 0x03
    1de8:	23 30       	cpi	r18, 0x03	; 3
    1dea:	31 05       	cpc	r19, r1
    1dec:	89 f0       	breq	.+34     	; 0x1e10 <INT2_Init+0x7c>
    1dee:	17 c0       	rjmp	.+46     	; 0x1e1e <INT2_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    1df0:	a5 e5       	ldi	r26, 0x55	; 85
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e5 e5       	ldi	r30, 0x55	; 85
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	84 60       	ori	r24, 0x04	; 4
    1dfc:	8c 93       	st	X, r24
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <INT2_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    1e00:	a5 e5       	ldi	r26, 0x55	; 85
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e5       	ldi	r30, 0x55	; 85
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	81 60       	ori	r24, 0x01	; 1
    1e0c:	8c 93       	st	X, r24
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <INT2_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    1e10:	a5 e5       	ldi	r26, 0x55	; 85
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e5       	ldi	r30, 0x55	; 85
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	83 60       	ori	r24, 0x03	; 3
    1e1c:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1e1e:	78 94       	sei
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <INT2_DeInit>:

void INT2_DeInit(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    1e34:	f8 94       	cli
	GICR  &= ~(1<<INT2);                 /* Disable external interrupt pin INT0*/
    1e36:	ab e5       	ldi	r26, 0x5B	; 91
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e5       	ldi	r30, 0x5B	; 91
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 7d       	andi	r24, 0xDF	; 223
    1e42:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    1e44:	a5 e5       	ldi	r26, 0x55	; 85
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e5       	ldi	r30, 0x55	; 85
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8c 7f       	andi	r24, 0xFC	; 252
    1e50:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    1e52:	78 94       	sei
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <Led_Init>:
#include "led.h"
void Led_Init(En_LedNumber_t en_led_id)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <Led_Init+0x6>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3b 83       	std	Y+3, r19	; 0x03
    1e70:	2a 83       	std	Y+2, r18	; 0x02
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	01 f1       	breq	.+64     	; 0x1ebc <Led_Init+0x62>
    1e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <Led_Init+0x36>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <Led_Init+0x4c>
    1e8e:	36 c0       	rjmp	.+108    	; 0x1efc <Led_Init+0xa2>
    1e90:	2a 81       	ldd	r18, Y+2	; 0x02
    1e92:	3b 81       	ldd	r19, Y+3	; 0x03
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	e1 f0       	breq	.+56     	; 0x1ed2 <Led_Init+0x78>
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	11 f1       	breq	.+68     	; 0x1ee8 <Led_Init+0x8e>
    1ea4:	2b c0       	rjmp	.+86     	; 0x1efc <Led_Init+0xa2>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	4f ef       	ldi	r20, 0xFF	; 255
    1eac:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1eba:	20 c0       	rjmp	.+64     	; 0x1efc <Led_Init+0xa2>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1ed0:	15 c0       	rjmp	.+42     	; 0x1efc <Led_Init+0xa2>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	4f ef       	ldi	r20, 0xFF	; 255
    1ed8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <Led_Init+0xa2>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	68 e0       	ldi	r22, 0x08	; 8
    1eec:	4f ef       	ldi	r20, 0xFF	; 255
    1eee:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	68 e0       	ldi	r22, 0x08	; 8
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;

	}
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Led_On+0x6>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	3b 83       	std	Y+3, r19	; 0x03
    1f1e:	2a 83       	std	Y+2, r18	; 0x02
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	91 05       	cpc	r25, r1
    1f28:	d9 f0       	breq	.+54     	; 0x1f60 <Led_On+0x58>
    1f2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <Led_On+0x36>
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	61 f0       	breq	.+24     	; 0x1f54 <Led_On+0x4c>
    1f3c:	22 c0       	rjmp	.+68     	; 0x1f82 <Led_On+0x7a>
    1f3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f40:	3b 81       	ldd	r19, Y+3	; 0x03
    1f42:	22 30       	cpi	r18, 0x02	; 2
    1f44:	31 05       	cpc	r19, r1
    1f46:	91 f0       	breq	.+36     	; 0x1f6c <Led_On+0x64>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	91 05       	cpc	r25, r1
    1f50:	99 f0       	breq	.+38     	; 0x1f78 <Led_On+0x70>
    1f52:	17 c0       	rjmp	.+46     	; 0x1f82 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LED_0_BIT);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LED_1_BIT);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	62 e0       	ldi	r22, 0x02	; 2
    1f64:	42 e0       	ldi	r20, 0x02	; 2
    1f66:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1f6a:	0b c0       	rjmp	.+22     	; 0x1f82 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LED_2_BIT);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	44 e0       	ldi	r20, 0x04	; 4
    1f72:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LED_3_BIT);
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	68 e0       	ldi	r22, 0x08	; 8
    1f7c:	48 e0       	ldi	r20, 0x08	; 8
    1f7e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;

	}
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Led_Off+0x6>
    1f94:	0f 92       	push	r0
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3b 83       	std	Y+3, r19	; 0x03
    1fa4:	2a 83       	std	Y+2, r18	; 0x02
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	d9 f0       	breq	.+54     	; 0x1fe6 <Led_Off+0x58>
    1fb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <Led_Off+0x36>
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <Led_Off+0x4c>
    1fc2:	22 c0       	rjmp	.+68     	; 0x2008 <Led_Off+0x7a>
    1fc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	91 f0       	breq	.+36     	; 0x1ff2 <Led_Off+0x64>
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	99 f0       	breq	.+38     	; 0x1ffe <Led_Off+0x70>
    1fd8:	17 c0       	rjmp	.+46     	; 0x2008 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1fe4:	11 c0       	rjmp	.+34     	; 0x2008 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	64 e0       	ldi	r22, 0x04	; 4
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	68 e0       	ldi	r22, 0x08	; 8
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;

	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <Led_Toggle+0x6>
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
	gpioPinToggle(PORTB_DATA, en_led_id);
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	69 81       	ldd	r22, Y+1	; 0x01
    202a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpioPinToggle>
	switch(en_led_id)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	3b 83       	std	Y+3, r19	; 0x03
    2036:	2a 83       	std	Y+2, r18	; 0x02
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	d1 f0       	breq	.+52     	; 0x2076 <Led_Toggle+0x62>
    2042:	2a 81       	ldd	r18, Y+2	; 0x02
    2044:	3b 81       	ldd	r19, Y+3	; 0x03
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	2c f4       	brge	.+10     	; 0x2056 <Led_Toggle+0x42>
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 f0       	breq	.+24     	; 0x206c <Led_Toggle+0x58>
    2054:	1e c0       	rjmp	.+60     	; 0x2092 <Led_Toggle+0x7e>
    2056:	2a 81       	ldd	r18, Y+2	; 0x02
    2058:	3b 81       	ldd	r19, Y+3	; 0x03
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	81 f0       	breq	.+32     	; 0x2080 <Led_Toggle+0x6c>
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	81 f0       	breq	.+32     	; 0x208a <Led_Toggle+0x76>
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <Led_Toggle+0x7e>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpioPinToggle>
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <Led_Toggle+0x7e>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpioPinToggle>
    207e:	09 c0       	rjmp	.+18     	; 0x2092 <Led_Toggle+0x7e>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	64 e0       	ldi	r22, 0x04	; 4
    2084:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpioPinToggle>
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <Led_Toggle+0x7e>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	68 e0       	ldi	r22, 0x08	; 8
    208e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpioPinToggle>
		break;

	}
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <main>:
#include "led.h"
#include "AGILE_REQ2.h"
#include "AGILE_REQ3.h"

int main(void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	gpioPinDirection(GPIOB, BIT3, OUTPUT);
	gpioPinWrite(GPIOB, BIT3,LOW);
	timer0SwPWM(50,T0_FREQUENCY_61HZ);
*/
	/*first car application test*/
	car_application();
    20a6:	0e 94 8c 06 	call	0xd18	; 0xd18 <car_application>
    20aa:	ff cf       	rjmp	.-2      	; 0x20aa <main+0xc>

000020ac <pushButtonInit>:
#include "pushButton.h"
void pushButtonInit(En_buttonId_t en_butotn_id)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <pushButtonInit+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
	switch(en_butotn_id)
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	3b 83       	std	Y+3, r19	; 0x03
    20c2:	2a 83       	std	Y+2, r18	; 0x02
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	91 05       	cpc	r25, r1
    20cc:	31 f1       	breq	.+76     	; 0x211a <pushButtonInit+0x6e>
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	3b 81       	ldd	r19, Y+3	; 0x03
    20d2:	23 30       	cpi	r18, 0x03	; 3
    20d4:	31 05       	cpc	r19, r1
    20d6:	54 f4       	brge	.+20     	; 0x20ec <pushButtonInit+0x40>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	89 f0       	breq	.+34     	; 0x2102 <pushButtonInit+0x56>
    20e0:	2a 81       	ldd	r18, Y+2	; 0x02
    20e2:	3b 81       	ldd	r19, Y+3	; 0x03
    20e4:	21 30       	cpi	r18, 0x01	; 1
    20e6:	31 05       	cpc	r19, r1
    20e8:	91 f0       	breq	.+36     	; 0x210e <pushButtonInit+0x62>
    20ea:	28 c0       	rjmp	.+80     	; 0x213c <pushButtonInit+0x90>
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	91 05       	cpc	r25, r1
    20f4:	c1 f0       	breq	.+48     	; 0x2126 <pushButtonInit+0x7a>
    20f6:	2a 81       	ldd	r18, Y+2	; 0x02
    20f8:	3b 81       	ldd	r19, Y+3	; 0x03
    20fa:	24 30       	cpi	r18, 0x04	; 4
    20fc:	31 05       	cpc	r19, r1
    20fe:	c9 f0       	breq	.+50     	; 0x2132 <pushButtonInit+0x86>
    2100:	1d c0       	rjmp	.+58     	; 0x213c <pushButtonInit+0x90>
	{
		case BTN_0:
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	60 e1       	ldi	r22, 0x10	; 16
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
    210c:	17 c0       	rjmp	.+46     	; 0x213c <pushButtonInit+0x90>
			break;
		case BTN_1:
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
    2118:	11 c0       	rjmp	.+34     	; 0x213c <pushButtonInit+0x90>
			break;
		case BTN_2:
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
    2124:	0b c0       	rjmp	.+22     	; 0x213c <pushButtonInit+0x90>
			break;
		case BTN_3:
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	68 e0       	ldi	r22, 0x08	; 8
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
    2130:	05 c0       	rjmp	.+10     	; 0x213c <pushButtonInit+0x90>
			break;
		case BTN_4_INT0:
			gpioPinDirection(GPIOD, BIT2, INPUT);
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	64 e0       	ldi	r22, 0x04	; 4
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
			break;
	}
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <pushButtonGetStatus+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <pushButtonGetStatus+0x8>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char current_status=0;
    2156:	19 82       	std	Y+1, r1	; 0x01
	switch(en_butotn_id)
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3c 83       	std	Y+4, r19	; 0x04
    2160:	2b 83       	std	Y+3, r18	; 0x03
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	91 05       	cpc	r25, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <pushButtonGetStatus+0x26>
    216c:	50 c0       	rjmp	.+160    	; 0x220e <pushButtonGetStatus+0xc6>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	23 30       	cpi	r18, 0x03	; 3
    2174:	31 05       	cpc	r19, r1
    2176:	54 f4       	brge	.+20     	; 0x218c <pushButtonGetStatus+0x44>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	99 f0       	breq	.+38     	; 0x21a6 <pushButtonGetStatus+0x5e>
    2180:	2b 81       	ldd	r18, Y+3	; 0x03
    2182:	3c 81       	ldd	r19, Y+4	; 0x04
    2184:	21 30       	cpi	r18, 0x01	; 1
    2186:	31 05       	cpc	r19, r1
    2188:	41 f1       	breq	.+80     	; 0x21da <pushButtonGetStatus+0x92>
    218a:	89 c0       	rjmp	.+274    	; 0x229e <pushButtonGetStatus+0x156>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	91 05       	cpc	r25, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <pushButtonGetStatus+0x50>
    2196:	54 c0       	rjmp	.+168    	; 0x2240 <pushButtonGetStatus+0xf8>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	24 30       	cpi	r18, 0x04	; 4
    219e:	31 05       	cpc	r19, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <pushButtonGetStatus+0x5c>
    21a2:	66 c0       	rjmp	.+204    	; 0x2270 <pushButtonGetStatus+0x128>
    21a4:	7c c0       	rjmp	.+248    	; 0x229e <pushButtonGetStatus+0x156>
	{
		case BTN_0:
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	60 e1       	ldi	r22, 0x10	; 16
    21aa:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    21ae:	88 23       	and	r24, r24
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <pushButtonGetStatus+0x6c>
    21b2:	75 c0       	rjmp	.+234    	; 0x229e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    21b4:	6e e1       	ldi	r22, 0x1E	; 30
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	60 e1       	ldi	r22, 0x10	; 16
    21c4:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    21c8:	88 23       	and	r24, r24
    21ca:	09 f4       	brne	.+2      	; 0x21ce <pushButtonGetStatus+0x86>
    21cc:	68 c0       	rjmp	.+208    	; 0x229e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	60 e1       	ldi	r22, 0x10	; 16
    21d2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	62 c0       	rjmp	.+196    	; 0x229e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_1:
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	64 e0       	ldi	r22, 0x04	; 4
    21de:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    21e2:	88 23       	and	r24, r24
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <pushButtonGetStatus+0xa0>
    21e6:	5b c0       	rjmp	.+182    	; 0x229e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    21e8:	6e e1       	ldi	r22, 0x1E	; 30
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    21fc:	88 23       	and	r24, r24
    21fe:	09 f4       	brne	.+2      	; 0x2202 <pushButtonGetStatus+0xba>
    2200:	4e c0       	rjmp	.+156    	; 0x229e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	64 e0       	ldi	r22, 0x04	; 4
    2206:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	48 c0       	rjmp	.+144    	; 0x229e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_2:
			if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	64 e0       	ldi	r22, 0x04	; 4
    2212:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2216:	88 23       	and	r24, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <pushButtonGetStatus+0xd4>
    221a:	41 c0       	rjmp	.+130    	; 0x229e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    221c:	6e e1       	ldi	r22, 0x1E	; 30
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	64 e0       	ldi	r22, 0x04	; 4
    222c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2230:	88 23       	and	r24, r24
    2232:	a9 f1       	breq	.+106    	; 0x229e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	64 e0       	ldi	r22, 0x04	; 4
    2238:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	2f c0       	rjmp	.+94     	; 0x229e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_3:
			if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	68 e0       	ldi	r22, 0x08	; 8
    2244:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2248:	88 23       	and	r24, r24
    224a:	49 f1       	breq	.+82     	; 0x229e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    224c:	6e e1       	ldi	r22, 0x1E	; 30
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	68 e0       	ldi	r22, 0x08	; 8
    225c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2260:	88 23       	and	r24, r24
    2262:	e9 f0       	breq	.+58     	; 0x229e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	68 e0       	ldi	r22, 0x08	; 8
    2268:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	17 c0       	rjmp	.+46     	; 0x229e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_4_INT0:
			if(gpioPinRead(GPIOD, BIT2))
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	64 e0       	ldi	r22, 0x04	; 4
    2274:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2278:	88 23       	and	r24, r24
    227a:	89 f0       	breq	.+34     	; 0x229e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    227c:	6e e1       	ldi	r22, 0x1E	; 30
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 1d 12 	call	0x243a	; 0x243a <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(GPIOD, BIT2))
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	64 e0       	ldi	r22, 0x04	; 4
    228c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    2290:	88 23       	and	r24, r24
    2292:	29 f0       	breq	.+10     	; 0x229e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(GPIOD, BIT2);
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <gpioPinRead>
    229c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			break;

	}
	return current_status;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <sevenSegInit>:
#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <sevenSegInit+0x6>
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	89 83       	std	Y+1, r24	; 0x01
	switch (a_segment_id)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3b 83       	std	Y+3, r19	; 0x03
    22c4:	2a 83       	std	Y+2, r18	; 0x02
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	31 f0       	breq	.+12     	; 0x22da <sevenSegInit+0x2c>
    22ce:	2a 81       	ldd	r18, Y+2	; 0x02
    22d0:	3b 81       	ldd	r19, Y+3	; 0x03
    22d2:	21 30       	cpi	r18, 0x01	; 1
    22d4:	31 05       	cpc	r19, r1
    22d6:	b1 f0       	breq	.+44     	; 0x2304 <sevenSegInit+0x56>
    22d8:	29 c0       	rjmp	.+82     	; 0x232c <sevenSegInit+0x7e>
	{
	case SEG_0:
		gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	6f e0       	ldi	r22, 0x0F	; 15
    22de:	4f ef       	ldi	r20, 0xFF	; 255
    22e0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	6f e0       	ldi	r22, 0x0F	; 15
    22e8:	4f e0       	ldi	r20, 0x0F	; 15
    22ea:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT,OUTPUT);
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	64 e0       	ldi	r22, 0x04	; 4
    22f2:	4f ef       	ldi	r20, 0xFF	; 255
    22f4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	64 e0       	ldi	r22, 0x04	; 4
    22fc:	44 e0       	ldi	r20, 0x04	; 4
    22fe:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <sevenSegInit+0x7e>
		break;
	case SEG_1:
		gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS,OUTPUT);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	6f e0       	ldi	r22, 0x0F	; 15
    2308:	4f ef       	ldi	r20, 0xFF	; 255
    230a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	6f e0       	ldi	r22, 0x0F	; 15
    2312:	4f e0       	ldi	r20, 0x0F	; 15
    2314:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT,OUTPUT);
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	68 e0       	ldi	r22, 0x08	; 8
    231c:	4f ef       	ldi	r20, 0xFF	; 255
    231e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <gpioPinDirection>
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	68 e0       	ldi	r22, 0x08	; 8
    2326:	48 e0       	ldi	r20, 0x08	; 8
    2328:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;
	}
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <sevenSegEnable>:


void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <sevenSegEnable+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3b 83       	std	Y+3, r19	; 0x03
    234e:	2a 83       	std	Y+2, r18	; 0x02
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	31 f0       	breq	.+12     	; 0x2364 <sevenSegEnable+0x2c>
    2358:	2a 81       	ldd	r18, Y+2	; 0x02
    235a:	3b 81       	ldd	r19, Y+3	; 0x03
    235c:	21 30       	cpi	r18, 0x01	; 1
    235e:	31 05       	cpc	r19, r1
    2360:	39 f0       	breq	.+14     	; 0x2370 <sevenSegEnable+0x38>
    2362:	0b c0       	rjmp	.+22     	; 0x237a <sevenSegEnable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    2364:	83 e0       	ldi	r24, 0x03	; 3
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	44 e0       	ldi	r20, 0x04	; 4
    236a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    236e:	05 c0       	rjmp	.+10     	; 0x237a <sevenSegEnable+0x42>
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	68 e0       	ldi	r22, 0x08	; 8
    2374:	48 e0       	ldi	r20, 0x08	; 8
    2376:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <sevenSegDisable+0x6>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3b 83       	std	Y+3, r19	; 0x03
    239c:	2a 83       	std	Y+2, r18	; 0x02
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	9b 81       	ldd	r25, Y+3	; 0x03
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	31 f0       	breq	.+12     	; 0x23b2 <sevenSegDisable+0x2c>
    23a6:	2a 81       	ldd	r18, Y+2	; 0x02
    23a8:	3b 81       	ldd	r19, Y+3	; 0x03
    23aa:	21 30       	cpi	r18, 0x01	; 1
    23ac:	31 05       	cpc	r19, r1
    23ae:	39 f0       	breq	.+14     	; 0x23be <sevenSegDisable+0x38>
    23b0:	0b c0       	rjmp	.+22     	; 0x23c8 <sevenSegDisable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, LOW);
    23b2:	83 e0       	ldi	r24, 0x03	; 3
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    23bc:	05 c0       	rjmp	.+10     	; 0x23c8 <sevenSegDisable+0x42>
		/*here I send LOW as a value because it will be ORed by the way
		 * with the port value in "gpioPinWrite" function
		 */
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, LOW);
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	68 e0       	ldi	r22, 0x08	; 8
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;
	}
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <sevenSegWrite+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <sevenSegWrite+0x8>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	6a 83       	std	Y+2, r22	; 0x02
	switch (en_segment_id)
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	3c 83       	std	Y+4, r19	; 0x04
    23ec:	2b 83       	std	Y+3, r18	; 0x03
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	31 f0       	breq	.+12     	; 0x2402 <sevenSegWrite+0x2e>
    23f6:	2b 81       	ldd	r18, Y+3	; 0x03
    23f8:	3c 81       	ldd	r19, Y+4	; 0x04
    23fa:	21 30       	cpi	r18, 0x01	; 1
    23fc:	31 05       	cpc	r19, r1
    23fe:	61 f0       	breq	.+24     	; 0x2418 <sevenSegWrite+0x44>
    2400:	15 c0       	rjmp	.+42     	; 0x242c <sevenSegWrite+0x58>
	{
	case SEG_0:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	6f e0       	ldi	r22, 0x0F	; 15
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	6f e0       	ldi	r22, 0x0F	; 15
    2410:	4a 81       	ldd	r20, Y+2	; 0x02
    2412:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
    2416:	0a c0       	rjmp	.+20     	; 0x242c <sevenSegWrite+0x58>
		break;
	case SEG_1:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	6f e0       	ldi	r22, 0x0F	; 15
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	6f e0       	ldi	r22, 0x0F	; 15
    2426:	4a 81       	ldd	r20, Y+2	; 0x02
    2428:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <gpioPinWrite>
		break;
	}
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <softwareDelayMs>:
#include "softwareDelay.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	2c 97       	sbiw	r28, 0x0c	; 12
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	69 87       	std	Y+9, r22	; 0x09
    2450:	7a 87       	std	Y+10, r23	; 0x0a
    2452:	8b 87       	std	Y+11, r24	; 0x0b
    2454:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    2456:	1d 82       	std	Y+5, r1	; 0x05
    2458:	1e 82       	std	Y+6, r1	; 0x06
    245a:	1f 82       	std	Y+7, r1	; 0x07
    245c:	18 86       	std	Y+8, r1	; 0x08
    245e:	27 c0       	rjmp	.+78     	; 0x24ae <softwareDelayMs+0x74>
    {
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    2460:	19 82       	std	Y+1, r1	; 0x01
    2462:	1a 82       	std	Y+2, r1	; 0x02
    2464:	1b 82       	std	Y+3, r1	; 0x03
    2466:	1c 82       	std	Y+4, r1	; 0x04
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <softwareDelayMs+0x46>
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	ab 81       	ldd	r26, Y+3	; 0x03
    2470:	bc 81       	ldd	r27, Y+4	; 0x04
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	a1 1d       	adc	r26, r1
    2476:	b1 1d       	adc	r27, r1
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	ab 83       	std	Y+3, r26	; 0x03
    247e:	bc 83       	std	Y+4, r27	; 0x04
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	ab 81       	ldd	r26, Y+3	; 0x03
    2486:	bc 81       	ldd	r27, Y+4	; 0x04
    2488:	81 3b       	cpi	r24, 0xB1	; 177
    248a:	21 e0       	ldi	r18, 0x01	; 1
    248c:	92 07       	cpc	r25, r18
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	a2 07       	cpc	r26, r18
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	b2 07       	cpc	r27, r18
    2496:	48 f3       	brcs	.-46     	; 0x246a <softwareDelayMs+0x30>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	af 81       	ldd	r26, Y+7	; 0x07
    249e:	b8 85       	ldd	r27, Y+8	; 0x08
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	a1 1d       	adc	r26, r1
    24a4:	b1 1d       	adc	r27, r1
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	af 83       	std	Y+7, r26	; 0x07
    24ac:	b8 87       	std	Y+8, r27	; 0x08
    24ae:	2d 81       	ldd	r18, Y+5	; 0x05
    24b0:	3e 81       	ldd	r19, Y+6	; 0x06
    24b2:	4f 81       	ldd	r20, Y+7	; 0x07
    24b4:	58 85       	ldd	r21, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    24bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	4a 07       	cpc	r20, r26
    24c4:	5b 07       	cpc	r21, r27
    24c6:	60 f2       	brcs	.-104    	; 0x2460 <softwareDelayMs+0x26>
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    	{

    	}
    }
}
    24c8:	2c 96       	adiw	r28, 0x0c	; 12
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <timer0Init>:
* Description:
* ***********************************************************************/
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,
		En_timer0perscaler_t en_prescal, uint8_t u8_initialValue,
		uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    24da:	ef 92       	push	r14
    24dc:	0f 93       	push	r16
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	28 97       	sbiw	r28, 0x08	; 8
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	6a 83       	std	Y+2, r22	; 0x02
    24f6:	4b 83       	std	Y+3, r20	; 0x03
    24f8:	2c 83       	std	Y+4, r18	; 0x04
    24fa:	0d 83       	std	Y+5, r16	; 0x05
    24fc:	ee 82       	std	Y+6, r14	; 0x06

	switch (en_mode)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	38 87       	std	Y+8, r19	; 0x08
    2506:	2f 83       	std	Y+7, r18	; 0x07
    2508:	8f 81       	ldd	r24, Y+7	; 0x07
    250a:	98 85       	ldd	r25, Y+8	; 0x08
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	31 f0       	breq	.+12     	; 0x251c <timer0Init+0x42>
    2510:	2f 81       	ldd	r18, Y+7	; 0x07
    2512:	38 85       	ldd	r19, Y+8	; 0x08
    2514:	28 30       	cpi	r18, 0x08	; 8
    2516:	31 05       	cpc	r19, r1
    2518:	a9 f0       	breq	.+42     	; 0x2544 <timer0Init+0x6a>
    251a:	27 c0       	rjmp	.+78     	; 0x256a <timer0Init+0x90>
	{
	case T0_NORMAL_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    251c:	e2 e5       	ldi	r30, 0x52	; 82
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2524:	e9 e5       	ldi	r30, 0x59	; 89
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	8e 81       	ldd	r24, Y+6	; 0x06
    252a:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare;
    252c:	ec e5       	ldi	r30, 0x5C	; 92
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0 = en_prescal | en_OC0 | (1<<FOC0);   /*I made switch case because of FOC0 will be disabled to zero in the PWM mode*/
    2534:	e3 e5       	ldi	r30, 0x53	; 83
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	89 2b       	or	r24, r25
    253e:	80 68       	ori	r24, 0x80	; 128
    2540:	80 83       	st	Z, r24
    2542:	13 c0       	rjmp	.+38     	; 0x256a <timer0Init+0x90>
		break;

	case T0_COMP_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    2544:	e2 e5       	ldi	r30, 0x52	; 82
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	8c 81       	ldd	r24, Y+4	; 0x04
    254a:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare; /*set the compare value*/
    254c:	ec e5       	ldi	r30, 0x5C	; 92
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2554:	e9 e5       	ldi	r30, 0x59	; 89
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	8e 81       	ldd	r24, Y+6	; 0x06
    255a:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0= en_prescal | en_OC0 | (1<<FOC0);
    255c:	e3 e5       	ldi	r30, 0x53	; 83
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	89 2b       	or	r24, r25
    2566:	80 68       	ori	r24, 0x80	; 128
    2568:	80 83       	st	Z, r24
		break;
	}
}
    256a:	28 96       	adiw	r28, 0x08	; 8
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	0f 91       	pop	r16
    257c:	ef 90       	pop	r14
    257e:	08 95       	ret

00002580 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8_value;
    258c:	e2 e5       	ldi	r30, 0x52	; 82
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	80 83       	st	Z, r24
}
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <timer0Read>:

uint8_t timer0Read(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t TCNT0_value=TCNT0;
    25a6:	e2 e5       	ldi	r30, 0x52	; 82
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	89 83       	std	Y+1, r24	; 0x01
	return TCNT0_value;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <timer0Start>:

void timer0Start(void)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_PRESCALER_NO;
    25c0:	e3 e5       	ldi	r30, 0x53	; 83
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	80 83       	st	Z, r24
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <timer0Stop>:

void timer0Stop(void)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_NO_CLOCK;
    25d6:	e3 e5       	ldi	r30, 0x53	; 83
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	10 82       	st	Z, r1
}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    25e2:	ef 92       	push	r14
    25e4:	0f 93       	push	r16
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <timer0DelayMs+0xa>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
    25f4:	88 e0       	ldi	r24, 0x08	; 8
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	43 e0       	ldi	r20, 0x03	; 3
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	0a ef       	ldi	r16, 0xFA	; 250
    25fe:	ee 24       	eor	r14, r14
    2600:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
    2604:	18 c0       	rjmp	.+48     	; 0x2636 <timer0DelayMs+0x54>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
    2606:	e8 e5       	ldi	r30, 0x58	; 88
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	82 70       	andi	r24, 0x02	; 2
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	b9 f3       	breq	.-18     	; 0x2606 <timer0DelayMs+0x24>
		SET_BIT(TIFR,OCF0);
    2618:	a8 e5       	ldi	r26, 0x58	; 88
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e8 e5       	ldi	r30, 0x58	; 88
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	82 60       	ori	r24, 0x02	; 2
    2624:	8c 93       	st	X, r24
		TCNT0=0;
    2626:	e2 e5       	ldi	r30, 0x52	; 82
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
	while(u16_delay_in_ms)
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	21 f7       	brne	.-56     	; 0x2606 <timer0DelayMs+0x24>
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u16_delay_in_ms--;
	}
	timer0Stop();
    263e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	0f 91       	pop	r16
    264c:	ef 90       	pop	r14
    264e:	08 95       	ret

00002650 <timer0DelayMs_with_interrupt>:

void timer0DelayMs_with_interrupt(uint16_t u16_delay_in_ms)
{
    2650:	ef 92       	push	r14
    2652:	0f 93       	push	r16
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <timer0DelayMs_with_interrupt+0xa>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    2662:	88 e0       	ldi	r24, 0x08	; 8
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	43 e0       	ldi	r20, 0x03	; 3
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	0a ef       	ldi	r16, 0xFA	; 250
    266c:	ee 24       	eor	r14, r14
    266e:	68 94       	set
    2670:	e1 f8       	bld	r14, 1
    2672:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	0f 91       	pop	r16
    2680:	ef 90       	pop	r14
    2682:	08 95       	ret

00002684 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    2684:	ef 92       	push	r14
    2686:	0f 93       	push	r16
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <timer0DelayUs+0xa>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <timer0DelayUs+0xc>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	69 83       	std	Y+1, r22	; 0x01
    2696:	7a 83       	std	Y+2, r23	; 0x02
    2698:	8b 83       	std	Y+3, r24	; 0x03
    269a:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
    269c:	88 e0       	ldi	r24, 0x08	; 8
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	00 e1       	ldi	r16, 0x10	; 16
    26a6:	ee 24       	eor	r14, r14
    26a8:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
    26ac:	1d c0       	rjmp	.+58     	; 0x26e8 <timer0DelayUs+0x64>
	while(u32_delay_in_us)
	{
		while(TCNT0<OCR0);    /*another way to check*/
    26ae:	e2 e5       	ldi	r30, 0x52	; 82
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	90 81       	ld	r25, Z
    26b4:	ec e5       	ldi	r30, 0x5C	; 92
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	98 17       	cp	r25, r24
    26bc:	c0 f3       	brcs	.-16     	; 0x26ae <timer0DelayUs+0x2a>
		SET_BIT(TIFR,OCF0);
    26be:	a8 e5       	ldi	r26, 0x58	; 88
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e8 e5       	ldi	r30, 0x58	; 88
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	82 60       	ori	r24, 0x02	; 2
    26ca:	8c 93       	st	X, r24
		TCNT0=0;
    26cc:	e2 e5       	ldi	r30, 0x52	; 82
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	10 82       	st	Z, r1
		u32_delay_in_us--;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	ab 81       	ldd	r26, Y+3	; 0x03
    26d8:	bc 81       	ldd	r27, Y+4	; 0x04
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	a1 09       	sbc	r26, r1
    26de:	b1 09       	sbc	r27, r1
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	ab 83       	std	Y+3, r26	; 0x03
    26e6:	bc 83       	std	Y+4, r27	; 0x04

void timer0DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
	while(u32_delay_in_us)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	ab 81       	ldd	r26, Y+3	; 0x03
    26ee:	bc 81       	ldd	r27, Y+4	; 0x04
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	a1 05       	cpc	r26, r1
    26f4:	b1 05       	cpc	r27, r1
    26f6:	d9 f6       	brne	.-74     	; 0x26ae <timer0DelayUs+0x2a>
		while(TCNT0<OCR0);    /*another way to check*/
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer0Stop();
    26f8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <timer0Stop>
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	0f 91       	pop	r16
    270a:	ef 90       	pop	r14
    270c:	08 95       	ret

0000270e <timer0HwPWM>:
 * in this function the PWM generated using the fast PWM mode
 * the user has to choose one of the defined frequencies
 */
/******************************fast correct******************************/
void timer0HwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <timer0HwPWM+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <timer0HwPWM+0x8>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = 0; /*timer initial value*/
    271e:	e2 e5       	ldi	r30, 0x52	; 82
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    2724:	e9 e5       	ldi	r30, 0x59	; 89
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	10 82       	st	Z, r1
	OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; /*output compare value*/
    272a:	ec e5       	ldi	r30, 0x5C	; 92
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	98 2f       	mov	r25, r24
    2736:	88 27       	eor	r24, r24
    2738:	24 e6       	ldi	r18, 0x64	; 100
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divmodhi4>
    2742:	cb 01       	movw	r24, r22
    2744:	80 83       	st	Z, r24

	switch(u8_frequency)
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	3c 83       	std	Y+4, r19	; 0x04
    274e:	2b 83       	std	Y+3, r18	; 0x03
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	83 30       	cpi	r24, 0x03	; 3
    2756:	91 05       	cpc	r25, r1
    2758:	29 f1       	breq	.+74     	; 0x27a4 <timer0HwPWM+0x96>
    275a:	2b 81       	ldd	r18, Y+3	; 0x03
    275c:	3c 81       	ldd	r19, Y+4	; 0x04
    275e:	24 30       	cpi	r18, 0x04	; 4
    2760:	31 05       	cpc	r19, r1
    2762:	5c f4       	brge	.+22     	; 0x277a <timer0HwPWM+0x6c>
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	9c 81       	ldd	r25, Y+4	; 0x04
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	91 05       	cpc	r25, r1
    276c:	89 f0       	breq	.+34     	; 0x2790 <timer0HwPWM+0x82>
    276e:	2b 81       	ldd	r18, Y+3	; 0x03
    2770:	3c 81       	ldd	r19, Y+4	; 0x04
    2772:	22 30       	cpi	r18, 0x02	; 2
    2774:	31 05       	cpc	r19, r1
    2776:	89 f0       	breq	.+34     	; 0x279a <timer0HwPWM+0x8c>
    2778:	23 c0       	rjmp	.+70     	; 0x27c0 <timer0HwPWM+0xb2>
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	84 30       	cpi	r24, 0x04	; 4
    2780:	91 05       	cpc	r25, r1
    2782:	a9 f0       	breq	.+42     	; 0x27ae <timer0HwPWM+0xa0>
    2784:	2b 81       	ldd	r18, Y+3	; 0x03
    2786:	3c 81       	ldd	r19, Y+4	; 0x04
    2788:	25 30       	cpi	r18, 0x05	; 5
    278a:	31 05       	cpc	r19, r1
    278c:	a9 f0       	breq	.+42     	; 0x27b8 <timer0HwPWM+0xaa>
    278e:	18 c0       	rjmp	.+48     	; 0x27c0 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_NO | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2790:	e3 e5       	ldi	r30, 0x53	; 83
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	89 e6       	ldi	r24, 0x69	; 105
    2796:	80 83       	st	Z, r24
    2798:	13 c0       	rjmp	.+38     	; 0x27c0 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_8 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    279a:	e3 e5       	ldi	r30, 0x53	; 83
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	8a e6       	ldi	r24, 0x6A	; 106
    27a0:	80 83       	st	Z, r24
    27a2:	0e c0       	rjmp	.+28     	; 0x27c0 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
			 */
			TCCR0 =T0_PRESCALER_64 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    27a4:	e3 e5       	ldi	r30, 0x53	; 83
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	8b e6       	ldi	r24, 0x6B	; 107
    27aa:	80 83       	st	Z, r24
    27ac:	09 c0       	rjmp	.+18     	; 0x27c0 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_256 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    27ae:	e3 e5       	ldi	r30, 0x53	; 83
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	8c e6       	ldi	r24, 0x6C	; 108
    27b4:	80 83       	st	Z, r24
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_1024 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    27b8:	e3 e5       	ldi	r30, 0x53	; 83
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	8d e6       	ldi	r24, 0x6D	; 109
    27be:	80 83       	st	Z, r24
			break;
	}
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <timer0HwPWM_PhaseCorrect>:

/******************************fast correct******************************/
void timer0HwPWM_PhaseCorrect(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <timer0HwPWM_PhaseCorrect+0x6>
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <timer0HwPWM_PhaseCorrect+0x8>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = 0; /*timer initial value*/
    27de:	e2 e5       	ldi	r30, 0x52	; 82
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    27e4:	e9 e5       	ldi	r30, 0x59	; 89
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	10 82       	st	Z, r1
	OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; /*output compare value*/
    27ea:	ec e5       	ldi	r30, 0x5C	; 92
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	98 2f       	mov	r25, r24
    27f6:	88 27       	eor	r24, r24
    27f8:	24 e6       	ldi	r18, 0x64	; 100
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	b9 01       	movw	r22, r18
    27fe:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divmodhi4>
    2802:	cb 01       	movw	r24, r22
    2804:	80 83       	st	Z, r24

	switch(u8_frequency)
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	3c 83       	std	Y+4, r19	; 0x04
    280e:	2b 83       	std	Y+3, r18	; 0x03
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	83 30       	cpi	r24, 0x03	; 3
    2816:	91 05       	cpc	r25, r1
    2818:	29 f1       	breq	.+74     	; 0x2864 <timer0HwPWM_PhaseCorrect+0x96>
    281a:	2b 81       	ldd	r18, Y+3	; 0x03
    281c:	3c 81       	ldd	r19, Y+4	; 0x04
    281e:	24 30       	cpi	r18, 0x04	; 4
    2820:	31 05       	cpc	r19, r1
    2822:	5c f4       	brge	.+22     	; 0x283a <timer0HwPWM_PhaseCorrect+0x6c>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	91 05       	cpc	r25, r1
    282c:	89 f0       	breq	.+34     	; 0x2850 <timer0HwPWM_PhaseCorrect+0x82>
    282e:	2b 81       	ldd	r18, Y+3	; 0x03
    2830:	3c 81       	ldd	r19, Y+4	; 0x04
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	89 f0       	breq	.+34     	; 0x285a <timer0HwPWM_PhaseCorrect+0x8c>
    2838:	23 c0       	rjmp	.+70     	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	84 30       	cpi	r24, 0x04	; 4
    2840:	91 05       	cpc	r25, r1
    2842:	a9 f0       	breq	.+42     	; 0x286e <timer0HwPWM_PhaseCorrect+0xa0>
    2844:	2b 81       	ldd	r18, Y+3	; 0x03
    2846:	3c 81       	ldd	r19, Y+4	; 0x04
    2848:	25 30       	cpi	r18, 0x05	; 5
    284a:	31 05       	cpc	r19, r1
    284c:	a9 f0       	breq	.+42     	; 0x2878 <timer0HwPWM_PhaseCorrect+0xaa>
    284e:	18 c0       	rjmp	.+48     	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_NO | (1<<COM01)| (1<<WGM00);
    2850:	e3 e5       	ldi	r30, 0x53	; 83
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	81 e6       	ldi	r24, 0x61	; 97
    2856:	80 83       	st	Z, r24
    2858:	13 c0       	rjmp	.+38     	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_8 | (1<<COM01)| (1<<WGM00);
    285a:	e3 e5       	ldi	r30, 0x53	; 83
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	82 e6       	ldi	r24, 0x62	; 98
    2860:	80 83       	st	Z, r24
    2862:	0e c0       	rjmp	.+28     	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
			 */
			TCCR0 =T0_PRESCALER_64 | (1<<COM01)| (1<<WGM00);
    2864:	e3 e5       	ldi	r30, 0x53	; 83
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	83 e6       	ldi	r24, 0x63	; 99
    286a:	80 83       	st	Z, r24
    286c:	09 c0       	rjmp	.+18     	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_256 | (1<<COM01)| (1<<WGM00);
    286e:	e3 e5       	ldi	r30, 0x53	; 83
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	84 e6       	ldi	r24, 0x64	; 100
    2874:	80 83       	st	Z, r24
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_1024 | (1<<COM01)| (1<<WGM00);
    2878:	e3 e5       	ldi	r30, 0x53	; 83
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	85 e6       	ldi	r24, 0x65	; 101
    287e:	80 83       	st	Z, r24
			break;
	}
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    288e:	ef 92       	push	r14
    2890:	0f 93       	push	r16
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <timer0SwPWM+0xa>
    2898:	00 d0       	rcall	.+0      	; 0x289a <timer0SwPWM+0xc>
    289a:	00 d0       	rcall	.+0      	; 0x289c <timer0SwPWM+0xe>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	8b 83       	std	Y+3, r24	; 0x03
    28a2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t TCNT0_TEMP;
	uint8_t OCR0_TEMP;
	if(u8_dutyCycle==100)  /*this if statement because at 100% duty cycle the */
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	84 36       	cpi	r24, 0x64	; 100
    28a8:	11 f4       	brne	.+4      	; 0x28ae <timer0SwPWM+0x20>
	{                      /*TCNT0 will equal OCR0 and the OVF interrupt will be*/
		u8_dutyCycle=99;   /*executed first then the COMP ISR, so this will generate*/
    28aa:	83 e6       	ldi	r24, 0x63	; 99
    28ac:	8b 83       	std	Y+3, r24	; 0x03
	}                      /*a 0% duty cycle instead of 100%*/
	switch(u8_frequency)
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	3e 83       	std	Y+6, r19	; 0x06
    28b6:	2d 83       	std	Y+5, r18	; 0x05
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	83 30       	cpi	r24, 0x03	; 3
    28be:	91 05       	cpc	r25, r1
    28c0:	31 f0       	breq	.+12     	; 0x28ce <timer0SwPWM+0x40>
    28c2:	2d 81       	ldd	r18, Y+5	; 0x05
    28c4:	3e 81       	ldd	r19, Y+6	; 0x06
    28c6:	25 30       	cpi	r18, 0x05	; 5
    28c8:	31 05       	cpc	r19, r1
    28ca:	b9 f1       	breq	.+110    	; 0x293a <timer0SwPWM+0xac>
    28cc:	60 c0       	rjmp	.+192    	; 0x298e <timer0SwPWM+0x100>
	{
	case T0_FREQUENCY_1KHZ:
			TCNT0_TEMP=6;
    28ce:	86 e0       	ldi	r24, 0x06	; 6
    28d0:	8a 83       	std	Y+2, r24	; 0x02
			OCR0_TEMP=(u8_dutyCycle)*(250/100.0)+6;
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	aa 27       	eor	r26, r26
    28da:	97 fd       	sbrc	r25, 7
    28dc:	a0 95       	com	r26
    28de:	ba 2f       	mov	r27, r26
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	50 e4       	ldi	r21, 0x40	; 64
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 ec       	ldi	r20, 0xC0	; 192
    290a:	50 e4       	ldi	r21, 0x40	; 64
    290c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	89 83       	std	Y+1, r24	; 0x01
			timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,TCNT0_TEMP,OCR0_TEMP,T0_INTERRUPT_NORMAL|T0_INTERRUPT_CMP);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	43 e0       	ldi	r20, 0x03	; 3
    2928:	2a 81       	ldd	r18, Y+2	; 0x02
    292a:	09 81       	ldd	r16, Y+1	; 0x01
    292c:	0f 2e       	mov	r0, r31
    292e:	f3 e0       	ldi	r31, 0x03	; 3
    2930:	ef 2e       	mov	r14, r31
    2932:	f0 2d       	mov	r31, r0
    2934:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
    2938:	2a c0       	rjmp	.+84     	; 0x298e <timer0SwPWM+0x100>
			break;

	case T0_FREQUENCY_61HZ:
			TCNT0_TEMP=0;
    293a:	1a 82       	std	Y+2, r1	; 0x02
			OCR0_TEMP=(u8_dutyCycle)*(256/100.0);
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	aa 27       	eor	r26, r26
    2944:	97 fd       	sbrc	r25, 7
    2946:	a0 95       	com	r26
    2948:	ba 2f       	mov	r27, r26
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	2a e0       	ldi	r18, 0x0A	; 10
    295c:	37 ed       	ldi	r19, 0xD7	; 215
    295e:	43 e2       	ldi	r20, 0x23	; 35
    2960:	50 e4       	ldi	r21, 0x40	; 64
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	89 83       	std	Y+1, r24	; 0x01
			timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,TCNT0_TEMP,OCR0_TEMP,T0_INTERRUPT_NORMAL|T0_INTERRUPT_CMP);
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	45 e0       	ldi	r20, 0x05	; 5
    297e:	2a 81       	ldd	r18, Y+2	; 0x02
    2980:	09 81       	ldd	r16, Y+1	; 0x01
    2982:	0f 2e       	mov	r0, r31
    2984:	f3 e0       	ldi	r31, 0x03	; 3
    2986:	ef 2e       	mov	r14, r31
    2988:	f0 2d       	mov	r31, r0
    298a:	0e 94 6d 12 	call	0x24da	; 0x24da <timer0Init>
			break;
	}
	g8_TCNT0_value_Swpwm_ISR=TCNT0_TEMP;
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	80 93 6d 01 	sts	0x016D, r24
}
    2994:	26 96       	adiw	r28, 0x06	; 6
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	0f 91       	pop	r16
    29a6:	ef 90       	pop	r14
    29a8:	08 95       	ret

000029aa <timer1Init>:

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
		En_timer1perscaler_t en_prescal, uint16_t u16_initialValue,
		uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,
		uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    29aa:	af 92       	push	r10
    29ac:	cf 92       	push	r12
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	2f 97       	sbiw	r28, 0x0f	; 15
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	7b 83       	std	Y+3, r23	; 0x03
    29d0:	6a 83       	std	Y+2, r22	; 0x02
    29d2:	4c 83       	std	Y+4, r20	; 0x04
    29d4:	3e 83       	std	Y+6, r19	; 0x06
    29d6:	2d 83       	std	Y+5, r18	; 0x05
    29d8:	18 87       	std	Y+8, r17	; 0x08
    29da:	0f 83       	std	Y+7, r16	; 0x07
    29dc:	fa 86       	std	Y+10, r15	; 0x0a
    29de:	e9 86       	std	Y+9, r14	; 0x09
    29e0:	dc 86       	std	Y+12, r13	; 0x0c
    29e2:	cb 86       	std	Y+11, r12	; 0x0b
    29e4:	ad 86       	std	Y+13, r10	; 0x0d

	switch (en_mode)
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	3f 87       	std	Y+15, r19	; 0x0f
    29ee:	2e 87       	std	Y+14, r18	; 0x0e
    29f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    29f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    29f4:	88 30       	cpi	r24, 0x08	; 8
    29f6:	91 05       	cpc	r25, r1
    29f8:	21 f1       	breq	.+72     	; 0x2a42 <timer1Init+0x98>
    29fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    29fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    29fe:	28 31       	cpi	r18, 0x18	; 24
    2a00:	31 05       	cpc	r19, r1
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <timer1Init+0x5c>
    2a04:	43 c0       	rjmp	.+134    	; 0x2a8c <timer1Init+0xe2>
    2a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <timer1Init+0x66>
    2a0e:	62 c0       	rjmp	.+196    	; 0x2ad4 <timer1Init+0x12a>
	{
	case T1_NORMAL_MODE:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2a10:	ed e4       	ldi	r30, 0x4D	; 77
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	89 2f       	mov	r24, r25
    2a1a:	99 27       	eor	r25, r25
    2a1c:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2a1e:	ec e4       	ldi	r30, 0x4C	; 76
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2a26:	e9 e5       	ldi	r30, 0x59	; 89
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2c:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 0 (normal mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2a2e:	ef e4       	ldi	r30, 0x4F	; 79
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	83 60       	ori	r24, 0x03	; 3
    2a36:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. choose the Prescaler using (CS12 CS11 CS10)
		 * 2. mode number 0 (normal mode)   WGM13=0  WGM12=0
	     */
		TCCR1B = en_prescal;
    2a38:	ee e4       	ldi	r30, 0x4E	; 78
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	80 83       	st	Z, r24
    2a40:	49 c0       	rjmp	.+146    	; 0x2ad4 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_OCR1A_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2a42:	ed e4       	ldi	r30, 0x4D	; 77
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	89 2f       	mov	r24, r25
    2a4c:	99 27       	eor	r25, r25
    2a4e:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2a50:	ec e4       	ldi	r30, 0x4C	; 76
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2a58:	e9 e5       	ldi	r30, 0x59	; 89
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	80 83       	st	Z, r24
		OCR1AH = ((u16_outputCompareA & 0xFF00)>>8); /*set the compare value*/
    2a60:	eb e4       	ldi	r30, 0x4B	; 75
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	98 85       	ldd	r25, Y+8	; 0x08
    2a68:	89 2f       	mov	r24, r25
    2a6a:	99 27       	eor	r25, r25
    2a6c:	80 83       	st	Z, r24
		OCR1AL = (u16_outputCompareA & 0x00FF);
    2a6e:	ea e4       	ldi	r30, 0x4A	; 74
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	8f 81       	ldd	r24, Y+7	; 0x07
    2a74:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2a76:	ef e4       	ldi	r30, 0x4F	; 79
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	83 60       	ori	r24, 0x03	; 3
    2a7e:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 4 (CTC mode_OCR1A)   WGM13=0  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12);
    2a80:	ee e4       	ldi	r30, 0x4E	; 78
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	8c 81       	ldd	r24, Y+4	; 0x04
    2a86:	88 60       	ori	r24, 0x08	; 8
    2a88:	80 83       	st	Z, r24
    2a8a:	24 c0       	rjmp	.+72     	; 0x2ad4 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_ICR1_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2a8c:	ed e4       	ldi	r30, 0x4D	; 77
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	89 2f       	mov	r24, r25
    2a96:	99 27       	eor	r25, r25
    2a98:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2a9a:	ec e4       	ldi	r30, 0x4C	; 76
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2aa2:	e9 e5       	ldi	r30, 0x59	; 89
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	80 83       	st	Z, r24
		ICR1H = ((u16_inputCapture & 0xFF00)>>8); /*set the input capture value*/
    2aaa:	e7 e4       	ldi	r30, 0x47	; 71
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ab0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab2:	89 2f       	mov	r24, r25
    2ab4:	99 27       	eor	r25, r25
    2ab6:	80 83       	st	Z, r24
		ICR1L = (u16_inputCapture & 0x00FF);
    2ab8:	e6 e4       	ldi	r30, 0x46	; 70
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2abe:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2ac0:	ef e4       	ldi	r30, 0x4F	; 79
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	83 60       	ori	r24, 0x03	; 3
    2ac8:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 12 (CTC mode _ICR1)   WGM13=1  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12) | (1<<WGM13);
    2aca:	ee e4       	ldi	r30, 0x4E	; 78
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	88 61       	ori	r24, 0x18	; 24
    2ad2:	80 83       	st	Z, r24
		break;
	}
}
    2ad4:	2f 96       	adiw	r28, 0x0f	; 15
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	af 90       	pop	r10
    2af2:	08 95       	ret

00002af4 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <timer1Set+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H = ((u16_value & 0xFF00)>>8); /*timer initial value*/
    2b02:	ed e4       	ldi	r30, 0x4D	; 77
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	89 2f       	mov	r24, r25
    2b0c:	99 27       	eor	r25, r25
    2b0e:	80 83       	st	Z, r24
	TCNT1L = (u16_value & 0x00FF);
    2b10:	ec e4       	ldi	r30, 0x4C	; 76
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	80 83       	st	Z, r24
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <timer1Read>:

uint16_t timer1Read(void)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	0f 92       	push	r0
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t TCNT1_value=TCNT1;
    2b2c:	ec e4       	ldi	r30, 0x4C	; 76
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	89 83       	std	Y+1, r24	; 0x01
	return TCNT1_value;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
}
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <timer1Start>:

void timer1Start(void)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_PRESCALER_NO;
    2b4c:	ee e4       	ldi	r30, 0x4E	; 78
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	80 83       	st	Z, r24
}
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <timer1Stop>:

void timer1Stop(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_NO_CLOCK;
    2b62:	ee e4       	ldi	r30, 0x4E	; 78
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	10 82       	st	Z, r1
}
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    2b6e:	af 92       	push	r10
    2b70:	cf 92       	push	r12
    2b72:	df 92       	push	r13
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <timer1DelayMs+0x14>
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
    2b8a:	88 e0       	ldi	r24, 0x08	; 8
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	43 e0       	ldi	r20, 0x03	; 3
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	0a ef       	ldi	r16, 0xFA	; 250
    2b98:	10 e0       	ldi	r17, 0x00	; 0
    2b9a:	ee 24       	eor	r14, r14
    2b9c:	ff 24       	eor	r15, r15
    2b9e:	cc 24       	eor	r12, r12
    2ba0:	dd 24       	eor	r13, r13
    2ba2:	aa 24       	eor	r10, r10
    2ba4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <timer1Init>
    2ba8:	19 c0       	rjmp	.+50     	; 0x2bdc <timer1DelayMs+0x6e>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
    2baa:	e8 e5       	ldi	r30, 0x58	; 88
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	80 71       	andi	r24, 0x10	; 16
    2bb6:	90 70       	andi	r25, 0x00	; 0
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	b9 f3       	breq	.-18     	; 0x2baa <timer1DelayMs+0x3c>
		SET_BIT(TIFR,OCF1A);
    2bbc:	a8 e5       	ldi	r26, 0x58	; 88
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e8 e5       	ldi	r30, 0x58	; 88
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 61       	ori	r24, 0x10	; 16
    2bc8:	8c 93       	st	X, r24
		TCNT1=0;
    2bca:	ec e4       	ldi	r30, 0x4C	; 76
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	11 82       	std	Z+1, r1	; 0x01
    2bd0:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
	while(u16_delay_in_ms)
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	19 f7       	brne	.-58     	; 0x2baa <timer1DelayMs+0x3c>
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF1A);
		TCNT1=0;
		u16_delay_in_ms--;
	}
	timer1Stop();
    2be4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <timer1Stop>
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ff 90       	pop	r15
    2bf6:	ef 90       	pop	r14
    2bf8:	df 90       	pop	r13
    2bfa:	cf 90       	pop	r12
    2bfc:	af 90       	pop	r10
    2bfe:	08 95       	ret

00002c00 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    2c00:	af 92       	push	r10
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ef 92       	push	r14
    2c08:	ff 92       	push	r15
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <timer1DelayUs+0x14>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <timer1DelayUs+0x16>
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	69 83       	std	Y+1, r22	; 0x01
    2c1c:	7a 83       	std	Y+2, r23	; 0x02
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
    2c20:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
    2c22:	88 e0       	ldi	r24, 0x08	; 8
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	00 e1       	ldi	r16, 0x10	; 16
    2c30:	10 e0       	ldi	r17, 0x00	; 0
    2c32:	ee 24       	eor	r14, r14
    2c34:	ff 24       	eor	r15, r15
    2c36:	cc 24       	eor	r12, r12
    2c38:	dd 24       	eor	r13, r13
    2c3a:	aa 24       	eor	r10, r10
    2c3c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <timer1Init>
    2c40:	1e c0       	rjmp	.+60     	; 0x2c7e <timer1DelayUs+0x7e>
	while(u32_delay_in_us)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
    2c42:	e8 e5       	ldi	r30, 0x58	; 88
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	80 71       	andi	r24, 0x10	; 16
    2c4e:	90 70       	andi	r25, 0x00	; 0
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	b9 f3       	breq	.-18     	; 0x2c42 <timer1DelayUs+0x42>
		SET_BIT(TIFR,OCF0);
    2c54:	a8 e5       	ldi	r26, 0x58	; 88
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e8 e5       	ldi	r30, 0x58	; 88
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	82 60       	ori	r24, 0x02	; 2
    2c60:	8c 93       	st	X, r24
		TCNT0=0;
    2c62:	e2 e5       	ldi	r30, 0x52	; 82
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	10 82       	st	Z, r1
		u32_delay_in_us--;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	a1 09       	sbc	r26, r1
    2c74:	b1 09       	sbc	r27, r1
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	ab 83       	std	Y+3, r26	; 0x03
    2c7c:	bc 83       	std	Y+4, r27	; 0x04

void timer1DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
	while(u32_delay_in_us)
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	ab 81       	ldd	r26, Y+3	; 0x03
    2c84:	bc 81       	ldd	r27, Y+4	; 0x04
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	a1 05       	cpc	r26, r1
    2c8a:	b1 05       	cpc	r27, r1
    2c8c:	d1 f6       	brne	.-76     	; 0x2c42 <timer1DelayUs+0x42>
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer1Stop();
    2c8e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <timer1Stop>
	return;
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	af 90       	pop	r10
    2cac:	08 95       	ret

00002cae <timer1HwPWM>:

/*
 * in this function a PWM signal is generated using mode number 14 (fast PWM ICR1 TOP)
 */
void timer1HwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <timer1HwPWM+0x6>
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <timer1HwPWM+0x8>
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0; /*timer initial value*/
    2cbe:	ec e4       	ldi	r30, 0x4C	; 76
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	11 82       	std	Z+1, r1	; 0x01
    2cc4:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    2cc6:	e9 e5       	ldi	r30, 0x59	; 89
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	10 82       	st	Z, r1
	OCR1A = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    2ccc:	ea e4       	ldi	r30, 0x4A	; 74
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	c9 01       	movw	r24, r18
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	82 0f       	add	r24, r18
    2cde:	93 1f       	adc	r25, r19
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24

	switch(u8_frequency)
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	3c 83       	std	Y+4, r19	; 0x04
    2cf8:	2b 83       	std	Y+3, r18	; 0x03
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	83 30       	cpi	r24, 0x03	; 3
    2d00:	91 05       	cpc	r25, r1
    2d02:	c9 f1       	breq	.+114    	; 0x2d76 <timer1HwPWM+0xc8>
    2d04:	2b 81       	ldd	r18, Y+3	; 0x03
    2d06:	3c 81       	ldd	r19, Y+4	; 0x04
    2d08:	24 30       	cpi	r18, 0x04	; 4
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	5c f4       	brge	.+22     	; 0x2d24 <timer1HwPWM+0x76>
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	91 05       	cpc	r25, r1
    2d16:	89 f0       	breq	.+34     	; 0x2d3a <timer1HwPWM+0x8c>
    2d18:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1c:	22 30       	cpi	r18, 0x02	; 2
    2d1e:	31 05       	cpc	r19, r1
    2d20:	d9 f0       	breq	.+54     	; 0x2d58 <timer1HwPWM+0xaa>
    2d22:	55 c0       	rjmp	.+170    	; 0x2dce <timer1HwPWM+0x120>
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	84 30       	cpi	r24, 0x04	; 4
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	99 f1       	breq	.+102    	; 0x2d94 <timer1HwPWM+0xe6>
    2d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d30:	3c 81       	ldd	r19, Y+4	; 0x04
    2d32:	25 30       	cpi	r18, 0x05	; 5
    2d34:	31 05       	cpc	r19, r1
    2d36:	e9 f1       	breq	.+122    	; 0x2db2 <timer1HwPWM+0x104>
    2d38:	4a c0       	rjmp	.+148    	; 0x2dce <timer1HwPWM+0x120>
	{

	case(T1_FREQUENCY_6KHZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2d3a:	e6 e4       	ldi	r30, 0x46	; 70
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	83 ec       	ldi	r24, 0xC3	; 195
    2d40:	99 e0       	ldi	r25, 0x09	; 9
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2d46:	ef e4       	ldi	r30, 0x4F	; 79
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	82 e8       	ldi	r24, 0x82	; 130
    2d4c:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_NO;
    2d4e:	ee e4       	ldi	r30, 0x4E	; 78
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	89 e1       	ldi	r24, 0x19	; 25
    2d54:	80 83       	st	Z, r24
    2d56:	3b c0       	rjmp	.+118    	; 0x2dce <timer1HwPWM+0x120>
			break;

	case(T1_FREQUENCY_800HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2d58:	e6 e4       	ldi	r30, 0x46	; 70
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	83 ec       	ldi	r24, 0xC3	; 195
    2d5e:	99 e0       	ldi	r25, 0x09	; 9
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2d64:	ef e4       	ldi	r30, 0x4F	; 79
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	82 e8       	ldi	r24, 0x82	; 130
    2d6a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/8
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_8;
    2d6c:	ee e4       	ldi	r30, 0x4E	; 78
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8a e1       	ldi	r24, 0x1A	; 26
    2d72:	80 83       	st	Z, r24
    2d74:	2c c0       	rjmp	.+88     	; 0x2dce <timer1HwPWM+0x120>
			break;

	case(T1_FREQUENCY_100HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2d76:	e6 e4       	ldi	r30, 0x46	; 70
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	83 ec       	ldi	r24, 0xC3	; 195
    2d7c:	99 e0       	ldi	r25, 0x09	; 9
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2d82:	ef e4       	ldi	r30, 0x4F	; 79
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	82 e8       	ldi	r24, 0x82	; 130
    2d88:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/64
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_64;
    2d8a:	ee e4       	ldi	r30, 0x4E	; 78
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	8b e1       	ldi	r24, 0x1B	; 27
    2d90:	80 83       	st	Z, r24
    2d92:	1d c0       	rjmp	.+58     	; 0x2dce <timer1HwPWM+0x120>
			break;

	case(T1_FREQUENCY_25HZ):  //90hz
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2d94:	e6 e4       	ldi	r30, 0x46	; 70
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	83 ec       	ldi	r24, 0xC3	; 195
    2d9a:	99 e0       	ldi	r25, 0x09	; 9
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Disconnect OC1B COM1B0=0 COM1B1=0
		     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2da0:	ef e4       	ldi	r30, 0x4F	; 79
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	82 e8       	ldi	r24, 0x82	; 130
    2da6:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/256
		     */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_256;
    2da8:	ee e4       	ldi	r30, 0x4E	; 78
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	8c e1       	ldi	r24, 0x1C	; 28
    2dae:	80 83       	st	Z, r24
    2db0:	0e c0       	rjmp	.+28     	; 0x2dce <timer1HwPWM+0x120>
			break;

	case(T1_FREQUENCY_6HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2db2:	e6 e4       	ldi	r30, 0x46	; 70
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	83 ec       	ldi	r24, 0xC3	; 195
    2db8:	99 e0       	ldi	r25, 0x09	; 9
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2dbe:	ef e4       	ldi	r30, 0x4F	; 79
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	82 e8       	ldi	r24, 0x82	; 130
    2dc4:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/1024
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_1024;
    2dc6:	ee e4       	ldi	r30, 0x4E	; 78
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	8d e1       	ldi	r24, 0x1D	; 29
    2dcc:	80 83       	st	Z, r24
			break;
	}
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <timer1HwPWM_PhaseCorrect>:

/*
 * in this function a PWM signal is generated using mode number 10 (phase correct PWM ICR1 TOP)
 */
void timer1HwPWM_PhaseCorrect(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <timer1HwPWM_PhaseCorrect+0x6>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <timer1HwPWM_PhaseCorrect+0x8>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0; /*timer initial value*/
    2dec:	ec e4       	ldi	r30, 0x4C	; 76
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	11 82       	std	Z+1, r1	; 0x01
    2df2:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    2df4:	e9 e5       	ldi	r30, 0x59	; 89
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	10 82       	st	Z, r1
	OCR1A = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    2dfa:	ea e4       	ldi	r30, 0x4A	; 74
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	c9 01       	movw	r24, r18
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	82 0f       	add	r24, r18
    2e0c:	93 1f       	adc	r25, r19
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	80 83       	st	Z, r24
	OCR1B = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    2e1e:	e8 e4       	ldi	r30, 0x48	; 72
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	c9 01       	movw	r24, r18
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	82 0f       	add	r24, r18
    2e30:	93 1f       	adc	r25, r19
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24

	switch(u8_frequency)
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	3c 83       	std	Y+4, r19	; 0x04
    2e4a:	2b 83       	std	Y+3, r18	; 0x03
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	83 30       	cpi	r24, 0x03	; 3
    2e52:	91 05       	cpc	r25, r1
    2e54:	c9 f1       	breq	.+114    	; 0x2ec8 <timer1HwPWM_PhaseCorrect+0xec>
    2e56:	2b 81       	ldd	r18, Y+3	; 0x03
    2e58:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5a:	24 30       	cpi	r18, 0x04	; 4
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	5c f4       	brge	.+22     	; 0x2e76 <timer1HwPWM_PhaseCorrect+0x9a>
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	81 30       	cpi	r24, 0x01	; 1
    2e66:	91 05       	cpc	r25, r1
    2e68:	89 f0       	breq	.+34     	; 0x2e8c <timer1HwPWM_PhaseCorrect+0xb0>
    2e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e6e:	22 30       	cpi	r18, 0x02	; 2
    2e70:	31 05       	cpc	r19, r1
    2e72:	d9 f0       	breq	.+54     	; 0x2eaa <timer1HwPWM_PhaseCorrect+0xce>
    2e74:	55 c0       	rjmp	.+170    	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	99 f1       	breq	.+102    	; 0x2ee6 <timer1HwPWM_PhaseCorrect+0x10a>
    2e80:	2b 81       	ldd	r18, Y+3	; 0x03
    2e82:	3c 81       	ldd	r19, Y+4	; 0x04
    2e84:	25 30       	cpi	r18, 0x05	; 5
    2e86:	31 05       	cpc	r19, r1
    2e88:	e9 f1       	breq	.+122    	; 0x2f04 <timer1HwPWM_PhaseCorrect+0x128>
    2e8a:	4a c0       	rjmp	.+148    	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
	{

	case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2e8c:	e6 e4       	ldi	r30, 0x46	; 70
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	83 ec       	ldi	r24, 0xC3	; 195
    2e92:	99 e0       	ldi	r25, 0x09	; 9
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2e98:	ef e4       	ldi	r30, 0x4F	; 79
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	82 e8       	ldi	r24, 0x82	; 130
    2e9e:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
			 * 2. Prescaler = F_CPU
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_NO;
    2ea0:	ee e4       	ldi	r30, 0x4E	; 78
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	81 e1       	ldi	r24, 0x11	; 17
    2ea6:	80 83       	st	Z, r24
    2ea8:	3b c0       	rjmp	.+118    	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2eaa:	e6 e4       	ldi	r30, 0x46	; 70
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	83 ec       	ldi	r24, 0xC3	; 195
    2eb0:	99 e0       	ldi	r25, 0x09	; 9
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2eb6:	ef e4       	ldi	r30, 0x4F	; 79
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	82 e8       	ldi	r24, 0x82	; 130
    2ebc:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/8
			 */
			TCCR1B = (1<<WGM13) | T1_PRESCALER_8;
    2ebe:	ee e4       	ldi	r30, 0x4E	; 78
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	82 e1       	ldi	r24, 0x12	; 18
    2ec4:	80 83       	st	Z, r24
    2ec6:	2c c0       	rjmp	.+88     	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2ec8:	e6 e4       	ldi	r30, 0x46	; 70
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	83 ec       	ldi	r24, 0xC3	; 195
    2ece:	99 e0       	ldi	r25, 0x09	; 9
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2ed4:	ef e4       	ldi	r30, 0x4F	; 79
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	82 e8       	ldi	r24, 0x82	; 130
    2eda:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/64
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_64;
    2edc:	ee e4       	ldi	r30, 0x4E	; 78
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	83 e1       	ldi	r24, 0x13	; 19
    2ee2:	80 83       	st	Z, r24
    2ee4:	1d c0       	rjmp	.+58     	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2ee6:	e6 e4       	ldi	r30, 0x46	; 70
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	83 ec       	ldi	r24, 0xC3	; 195
    2eec:	99 e0       	ldi	r25, 0x09	; 9
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Disconnect OC1B COM1B0=0 COM1B1=0
		     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2ef2:	ef e4       	ldi	r30, 0x4F	; 79
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	82 e8       	ldi	r24, 0x82	; 130
    2ef8:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/256
		     */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_256;
    2efa:	ee e4       	ldi	r30, 0x4E	; 78
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	84 e1       	ldi	r24, 0x14	; 20
    2f00:	80 83       	st	Z, r24
    2f02:	0e c0       	rjmp	.+28     	; 0x2f20 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2f04:	e6 e4       	ldi	r30, 0x46	; 70
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	83 ec       	ldi	r24, 0xC3	; 195
    2f0a:	99 e0       	ldi	r25, 0x09	; 9
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	82 e8       	ldi	r24, 0x82	; 130
    2f16:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/1024
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_1024;
    2f18:	ee e4       	ldi	r30, 0x4E	; 78
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	85 e1       	ldi	r24, 0x15	; 21
    2f1e:	80 83       	st	Z, r24
			break;
	}
}
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <__udivmodqi4>:
    2f2e:	99 1b       	sub	r25, r25
    2f30:	79 e0       	ldi	r23, 0x09	; 9
    2f32:	04 c0       	rjmp	.+8      	; 0x2f3c <__udivmodqi4_ep>

00002f34 <__udivmodqi4_loop>:
    2f34:	99 1f       	adc	r25, r25
    2f36:	96 17       	cp	r25, r22
    2f38:	08 f0       	brcs	.+2      	; 0x2f3c <__udivmodqi4_ep>
    2f3a:	96 1b       	sub	r25, r22

00002f3c <__udivmodqi4_ep>:
    2f3c:	88 1f       	adc	r24, r24
    2f3e:	7a 95       	dec	r23
    2f40:	c9 f7       	brne	.-14     	; 0x2f34 <__udivmodqi4_loop>
    2f42:	80 95       	com	r24
    2f44:	08 95       	ret

00002f46 <__divmodhi4>:
    2f46:	97 fb       	bst	r25, 7
    2f48:	09 2e       	mov	r0, r25
    2f4a:	07 26       	eor	r0, r23
    2f4c:	0a d0       	rcall	.+20     	; 0x2f62 <__divmodhi4_neg1>
    2f4e:	77 fd       	sbrc	r23, 7
    2f50:	04 d0       	rcall	.+8      	; 0x2f5a <__divmodhi4_neg2>
    2f52:	0c d0       	rcall	.+24     	; 0x2f6c <__udivmodhi4>
    2f54:	06 d0       	rcall	.+12     	; 0x2f62 <__divmodhi4_neg1>
    2f56:	00 20       	and	r0, r0
    2f58:	1a f4       	brpl	.+6      	; 0x2f60 <__divmodhi4_exit>

00002f5a <__divmodhi4_neg2>:
    2f5a:	70 95       	com	r23
    2f5c:	61 95       	neg	r22
    2f5e:	7f 4f       	sbci	r23, 0xFF	; 255

00002f60 <__divmodhi4_exit>:
    2f60:	08 95       	ret

00002f62 <__divmodhi4_neg1>:
    2f62:	f6 f7       	brtc	.-4      	; 0x2f60 <__divmodhi4_exit>
    2f64:	90 95       	com	r25
    2f66:	81 95       	neg	r24
    2f68:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6a:	08 95       	ret

00002f6c <__udivmodhi4>:
    2f6c:	aa 1b       	sub	r26, r26
    2f6e:	bb 1b       	sub	r27, r27
    2f70:	51 e1       	ldi	r21, 0x11	; 17
    2f72:	07 c0       	rjmp	.+14     	; 0x2f82 <__udivmodhi4_ep>

00002f74 <__udivmodhi4_loop>:
    2f74:	aa 1f       	adc	r26, r26
    2f76:	bb 1f       	adc	r27, r27
    2f78:	a6 17       	cp	r26, r22
    2f7a:	b7 07       	cpc	r27, r23
    2f7c:	10 f0       	brcs	.+4      	; 0x2f82 <__udivmodhi4_ep>
    2f7e:	a6 1b       	sub	r26, r22
    2f80:	b7 0b       	sbc	r27, r23

00002f82 <__udivmodhi4_ep>:
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	5a 95       	dec	r21
    2f88:	a9 f7       	brne	.-22     	; 0x2f74 <__udivmodhi4_loop>
    2f8a:	80 95       	com	r24
    2f8c:	90 95       	com	r25
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	08 95       	ret

00002f94 <__prologue_saves__>:
    2f94:	2f 92       	push	r2
    2f96:	3f 92       	push	r3
    2f98:	4f 92       	push	r4
    2f9a:	5f 92       	push	r5
    2f9c:	6f 92       	push	r6
    2f9e:	7f 92       	push	r7
    2fa0:	8f 92       	push	r8
    2fa2:	9f 92       	push	r9
    2fa4:	af 92       	push	r10
    2fa6:	bf 92       	push	r11
    2fa8:	cf 92       	push	r12
    2faa:	df 92       	push	r13
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	ca 1b       	sub	r28, r26
    2fbe:	db 0b       	sbc	r29, r27
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	09 94       	ijmp

00002fcc <__epilogue_restores__>:
    2fcc:	2a 88       	ldd	r2, Y+18	; 0x12
    2fce:	39 88       	ldd	r3, Y+17	; 0x11
    2fd0:	48 88       	ldd	r4, Y+16	; 0x10
    2fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fde:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe0:	c8 84       	ldd	r12, Y+8	; 0x08
    2fe2:	df 80       	ldd	r13, Y+7	; 0x07
    2fe4:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe6:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe8:	0c 81       	ldd	r16, Y+4	; 0x04
    2fea:	1b 81       	ldd	r17, Y+3	; 0x03
    2fec:	aa 81       	ldd	r26, Y+2	; 0x02
    2fee:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff0:	ce 0f       	add	r28, r30
    2ff2:	d1 1d       	adc	r29, r1
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	ed 01       	movw	r28, r26
    3000:	08 95       	ret

00003002 <_exit>:
    3002:	f8 94       	cli

00003004 <__stop_program>:
    3004:	ff cf       	rjmp	.-2      	; 0x3004 <__stop_program>


GPIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002890  00002924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800168  00800168  00002a2c  2**0
                  ALLOC
  3 .stab         000031a4  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001813  00000000  00000000  00005bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000073e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  00007523  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  000091ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  0000a077  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  0000b034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  0000b2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__vector_10>
      2c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e9       	ldi	r30, 0x90	; 144
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <main>
      8a:	0c 94 46 14 	jmp	0x288c	; 0x288c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__clzsi2+0x7e>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__clzsi2+0x76>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <car_application>:

#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000

uint8_t g8_gloabal_car_duty;
void car_application(void)
{
     be0:	ef 92       	push	r14
     be2:	0f 93       	push	r16
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	00 d0       	rcall	.+0      	; 0xbea <car_application+0xa>
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	sei();
     bf0:	78 94       	sei
	g8_gloabal_car_duty=0; /*100 instead of 0 because the duty cycle inverted in ISR*/
     bf2:	10 92 69 01 	sts	0x0169, r1
	uint8_t u8_i;
	uint8_t u8_j;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 80 08 	call	0x1100	; 0x1100 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	0e 94 80 08 	call	0x1100	; 0x1100 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MotorDC_Dir>

	//gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,MOTOR_OUT_2B_BIT);

	for(u8_i=0;u8_i<5;u8_i++)
     c12:	1b 82       	std	Y+3, r1	; 0x03
     c14:	12 c0       	rjmp	.+36     	; 0xc3a <car_application+0x5a>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     c16:	80 91 69 01 	lds	r24, 0x0169
     c1a:	0e 94 65 09 	call	0x12ca	; 0x12ca <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(1000);       /*1sec on simulation*/
     c1e:	68 ee       	ldi	r22, 0xE8	; 232
     c20:	73 e0       	ldi	r23, 0x03	; 3
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
		g8_gloabal_car_duty+=20;
     c2a:	80 91 69 01 	lds	r24, 0x0169
     c2e:	8c 5e       	subi	r24, 0xEC	; 236
     c30:	80 93 69 01 	sts	0x0169, r24
	MotorDC_Dir(MOT_1,FORWARD);
	MotorDC_Dir(MOT_2,FORWARD);

	//gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,MOTOR_OUT_2B_BIT);

	for(u8_i=0;u8_i<5;u8_i++)
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	85 30       	cpi	r24, 0x05	; 5
     c3e:	58 f3       	brcs	.-42     	; 0xc16 <car_application+0x36>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);       /*1sec on simulation*/
		g8_gloabal_car_duty+=20;
	}

	for(u8_j=0;u8_j<5;u8_j++)
     c40:	1a 82       	std	Y+2, r1	; 0x02
     c42:	12 c0       	rjmp	.+36     	; 0xc68 <car_application+0x88>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     c44:	80 91 69 01 	lds	r24, 0x0169
     c48:	0e 94 65 09 	call	0x12ca	; 0x12ca <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(1000);
     c4c:	68 ee       	ldi	r22, 0xE8	; 232
     c4e:	73 e0       	ldi	r23, 0x03	; 3
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
		g8_gloabal_car_duty-=20;
     c58:	80 91 69 01 	lds	r24, 0x0169
     c5c:	84 51       	subi	r24, 0x14	; 20
     c5e:	80 93 69 01 	sts	0x0169, r24
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);       /*1sec on simulation*/
		g8_gloabal_car_duty+=20;
	}

	for(u8_j=0;u8_j<5;u8_j++)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	85 30       	cpi	r24, 0x05	; 5
     c6c:	58 f3       	brcs	.-42     	; 0xc44 <car_application+0x64>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);
		g8_gloabal_car_duty-=20;
	}

	g8_gloabal_car_duty=50;
     c6e:	82 e3       	ldi	r24, 0x32	; 50
     c70:	80 93 69 01 	sts	0x0169, r24
	for(u8_k=0;u8_k<1;u8_k++)
     c74:	19 82       	std	Y+1, r1	; 0x01
     c76:	11 c0       	rjmp	.+34     	; 0xc9a <car_application+0xba>
	{
		MotorDC_Dir(MOT_1,STOP);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MotorDC_Dir>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     c80:	80 91 69 01 	lds	r24, 0x0169
     c84:	0e 94 65 09 	call	0x12ca	; 0x12ca <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(1000);
     c88:	68 ee       	ldi	r22, 0xE8	; 232
     c8a:	73 e0       	ldi	r23, 0x03	; 3
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
		softwareDelayMs(1000);
		g8_gloabal_car_duty-=20;
	}

	g8_gloabal_car_duty=50;
	for(u8_k=0;u8_k<1;u8_k++)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 23       	and	r24, r24
     c9e:	61 f3       	breq	.-40     	; 0xc78 <car_application+0x98>
	{
		MotorDC_Dir(MOT_1,STOP);
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);
	}
	MotorDC_Dir(MOT_1,STOP);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,STOP);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MotorDC_Dir>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_NO_CLOCK,6,0,T0_INTERRUPT_NORMAL);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	26 e0       	ldi	r18, 0x06	; 6
     cb8:	00 e0       	ldi	r16, 0x00	; 0
     cba:	ee 24       	eor	r14, r14
     cbc:	e3 94       	inc	r14
     cbe:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	0f 91       	pop	r16
     cce:	ef 90       	pop	r14
     cd0:	08 95       	ret

00000cd2 <sevensegments>:
#include "GPIO_REQ7.h"
void sevensegments()
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <sevensegments+0x6>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	sevenSegInit(SEG_0);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <sevenSegInit>
	sevenSegInit(SEG_1);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <sevenSegInit>

	uint8_t counter1;
	uint8_t counter2=START_;
     cea:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     cec:	1b 82       	std	Y+3, r1	; 0x03
     cee:	37 c0       	rjmp	.+110    	; 0xd5e <sevensegments+0x8c>
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     cf0:	19 82       	std	Y+1, r1	; 0x01
     cf2:	2f c0       	rjmp	.+94     	; 0xd52 <sevensegments+0x80>
			{
				sevenSegWrite(SEG_0, counter1);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	6b 81       	ldd	r22, Y+3	; 0x03
     cf8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sevenSegWrite>
				sevenSegEnable(SEG_0);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     d02:	65 e0       	ldi	r22, 0x05	; 5
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				sevenSegDisable(SEG_0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     d14:	65 e0       	ldi	r22, 0x05	; 5
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>

				sevenSegWrite(SEG_1, counter2);
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	6a 81       	ldd	r22, Y+2	; 0x02
     d24:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sevenSegWrite>
				sevenSegEnable(SEG_1);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     d2e:	65 e0       	ldi	r22, 0x05	; 5
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				sevenSegDisable(SEG_1);
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     d40:	65 e0       	ldi	r22, 0x05	; 5
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	82 33       	cpi	r24, 0x32	; 50
     d56:	70 f2       	brcs	.-100    	; 0xcf4 <sevensegments+0x22>
	uint8_t counter1;
	uint8_t counter2=START_;
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	8a 30       	cpi	r24, 0x0A	; 10
     d62:	30 f2       	brcs	.-116    	; 0xcf0 <sevensegments+0x1e>
				sevenSegDisable(SEG_1);
				softwareDelayMs(SWITCHING_TIME);

			}
		}
		counter2++;
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	8a 83       	std	Y+2, r24	; 0x02
		if(counter2==MAX_NUMBER+1)
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	8a 30       	cpi	r24, 0x0A	; 10
     d6e:	09 f0       	breq	.+2      	; 0xd72 <sevensegments+0xa0>
     d70:	bd cf       	rjmp	.-134    	; 0xcec <sevensegments+0x1a>
		{
			counter2=START_;
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	bb cf       	rjmp	.-138    	; 0xcec <sevensegments+0x1a>

00000d76 <button_led>:
#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000
#define MIN_FLAG_VALUE 150
#define START 0

void button_led(void)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <button_led+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <button_led+0x8>
     d7e:	0f 92       	push	r0
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
     d84:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	pushButtonInit(BTN_1);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <pushButtonGetStatus>
     d98:	88 23       	and	r24, r24
     d9a:	d9 f3       	breq	.-10     	; 0xd92 <button_led+0x1c>
		{
			Led_On(LED_1);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     da2:	19 82       	std	Y+1, r1	; 0x01
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	1b 82       	std	Y+3, r1	; 0x03
     da8:	1c 82       	std	Y+4, r1	; 0x04
     daa:	13 c0       	rjmp	.+38     	; 0xdd2 <button_led+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <pushButtonGetStatus>
     db2:	88 23       	and	r24, r24
     db4:	19 f0       	breq	.+6      	; 0xdbc <button_led+0x46>
	    		{
	    			u8_flag++;
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	ab 81       	ldd	r26, Y+3	; 0x03
     dc2:	bc 81       	ldd	r27, Y+4	; 0x04
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	a1 1d       	adc	r26, r1
     dc8:	b1 1d       	adc	r27, r1
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	ab 83       	std	Y+3, r26	; 0x03
     dd0:	bc 83       	std	Y+4, r27	; 0x04
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	ab 81       	ldd	r26, Y+3	; 0x03
     dd8:	bc 81       	ldd	r27, Y+4	; 0x04
     dda:	80 38       	cpi	r24, 0x80	; 128
     ddc:	28 e3       	ldi	r18, 0x38	; 56
     dde:	92 07       	cpc	r25, r18
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	a2 07       	cpc	r26, r18
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	b2 07       	cpc	r27, r18
     de8:	08 f3       	brcs	.-62     	; 0xdac <button_led+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	87 39       	cpi	r24, 0x97	; 151
     dee:	30 f0       	brcs	.+12     	; 0xdfc <button_led+0x86>
	    	{
	    		softwareDelayMs(ONE_SEC);
     df0:	68 ee       	ldi	r22, 0xE8	; 232
     df2:	73 e0       	ldi	r23, 0x03	; 3
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
	    	}
	    	Led_Off(LED_1);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
	    	softwareDelayMs(ONE_SEC);
     e02:	68 ee       	ldi	r22, 0xE8	; 232
     e04:	73 e0       	ldi	r23, 0x03	; 3
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
	    	u8_flag=START;
     e0e:	1d 82       	std	Y+5, r1	; 0x05
     e10:	c0 cf       	rjmp	.-128    	; 0xd92 <button_led+0x1c>

00000e12 <button_led_using_timer0>:
	}
}


void button_led_using_timer0(void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <button_led_using_timer0+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <button_led_using_timer0+0x8>
     e1a:	0f 92       	push	r0
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
     e20:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	pushButtonInit(BTN_1);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <pushButtonGetStatus>
     e34:	88 23       	and	r24, r24
     e36:	d9 f3       	breq	.-10     	; 0xe2e <button_led_using_timer0+0x1c>
		{
			Led_On(LED_1);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	1b 82       	std	Y+3, r1	; 0x03
     e44:	1c 82       	std	Y+4, r1	; 0x04
     e46:	13 c0       	rjmp	.+38     	; 0xe6e <button_led_using_timer0+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <pushButtonGetStatus>
     e4e:	88 23       	and	r24, r24
     e50:	19 f0       	breq	.+6      	; 0xe58 <button_led_using_timer0+0x46>
	    		{
	    			u8_flag++;
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	ab 81       	ldd	r26, Y+3	; 0x03
     e5e:	bc 81       	ldd	r27, Y+4	; 0x04
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	a1 1d       	adc	r26, r1
     e64:	b1 1d       	adc	r27, r1
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	ab 83       	std	Y+3, r26	; 0x03
     e6c:	bc 83       	std	Y+4, r27	; 0x04
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	ab 81       	ldd	r26, Y+3	; 0x03
     e74:	bc 81       	ldd	r27, Y+4	; 0x04
     e76:	80 38       	cpi	r24, 0x80	; 128
     e78:	28 e3       	ldi	r18, 0x38	; 56
     e7a:	92 07       	cpc	r25, r18
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	a2 07       	cpc	r26, r18
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	b2 07       	cpc	r27, r18
     e84:	08 f3       	brcs	.-62     	; 0xe48 <button_led_using_timer0+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	87 39       	cpi	r24, 0x97	; 151
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <button_led_using_timer0+0x82>
	    	{
	    		timer0DelayMs(ONE_SEC);
     e8c:	88 ee       	ldi	r24, 0xE8	; 232
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	0e 94 94 10 	call	0x2128	; 0x2128 <timer0DelayMs>
	    	}
	    	Led_Off(LED_1);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
	    	timer0DelayMs(ONE_SEC);
     e9a:	88 ee       	ldi	r24, 0xE8	; 232
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 94 10 	call	0x2128	; 0x2128 <timer0DelayMs>
	    	u8_flag=START;
     ea2:	1d 82       	std	Y+5, r1	; 0x05
     ea4:	c4 cf       	rjmp	.-120    	; 0xe2e <button_led_using_timer0+0x1c>

00000ea6 <trafficlight>:
#include "GPIO_REQ9.h"
void trafficlight()
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <trafficlight+0x6>
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_2);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_3);
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	uint8_t state=GO_;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	3b 83       	std	Y+3, r19	; 0x03
     ed0:	2a 83       	std	Y+2, r18	; 0x02
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	c9 f0       	breq	.+50     	; 0xf0e <trafficlight+0x68>
     edc:	2a 81       	ldd	r18, Y+2	; 0x02
     ede:	3b 81       	ldd	r19, Y+3	; 0x03
     ee0:	23 30       	cpi	r18, 0x03	; 3
     ee2:	31 05       	cpc	r19, r1
     ee4:	19 f1       	breq	.+70     	; 0xf2c <trafficlight+0x86>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	61 f7       	brne	.-40     	; 0xec8 <trafficlight+0x22>
		{
			case GO_:
				Led_On(LED_1);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				softwareDelayMs(ONE_SEC_);
     ef6:	68 ee       	ldi	r22, 0xE8	; 232
     ef8:	73 e0       	ldi	r23, 0x03	; 3
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				Led_Off(LED_1);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=STOP_;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	dd cf       	rjmp	.-70     	; 0xec8 <trafficlight+0x22>
				break;
			case READY_:
				Led_On(LED_2);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				softwareDelayMs(ONE_SEC_);
     f14:	68 ee       	ldi	r22, 0xE8	; 232
     f16:	73 e0       	ldi	r23, 0x03	; 3
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				Led_Off(LED_2);
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=GO_;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	ce cf       	rjmp	.-100    	; 0xec8 <trafficlight+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				softwareDelayMs(ONE_SEC_);
     f32:	68 ee       	ldi	r22, 0xE8	; 232
     f34:	73 e0       	ldi	r23, 0x03	; 3
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				Led_Off(LED_3);
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=READY_;
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	bf cf       	rjmp	.-130    	; 0xec8 <trafficlight+0x22>

00000f4a <trafficlight_using_timer0>:

	}
}

void trafficlight_using_timer0()
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <trafficlight_using_timer0+0x6>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_2);
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_3);
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	uint8_t state=GO_;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3b 83       	std	Y+3, r19	; 0x03
     f74:	2a 83       	std	Y+2, r18	; 0x02
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	b9 f0       	breq	.+46     	; 0xfae <trafficlight_using_timer0+0x64>
     f80:	2a 81       	ldd	r18, Y+2	; 0x02
     f82:	3b 81       	ldd	r19, Y+3	; 0x03
     f84:	23 30       	cpi	r18, 0x03	; 3
     f86:	31 05       	cpc	r19, r1
     f88:	f9 f0       	breq	.+62     	; 0xfc8 <trafficlight_using_timer0+0x7e>
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	61 f7       	brne	.-40     	; 0xf6c <trafficlight_using_timer0+0x22>
		{
			case GO_:
				Led_On(LED_1);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer0DelayMs(ONE_SEC_);
     f9a:	88 ee       	ldi	r24, 0xE8	; 232
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 94 10 	call	0x2128	; 0x2128 <timer0DelayMs>
				Led_Off(LED_1);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=STOP_;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	df cf       	rjmp	.-66     	; 0xf6c <trafficlight_using_timer0+0x22>
				break;
			case READY_:
				Led_On(LED_2);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer0DelayMs(ONE_SEC_);
     fb4:	88 ee       	ldi	r24, 0xE8	; 232
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 94 10 	call	0x2128	; 0x2128 <timer0DelayMs>
				Led_Off(LED_2);
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=GO_;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	d2 cf       	rjmp	.-92     	; 0xf6c <trafficlight_using_timer0+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer0DelayMs(ONE_SEC_);
     fce:	88 ee       	ldi	r24, 0xE8	; 232
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	0e 94 94 10 	call	0x2128	; 0x2128 <timer0DelayMs>
				Led_Off(LED_3);
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=READY_;
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	c5 cf       	rjmp	.-118    	; 0xf6c <trafficlight_using_timer0+0x22>

00000fe2 <trafficlight_using_timer1>:
	}
}


void trafficlight_using_timer1()
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <trafficlight_using_timer1+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_2);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_3);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	uint8_t state=GO_;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3b 83       	std	Y+3, r19	; 0x03
    100c:	2a 83       	std	Y+2, r18	; 0x02
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	91 05       	cpc	r25, r1
    1016:	b9 f0       	breq	.+46     	; 0x1046 <trafficlight_using_timer1+0x64>
    1018:	2a 81       	ldd	r18, Y+2	; 0x02
    101a:	3b 81       	ldd	r19, Y+3	; 0x03
    101c:	23 30       	cpi	r18, 0x03	; 3
    101e:	31 05       	cpc	r19, r1
    1020:	f9 f0       	breq	.+62     	; 0x1060 <trafficlight_using_timer1+0x7e>
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	61 f7       	brne	.-40     	; 0x1004 <trafficlight_using_timer1+0x22>
		{
			case GO_:
				Led_On(LED_1);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer1DelayMs(ONE_SEC_);
    1032:	88 ee       	ldi	r24, 0xE8	; 232
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 b1 12 	call	0x2562	; 0x2562 <timer1DelayMs>
				Led_Off(LED_1);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=STOP_;
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	df cf       	rjmp	.-66     	; 0x1004 <trafficlight_using_timer1+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer1DelayMs(ONE_SEC_);
    104c:	88 ee       	ldi	r24, 0xE8	; 232
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	0e 94 b1 12 	call	0x2562	; 0x2562 <timer1DelayMs>
				Led_Off(LED_2);
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=GO_;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	d2 cf       	rjmp	.-92     	; 0x1004 <trafficlight_using_timer1+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
				timer1DelayMs(ONE_SEC_);
    1066:	88 ee       	ldi	r24, 0xE8	; 232
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 b1 12 	call	0x2562	; 0x2562 <timer1DelayMs>
				Led_Off(LED_3);
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
				state=READY_;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	c5 cf       	rjmp	.-118    	; 0x1004 <trafficlight_using_timer1+0x22>

0000107a <trafficlight_using_timer0_using_interrupts>:
	}
}


void trafficlight_using_timer0_using_interrupts()
{
    107a:	ef 92       	push	r14
    107c:	0f 93       	push	r16
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_2);
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_3);
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
    g8_state=GO_;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 6a 01 	sts	0x016A, r24
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    109e:	88 e0       	ldi	r24, 0x08	; 8
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	43 e0       	ldi	r20, 0x03	; 3
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	0a ef       	ldi	r16, 0xFA	; 250
    10a8:	ee 24       	eor	r14, r14
    10aa:	68 94       	set
    10ac:	e1 f8       	bld	r14, 1
    10ae:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <trafficlight_using_timer0_using_interrupts+0x38>

000010b4 <trafficlight_using_timer0_using_interrupts_button>:
	}
}


void trafficlight_using_timer0_using_interrupts_button()
{
    10b4:	ef 92       	push	r14
    10b6:	0f 93       	push	r16
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_2);
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	Led_Init(LED_3);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Led_Init>
	pushButtonInit(BTN_4_INT0);
    10d2:	84 e0       	ldi	r24, 0x04	; 4
    10d4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <pushButtonInit>
	while(TRUE)
	{
		if(g8_interrupt_zero_flag==1)
    10d8:	80 91 68 01 	lds	r24, 0x0168
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <trafficlight_using_timer0_using_interrupts_button+0x24>
		{
		    g8_state=STOP_;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	80 93 6a 01 	sts	0x016A, r24
			timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	43 e0       	ldi	r20, 0x03	; 3
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	0a ef       	ldi	r16, 0xFA	; 250
    10f0:	ee 24       	eor	r14, r14
    10f2:	68 94       	set
    10f4:	e1 f8       	bld	r14, 1
    10f6:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
			g8_interrupt_zero_flag=0;
    10fa:	10 92 68 01 	sts	0x0168, r1
    10fe:	ec cf       	rjmp	.-40     	; 0x10d8 <trafficlight_using_timer0_using_interrupts_button+0x24>

00001100 <MotorDC_Init>:
#include "dcMotor.h"



void MotorDC_Init(En_motorType_t en_motor_number)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <MotorDC_Init+0x6>
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3b 83       	std	Y+3, r19	; 0x03
    1116:	2a 83       	std	Y+2, r18	; 0x02
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	31 f0       	breq	.+12     	; 0x112c <MotorDC_Init+0x2c>
    1120:	2a 81       	ldd	r18, Y+2	; 0x02
    1122:	3b 81       	ldd	r19, Y+3	; 0x03
    1124:	21 30       	cpi	r18, 0x01	; 1
    1126:	31 05       	cpc	r19, r1
    1128:	01 f1       	breq	.+64     	; 0x116a <MotorDC_Init+0x6a>
    112a:	3d c0       	rjmp	.+122    	; 0x11a6 <MotorDC_Init+0xa6>
	{
		case(MOT_1):
				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	60 e1       	ldi	r22, 0x10	; 16
    1130:	4f ef       	ldi	r20, 0xFF	; 255
    1132:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,LOW);
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	60 e1       	ldi	r22, 0x10	; 16
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	64 e0       	ldi	r22, 0x04	; 4
    1144:	4f ef       	ldi	r20, 0xFF	; 255
    1146:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	64 e0       	ldi	r22, 0x04	; 4
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	68 e0       	ldi	r22, 0x08	; 8
    1158:	4f ef       	ldi	r20, 0xFF	; 255
    115a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	68 e0       	ldi	r22, 0x08	; 8
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1168:	1e c0       	rjmp	.+60     	; 0x11a6 <MotorDC_Init+0xa6>

				break;

		case(MOT_2):
				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	60 e2       	ldi	r22, 0x20	; 32
    116e:	4f ef       	ldi	r20, 0xFF	; 255
    1170:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,LOW);   /*disable motor1*/
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	60 e2       	ldi	r22, 0x20	; 32
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	60 e4       	ldi	r22, 0x40	; 64
    1182:	4f ef       	ldi	r20, 0xFF	; 255
    1184:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	60 e4       	ldi	r22, 0x40	; 64
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	60 e8       	ldi	r22, 0x80	; 128
    1196:	4f ef       	ldi	r20, 0xFF	; 255
    1198:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	60 e8       	ldi	r22, 0x80	; 128
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>

				break;
	}
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <MotorDC_Dir>:


void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	28 97       	sbiw	r28, 0x08	; 8
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(en_motor_number)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	8f 81       	ldd	r24, Y+7	; 0x07
    11d6:	98 85       	ldd	r25, Y+8	; 0x08
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	31 f0       	breq	.+12     	; 0x11e8 <MotorDC_Dir+0x36>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	b1 f1       	breq	.+108    	; 0x1252 <MotorDC_Dir+0xa0>
    11e6:	68 c0       	rjmp	.+208    	; 0x12b8 <MotorDC_Dir+0x106>
	{
		case(MOT_1):
				switch(en_motor_dir)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3e 83       	std	Y+6, r19	; 0x06
    11f0:	2d 83       	std	Y+5, r18	; 0x05
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	a9 f0       	breq	.+42     	; 0x1226 <MotorDC_Dir+0x74>
    11fc:	2d 81       	ldd	r18, Y+5	; 0x05
    11fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	d9 f0       	breq	.+54     	; 0x123c <MotorDC_Dir+0x8a>
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <MotorDC_Dir+0x5e>
    120e:	54 c0       	rjmp	.+168    	; 0x12b8 <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	64 e0       	ldi	r22, 0x04	; 4
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	68 e0       	ldi	r22, 0x08	; 8
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1224:	49 c0       	rjmp	.+146    	; 0x12b8 <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,LOW);

						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	64 e0       	ldi	r22, 0x04	; 4
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,MOTOR_OUT_1B_BIT);
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	68 e0       	ldi	r22, 0x08	; 8
    1234:	48 e0       	ldi	r20, 0x08	; 8
    1236:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    123a:	3e c0       	rjmp	.+124    	; 0x12b8 <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,MOTOR_EN_1_BIT);
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,MOTOR_OUT_1A_BIT);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	64 e0       	ldi	r22, 0x04	; 4
    1240:	44 e0       	ldi	r20, 0x04	; 4
    1242:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	68 e0       	ldi	r22, 0x08	; 8
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1250:	33 c0       	rjmp	.+102    	; 0x12b8 <MotorDC_Dir+0x106>
				}

				break;

		case(MOT_2):
				switch(en_motor_dir)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3c 83       	std	Y+4, r19	; 0x04
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	a1 f0       	breq	.+40     	; 0x128e <MotorDC_Dir+0xdc>
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <MotorDC_Dir+0xf2>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	01 f5       	brne	.+64     	; 0x12b8 <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	60 e4       	ldi	r22, 0x40	; 64
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	60 e8       	ldi	r22, 0x80	; 128
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    128c:	15 c0       	rjmp	.+42     	; 0x12b8 <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,LOW);
						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	60 e4       	ldi	r22, 0x40	; 64
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,MOTOR_OUT_2B_BIT);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	60 e8       	ldi	r22, 0x80	; 128
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    12a2:	0a c0       	rjmp	.+20     	; 0x12b8 <MotorDC_Dir+0x106>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,MOTOR_EN_2_BIT);
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,MOTOR_OUT_2A_BIT);
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	60 e4       	ldi	r22, 0x40	; 64
    12a8:	40 e4       	ldi	r20, 0x40	; 64
    12aa:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	60 e8       	ldi	r22, 0x80	; 128
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
						//gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,MOTOR_EN_2_BIT);
						break;
				}
	}
}
    12b8:	28 96       	adiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <MotorDC_Speed_PollingWithT0>:


void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	0f 92       	push	r0
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed,100);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	64 e6       	ldi	r22, 0x64	; 100
    12da:	0e 94 8a 11 	call	0x2314	; 0x2314 <timer0SwPWM>
}
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <MotorDC_Speed_HwPWM>:


void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01

}
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <gpioPortDirection>:
#include "gpio.h"
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <gpioPortDirection+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <gpioPortDirection+0x8>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f0       	breq	.+52     	; 0x1352 <gpioPortDirection+0x58>
    131e:	2b 81       	ldd	r18, Y+3	; 0x03
    1320:	3c 81       	ldd	r19, Y+4	; 0x04
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <gpioPortDirection+0x38>
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <gpioPortDirection+0x4e>
    1330:	1e c0       	rjmp	.+60     	; 0x136e <gpioPortDirection+0x74>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <gpioPortDirection+0x62>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <gpioPortDirection+0x6c>
    1346:	13 c0       	rjmp	.+38     	; 0x136e <gpioPortDirection+0x74>
	{
	case 0:
			PORTA_DIR=u8_direction;
    1348:	ea e3       	ldi	r30, 0x3A	; 58
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	0e c0       	rjmp	.+28     	; 0x136e <gpioPortDirection+0x74>
		break;

	case 1:
			PORTB_DIR=u8_direction;
    1352:	e7 e3       	ldi	r30, 0x37	; 55
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	09 c0       	rjmp	.+18     	; 0x136e <gpioPortDirection+0x74>
			break;
	case 2:
			PORTC_DIR=u8_direction;
    135c:	e4 e3       	ldi	r30, 0x34	; 52
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
    1364:	04 c0       	rjmp	.+8      	; 0x136e <gpioPortDirection+0x74>
		break;

	case 3:
			PORTD_DIR=u8_direction;
    1366:	e1 e3       	ldi	r30, 0x31	; 49
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
		break;

	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <gpioPortWrite>:


void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <gpioPortWrite+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <gpioPortWrite+0x8>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3c 83       	std	Y+4, r19	; 0x04
    1394:	2b 83       	std	Y+3, r18	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	d1 f0       	breq	.+52     	; 0x13d4 <gpioPortWrite+0x58>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <gpioPortWrite+0x38>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <gpioPortWrite+0x4e>
    13b2:	1e c0       	rjmp	.+60     	; 0x13f0 <gpioPortWrite+0x74>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	81 f0       	breq	.+32     	; 0x13de <gpioPortWrite+0x62>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	91 05       	cpc	r25, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <gpioPortWrite+0x6c>
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <gpioPortWrite+0x74>
	{
	case 0:
			PORTA_DATA=u8_value;
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <gpioPortWrite+0x74>

		break;

	case 1:
			PORTB_DATA=u8_value;
    13d4:	e8 e3       	ldi	r30, 0x38	; 56
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <gpioPortWrite+0x74>
		break;

	case 2:
			PORTC_DATA=u8_value;
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <gpioPortWrite+0x74>
		break;

	case 3:
			PORTD_DATA=u8_value;
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
		break;

	}
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <gpioPortToggle+0x6>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_port)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3b 83       	std	Y+3, r19	; 0x03
    1414:	2a 83       	std	Y+2, r18	; 0x02
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	e9 f0       	breq	.+58     	; 0x145a <gpioPortToggle+0x5c>
    1420:	2a 81       	ldd	r18, Y+2	; 0x02
    1422:	3b 81       	ldd	r19, Y+3	; 0x03
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <gpioPortToggle+0x36>
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	61 f0       	breq	.+24     	; 0x144a <gpioPortToggle+0x4c>
    1432:	2a c0       	rjmp	.+84     	; 0x1488 <gpioPortToggle+0x8a>
    1434:	2a 81       	ldd	r18, Y+2	; 0x02
    1436:	3b 81       	ldd	r19, Y+3	; 0x03
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	b1 f0       	breq	.+44     	; 0x146a <gpioPortToggle+0x6c>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	c9 f0       	breq	.+50     	; 0x147a <gpioPortToggle+0x7c>
    1448:	1f c0       	rjmp	.+62     	; 0x1488 <gpioPortToggle+0x8a>
	{
	case 0:
		PORTA_DATA ^= HIGH;
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 95       	com	r24
    1456:	8c 93       	st	X, r24
    1458:	17 c0       	rjmp	.+46     	; 0x1488 <gpioPortToggle+0x8a>
		break;

	case 1:
		PORTB_DATA ^= HIGH;
    145a:	a8 e3       	ldi	r26, 0x38	; 56
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e8 e3       	ldi	r30, 0x38	; 56
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 95       	com	r24
    1466:	8c 93       	st	X, r24
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <gpioPortToggle+0x8a>
		break;

	case 2:
		PORTC_DATA ^= HIGH;
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 95       	com	r24
    1476:	8c 93       	st	X, r24
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <gpioPortToggle+0x8a>
		break;

	case 3:
		PORTD_DATA ^= HIGH;
    147a:	a2 e3       	ldi	r26, 0x32	; 50
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 95       	com	r24
    1486:	8c 93       	st	X, r24
		break;

	}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <gpioPortRead+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <gpioPortRead+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	switch(u8_port)
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3c 83       	std	Y+4, r19	; 0x04
    14aa:	2b 83       	std	Y+3, r18	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	d1 f0       	breq	.+52     	; 0x14ea <gpioPortRead+0x56>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <gpioPortRead+0x36>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <gpioPortRead+0x4c>
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <gpioPortRead+0x72>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <gpioPortRead+0x60>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <gpioPortRead+0x6a>
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <gpioPortRead+0x72>
	{
	case 0:
		data=PORTA_PIN;
    14e0:	e9 e3       	ldi	r30, 0x39	; 57
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <gpioPortRead+0x72>
		break;

	case 1:
		data=PORTB_PIN;
    14ea:	e6 e3       	ldi	r30, 0x36	; 54
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <gpioPortRead+0x72>
		break;

	case 2:
		data=PORTC_PIN;
    14f4:	e3 e3       	ldi	r30, 0x33	; 51
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <gpioPortRead+0x72>
		break;
	case 3:
		data=PORTD_PIN;
    14fe:	e0 e3       	ldi	r30, 0x30	; 48
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <gpioPinDirection+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <gpioPinDirection+0x8>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6a 83       	std	Y+2, r22	; 0x02
    1528:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	91 05       	cpc	r25, r1
    153c:	69 f1       	breq	.+90     	; 0x1598 <gpioPinDirection+0x82>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <gpioPinDirection+0x3c>
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f0       	breq	.+26     	; 0x156a <gpioPinDirection+0x54>
    1550:	67 c0       	rjmp	.+206    	; 0x1620 <gpioPinDirection+0x10a>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	a9 f1       	breq	.+106    	; 0x15c6 <gpioPinDirection+0xb0>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <gpioPinDirection+0x52>
    1566:	46 c0       	rjmp	.+140    	; 0x15f4 <gpioPinDirection+0xde>
    1568:	5b c0       	rjmp	.+182    	; 0x1620 <gpioPinDirection+0x10a>
	{
	case 0:
		if(u8_direction == INPUT)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 23       	and	r24, r24
    156e:	59 f4       	brne	.+22     	; 0x1586 <gpioPinDirection+0x70>
		{
			PORTA_DIR &= ~(u8_pins);
    1570:	aa e3       	ldi	r26, 0x3A	; 58
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ea e3       	ldi	r30, 0x3A	; 58
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	98 2f       	mov	r25, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	80 95       	com	r24
    1580:	89 23       	and	r24, r25
    1582:	8c 93       	st	X, r24
    1584:	4d c0       	rjmp	.+154    	; 0x1620 <gpioPinDirection+0x10a>
		}
		else
		{
			PORTA_DIR |= u8_pins;
    1586:	aa e3       	ldi	r26, 0x3A	; 58
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ea e3       	ldi	r30, 0x3A	; 58
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	90 81       	ld	r25, Z
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24
    1596:	44 c0       	rjmp	.+136    	; 0x1620 <gpioPinDirection+0x10a>
		}
		break;

	case 1:
		if(u8_direction == INPUT)
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 23       	and	r24, r24
    159c:	59 f4       	brne	.+22     	; 0x15b4 <gpioPinDirection+0x9e>
		{
			PORTB_DIR &= ~(u8_pins);
    159e:	a7 e3       	ldi	r26, 0x37	; 55
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e7 e3       	ldi	r30, 0x37	; 55
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	98 2f       	mov	r25, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 95       	com	r24
    15ae:	89 23       	and	r24, r25
    15b0:	8c 93       	st	X, r24
    15b2:	36 c0       	rjmp	.+108    	; 0x1620 <gpioPinDirection+0x10a>
		}
		else
		{
			PORTB_DIR |= u8_pins;
    15b4:	a7 e3       	ldi	r26, 0x37	; 55
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	90 81       	ld	r25, Z
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	89 2b       	or	r24, r25
    15c2:	8c 93       	st	X, r24
    15c4:	2d c0       	rjmp	.+90     	; 0x1620 <gpioPinDirection+0x10a>
		}
		break;
	case 2:
		if(u8_direction == INPUT)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	88 23       	and	r24, r24
    15ca:	59 f4       	brne	.+22     	; 0x15e2 <gpioPinDirection+0xcc>
		{
			PORTC_DIR &= ~(u8_pins);
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	98 2f       	mov	r25, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 95       	com	r24
    15dc:	89 23       	and	r24, r25
    15de:	8c 93       	st	X, r24
    15e0:	1f c0       	rjmp	.+62     	; 0x1620 <gpioPinDirection+0x10a>
		}
		else
		{
			PORTC_DIR |= u8_pins;
    15e2:	a4 e3       	ldi	r26, 0x34	; 52
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e3       	ldi	r30, 0x34	; 52
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	90 81       	ld	r25, Z
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	89 2b       	or	r24, r25
    15f0:	8c 93       	st	X, r24
    15f2:	16 c0       	rjmp	.+44     	; 0x1620 <gpioPinDirection+0x10a>
		}
		break;

	case 3:
		if(u8_direction == INPUT)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 23       	and	r24, r24
    15f8:	59 f4       	brne	.+22     	; 0x1610 <gpioPinDirection+0xfa>
		{
			PORTD_DIR &= ~(u8_pins);
    15fa:	a1 e3       	ldi	r26, 0x31	; 49
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e1 e3       	ldi	r30, 0x31	; 49
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	98 2f       	mov	r25, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 95       	com	r24
    160a:	89 23       	and	r24, r25
    160c:	8c 93       	st	X, r24
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <gpioPinDirection+0x10a>
		}
		else
		{
			PORTD_DIR |= u8_pins;
    1610:	a1 e3       	ldi	r26, 0x31	; 49
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e1 e3       	ldi	r30, 0x31	; 49
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	90 81       	ld	r25, Z
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	89 2b       	or	r24, r25
    161e:	8c 93       	st	X, r24
		}
		break;

	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <gpioPinWrite>:
 * example: gpioPinWrite(PORTA_DATA, BIT3,BIT3);
 * to write 0 send LOW as u8_value and pins numbers as u8_pins
 * example: gpioPinWrite(PORTA_DATA, BIT3,LOW);
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <gpioPinWrite+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <gpioPinWrite+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
    1642:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3d 83       	std	Y+5, r19	; 0x05
    164c:	2c 83       	std	Y+4, r18	; 0x04
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	41 f1       	breq	.+80     	; 0x16a8 <gpioPinWrite+0x78>
    1658:	2c 81       	ldd	r18, Y+4	; 0x04
    165a:	3d 81       	ldd	r19, Y+5	; 0x05
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	2c f4       	brge	.+10     	; 0x166c <gpioPinWrite+0x3c>
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	61 f0       	breq	.+24     	; 0x1682 <gpioPinWrite+0x52>
    166a:	56 c0       	rjmp	.+172    	; 0x1718 <gpioPinWrite+0xe8>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	61 f1       	breq	.+88     	; 0x16ce <gpioPinWrite+0x9e>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	d1 f1       	breq	.+116    	; 0x16f4 <gpioPinWrite+0xc4>
    1680:	4b c0       	rjmp	.+150    	; 0x1718 <gpioPinWrite+0xe8>
	{
	case 0:
			PORTA_DATA &= ~(u8_pins);
    1682:	ab e3       	ldi	r26, 0x3B	; 59
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	eb e3       	ldi	r30, 0x3B	; 59
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	98 2f       	mov	r25, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 95       	com	r24
    1692:	89 23       	and	r24, r25
    1694:	8c 93       	st	X, r24
			PORTA_DATA |= u8_value;
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	90 81       	ld	r25, Z
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	89 2b       	or	r24, r25
    16a4:	8c 93       	st	X, r24
    16a6:	38 c0       	rjmp	.+112    	; 0x1718 <gpioPinWrite+0xe8>

		break;

	case 1:
			PORTB_DATA &= ~(u8_pins);
    16a8:	a8 e3       	ldi	r26, 0x38	; 56
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	98 2f       	mov	r25, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 95       	com	r24
    16b8:	89 23       	and	r24, r25
    16ba:	8c 93       	st	X, r24
			PORTB_DATA |= u8_value;
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	90 81       	ld	r25, Z
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	89 2b       	or	r24, r25
    16ca:	8c 93       	st	X, r24
    16cc:	25 c0       	rjmp	.+74     	; 0x1718 <gpioPinWrite+0xe8>
		break;

	case 2:
			PORTC_DATA &= ~(u8_pins);
    16ce:	a5 e3       	ldi	r26, 0x35	; 53
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	98 2f       	mov	r25, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 95       	com	r24
    16de:	89 23       	and	r24, r25
    16e0:	8c 93       	st	X, r24
			PORTC_DATA |= u8_value;
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	90 81       	ld	r25, Z
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	89 2b       	or	r24, r25
    16f0:	8c 93       	st	X, r24
    16f2:	12 c0       	rjmp	.+36     	; 0x1718 <gpioPinWrite+0xe8>
		break;

	case 3:
			PORTD_DATA &= ~(u8_pins);
    16f4:	a2 e3       	ldi	r26, 0x32	; 50
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e2 e3       	ldi	r30, 0x32	; 50
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	98 2f       	mov	r25, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 95       	com	r24
    1704:	89 23       	and	r24, r25
    1706:	8c 93       	st	X, r24
			PORTD_DATA |= u8_value;
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	89 2b       	or	r24, r25
    1716:	8c 93       	st	X, r24
		break;

	}
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <gpioPinToggle+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <gpioPinToggle+0x8>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3c 83       	std	Y+4, r19	; 0x04
    1740:	2b 83       	std	Y+3, r18	; 0x03
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	f1 f0       	breq	.+60     	; 0x1788 <gpioPinToggle+0x60>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	2c f4       	brge	.+10     	; 0x1760 <gpioPinToggle+0x38>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	61 f0       	breq	.+24     	; 0x1776 <gpioPinToggle+0x4e>
    175e:	2e c0       	rjmp	.+92     	; 0x17bc <gpioPinToggle+0x94>
    1760:	2b 81       	ldd	r18, Y+3	; 0x03
    1762:	3c 81       	ldd	r19, Y+4	; 0x04
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	c1 f0       	breq	.+48     	; 0x179a <gpioPinToggle+0x72>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	e1 f0       	breq	.+56     	; 0x17ac <gpioPinToggle+0x84>
    1774:	23 c0       	rjmp	.+70     	; 0x17bc <gpioPinToggle+0x94>
	{
	case 0:
			PORTA_DATA ^= u8_pins;
    1776:	ab e3       	ldi	r26, 0x3B	; 59
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	90 81       	ld	r25, Z
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	89 27       	eor	r24, r25
    1784:	8c 93       	st	X, r24
    1786:	1a c0       	rjmp	.+52     	; 0x17bc <gpioPinToggle+0x94>
		break;

	case 1:
			PORTB_DATA ^= (u8_pins);
    1788:	a8 e3       	ldi	r26, 0x38	; 56
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e3       	ldi	r30, 0x38	; 56
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	90 81       	ld	r25, Z
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	89 27       	eor	r24, r25
    1796:	8c 93       	st	X, r24
    1798:	11 c0       	rjmp	.+34     	; 0x17bc <gpioPinToggle+0x94>
		break;
	case 2:
			PORTC_DATA ^= (u8_pins);
    179a:	a5 e3       	ldi	r26, 0x35	; 53
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	90 81       	ld	r25, Z
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	89 27       	eor	r24, r25
    17a8:	8c 93       	st	X, r24
    17aa:	08 c0       	rjmp	.+16     	; 0x17bc <gpioPinToggle+0x94>
		break;

	case 3:
			PORTD_DATA ^= (u8_pins);
    17ac:	a2 e3       	ldi	r26, 0x32	; 50
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	90 81       	ld	r25, Z
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	89 27       	eor	r24, r25
    17ba:	8c 93       	st	X, r24
		break;

	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <gpioPinRead+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <gpioPinRead+0x8>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t data;
	switch(u8_port)
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	3d 83       	std	Y+5, r19	; 0x05
    17e4:	2c 83       	std	Y+4, r18	; 0x04
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	e1 f0       	breq	.+56     	; 0x1828 <gpioPinRead+0x5e>
    17f0:	2c 81       	ldd	r18, Y+4	; 0x04
    17f2:	3d 81       	ldd	r19, Y+5	; 0x05
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	2c f4       	brge	.+10     	; 0x1804 <gpioPinRead+0x3a>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 f0       	breq	.+24     	; 0x181a <gpioPinRead+0x50>
    1802:	26 c0       	rjmp	.+76     	; 0x1850 <gpioPinRead+0x86>
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	a1 f0       	breq	.+40     	; 0x1836 <gpioPinRead+0x6c>
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	b1 f0       	breq	.+44     	; 0x1844 <gpioPinRead+0x7a>
    1818:	1b c0       	rjmp	.+54     	; 0x1850 <gpioPinRead+0x86>
	{
	case 0:
		data= (PORTA_PIN & u8_pin);
    181a:	e9 e3       	ldi	r30, 0x39	; 57
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	90 81       	ld	r25, Z
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	89 23       	and	r24, r25
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <gpioPinRead+0x86>
		break;

	case 1:
		data= (PORTB_PIN & u8_pin);
    1828:	e6 e3       	ldi	r30, 0x36	; 54
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	90 81       	ld	r25, Z
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	89 23       	and	r24, r25
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <gpioPinRead+0x86>
		break;

	case 2:
		data= (PORTC_PIN & u8_pin);
    1836:	e3 e3       	ldi	r30, 0x33	; 51
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	90 81       	ld	r25, Z
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	89 23       	and	r24, r25
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <gpioPinRead+0x86>
		break;
	case 3:
		data= (PORTD_PIN & u8_pin);
    1844:	e0 e3       	ldi	r30, 0x30	; 48
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	90 81       	ld	r25, Z
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	89 23       	and	r24, r25
    184e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(data!=LOW)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	88 23       	and	r24, r24
    1854:	11 f0       	breq	.+4      	; 0x185a <gpioPinRead+0x90>
	{
		data=HIGH;
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <__vector_10>:
	TCNT0=6;
}
*/

ISR(TIMER0_COMP_vect)
{
    186c:	1f 92       	push	r1
    186e:	0f 92       	push	r0
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	0f 92       	push	r0
    1874:	11 24       	eor	r1, r1
    1876:	2f 93       	push	r18
    1878:	3f 93       	push	r19
    187a:	4f 93       	push	r20
    187c:	5f 93       	push	r21
    187e:	6f 93       	push	r22
    1880:	7f 93       	push	r23
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	Led_On(LED_0);
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Led_On>
	gpioPinWrite(GPIOD, BIT4,BIT4);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	60 e1       	ldi	r22, 0x10	; 16
    18a0:	40 e1       	ldi	r20, 0x10	; 16
    18a2:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
	gpioPinWrite(GPIOD, BIT5,BIT5);
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	60 e2       	ldi	r22, 0x20	; 32
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	Led_Off(LED_0);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Off>
	gpioPinWrite(GPIOD, BIT4,LOW);
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	60 e1       	ldi	r22, 0x10	; 16
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
	gpioPinWrite(GPIOD, BIT5,LOW);
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	60 e2       	ldi	r22, 0x20	; 32
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
	TCNT0=100;
    191a:	e2 e5       	ldi	r30, 0x52	; 82
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	84 e6       	ldi	r24, 0x64	; 100
    1920:	80 83       	st	Z, r24
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	ff 91       	pop	r31
    1928:	ef 91       	pop	r30
    192a:	bf 91       	pop	r27
    192c:	af 91       	pop	r26
    192e:	9f 91       	pop	r25
    1930:	8f 91       	pop	r24
    1932:	7f 91       	pop	r23
    1934:	6f 91       	pop	r22
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	1f 90       	pop	r1
    1946:	18 95       	reti

00001948 <INT0_Init>:

/************************INT0*****************************************/
void INT0_Init(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    1950:	f8 94       	cli
	GICR  |= (1<<INT0);                 /* Enable external interrupt pin INT0*/
    1952:	ab e5       	ldi	r26, 0x5B	; 91
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e5       	ldi	r30, 0x5B	; 91
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 64       	ori	r24, 0x40	; 64
    195e:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    1960:	a5 e5       	ldi	r26, 0x55	; 85
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 e5       	ldi	r30, 0x55	; 85
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	83 60       	ori	r24, 0x03	; 3
    196c:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    196e:	78 94       	sei
}
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <__vector_1>:


ISR(INT0_vect)
{
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	8f 93       	push	r24
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	g8_interrupt_zero_flag=1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 93 68 01 	sts	0x0168, r24
	//Led_On(LED_1);
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	8f 91       	pop	r24
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	0f 90       	pop	r0
    199c:	1f 90       	pop	r1
    199e:	18 95       	reti

000019a0 <Led_Init>:
#include "led.h"
void Led_Init(En_LedNumber_t en_led_id)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <Led_Init+0x6>
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3b 83       	std	Y+3, r19	; 0x03
    19b6:	2a 83       	std	Y+2, r18	; 0x02
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	01 f1       	breq	.+64     	; 0x1a02 <Led_Init+0x62>
    19c2:	2a 81       	ldd	r18, Y+2	; 0x02
    19c4:	3b 81       	ldd	r19, Y+3	; 0x03
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <Led_Init+0x36>
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 f0       	breq	.+24     	; 0x19ec <Led_Init+0x4c>
    19d4:	36 c0       	rjmp	.+108    	; 0x1a42 <Led_Init+0xa2>
    19d6:	2a 81       	ldd	r18, Y+2	; 0x02
    19d8:	3b 81       	ldd	r19, Y+3	; 0x03
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	e1 f0       	breq	.+56     	; 0x1a18 <Led_Init+0x78>
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	9b 81       	ldd	r25, Y+3	; 0x03
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	11 f1       	breq	.+68     	; 0x1a2e <Led_Init+0x8e>
    19ea:	2b c0       	rjmp	.+86     	; 0x1a42 <Led_Init+0xa2>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	4f ef       	ldi	r20, 0xFF	; 255
    19f2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1a00:	20 c0       	rjmp	.+64     	; 0x1a42 <Led_Init+0xa2>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	4f ef       	ldi	r20, 0xFF	; 255
    1a08:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1a16:	15 c0       	rjmp	.+42     	; 0x1a42 <Led_Init+0xa2>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	4f ef       	ldi	r20, 0xFF	; 255
    1a1e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	64 e0       	ldi	r22, 0x04	; 4
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1a2c:	0a c0       	rjmp	.+20     	; 0x1a42 <Led_Init+0xa2>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	68 e0       	ldi	r22, 0x08	; 8
    1a32:	4f ef       	ldi	r20, 0xFF	; 255
    1a34:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	68 e0       	ldi	r22, 0x08	; 8
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;

	}
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <Led_On+0x6>
    1a54:	0f 92       	push	r0
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	3b 83       	std	Y+3, r19	; 0x03
    1a64:	2a 83       	std	Y+2, r18	; 0x02
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	d9 f0       	breq	.+54     	; 0x1aa6 <Led_On+0x58>
    1a70:	2a 81       	ldd	r18, Y+2	; 0x02
    1a72:	3b 81       	ldd	r19, Y+3	; 0x03
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <Led_On+0x36>
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	61 f0       	breq	.+24     	; 0x1a9a <Led_On+0x4c>
    1a82:	22 c0       	rjmp	.+68     	; 0x1ac8 <Led_On+0x7a>
    1a84:	2a 81       	ldd	r18, Y+2	; 0x02
    1a86:	3b 81       	ldd	r19, Y+3	; 0x03
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	91 f0       	breq	.+36     	; 0x1ab2 <Led_On+0x64>
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	9b 81       	ldd	r25, Y+3	; 0x03
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	91 05       	cpc	r25, r1
    1a96:	99 f0       	breq	.+38     	; 0x1abe <Led_On+0x70>
    1a98:	17 c0       	rjmp	.+46     	; 0x1ac8 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LED_0_BIT);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1aa4:	11 c0       	rjmp	.+34     	; 0x1ac8 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LED_1_BIT);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	42 e0       	ldi	r20, 0x02	; 2
    1aac:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1ab0:	0b c0       	rjmp	.+22     	; 0x1ac8 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LED_2_BIT);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	64 e0       	ldi	r22, 0x04	; 4
    1ab6:	44 e0       	ldi	r20, 0x04	; 4
    1ab8:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LED_3_BIT);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	68 e0       	ldi	r22, 0x08	; 8
    1ac2:	48 e0       	ldi	r20, 0x08	; 8
    1ac4:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;

	}
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <Led_Off+0x6>
    1ada:	0f 92       	push	r0
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3b 83       	std	Y+3, r19	; 0x03
    1aea:	2a 83       	std	Y+2, r18	; 0x02
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	91 05       	cpc	r25, r1
    1af4:	d9 f0       	breq	.+54     	; 0x1b2c <Led_Off+0x58>
    1af6:	2a 81       	ldd	r18, Y+2	; 0x02
    1af8:	3b 81       	ldd	r19, Y+3	; 0x03
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <Led_Off+0x36>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	61 f0       	breq	.+24     	; 0x1b20 <Led_Off+0x4c>
    1b08:	22 c0       	rjmp	.+68     	; 0x1b4e <Led_Off+0x7a>
    1b0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	91 f0       	breq	.+36     	; 0x1b38 <Led_Off+0x64>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	99 f0       	breq	.+38     	; 0x1b44 <Led_Off+0x70>
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1b2a:	11 c0       	rjmp	.+34     	; 0x1b4e <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1b36:	0b c0       	rjmp	.+22     	; 0x1b4e <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	68 e0       	ldi	r22, 0x08	; 8
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;

	}
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <Led_Toggle+0x6>
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	89 83       	std	Y+1, r24	; 0x01
	gpioPinToggle(PORTB_DATA, en_led_id);
    1b68:	e8 e3       	ldi	r30, 0x38	; 56
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	69 81       	ldd	r22, Y+1	; 0x01
    1b70:	0e 94 94 0b 	call	0x1728	; 0x1728 <gpioPinToggle>
	switch(en_led_id)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3b 83       	std	Y+3, r19	; 0x03
    1b7c:	2a 83       	std	Y+2, r18	; 0x02
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	d1 f0       	breq	.+52     	; 0x1bbc <Led_Toggle+0x62>
    1b88:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <Led_Toggle+0x42>
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <Led_Toggle+0x58>
    1b9a:	1e c0       	rjmp	.+60     	; 0x1bd8 <Led_Toggle+0x7e>
    1b9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9e:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	81 f0       	breq	.+32     	; 0x1bc6 <Led_Toggle+0x6c>
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	81 f0       	breq	.+32     	; 0x1bd0 <Led_Toggle+0x76>
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <Led_Toggle+0x7e>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 94 0b 	call	0x1728	; 0x1728 <gpioPinToggle>
    1bba:	0e c0       	rjmp	.+28     	; 0x1bd8 <Led_Toggle+0x7e>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	62 e0       	ldi	r22, 0x02	; 2
    1bc0:	0e 94 94 0b 	call	0x1728	; 0x1728 <gpioPinToggle>
    1bc4:	09 c0       	rjmp	.+18     	; 0x1bd8 <Led_Toggle+0x7e>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	64 e0       	ldi	r22, 0x04	; 4
    1bca:	0e 94 94 0b 	call	0x1728	; 0x1728 <gpioPinToggle>
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <Led_Toggle+0x7e>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	68 e0       	ldi	r22, 0x08	; 8
    1bd4:	0e 94 94 0b 	call	0x1728	; 0x1728 <gpioPinToggle>
		break;

	}
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <main>:
#include "interrupt.h"
#include "led.h"
//uint8_t g8_gloabal_car_duty;

int main()
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	Led_On(LED_0);
	MotorDC_Speed_PollingWithT0(50);
	*/
	while(1)
	{
		car_application();
    1bec:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <car_application>
    1bf0:	fd cf       	rjmp	.-6      	; 0x1bec <main+0x8>

00001bf2 <pushButtonInit>:
#include "pushButton.h"
void pushButtonInit(En_buttonId_t en_butotn_id)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <pushButtonInit+0x6>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	switch(en_butotn_id)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3b 83       	std	Y+3, r19	; 0x03
    1c08:	2a 83       	std	Y+2, r18	; 0x02
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	91 05       	cpc	r25, r1
    1c12:	31 f1       	breq	.+76     	; 0x1c60 <pushButtonInit+0x6e>
    1c14:	2a 81       	ldd	r18, Y+2	; 0x02
    1c16:	3b 81       	ldd	r19, Y+3	; 0x03
    1c18:	23 30       	cpi	r18, 0x03	; 3
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	54 f4       	brge	.+20     	; 0x1c32 <pushButtonInit+0x40>
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	89 f0       	breq	.+34     	; 0x1c48 <pushButtonInit+0x56>
    1c26:	2a 81       	ldd	r18, Y+2	; 0x02
    1c28:	3b 81       	ldd	r19, Y+3	; 0x03
    1c2a:	21 30       	cpi	r18, 0x01	; 1
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	91 f0       	breq	.+36     	; 0x1c54 <pushButtonInit+0x62>
    1c30:	28 c0       	rjmp	.+80     	; 0x1c82 <pushButtonInit+0x90>
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	c1 f0       	breq	.+48     	; 0x1c6c <pushButtonInit+0x7a>
    1c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c40:	24 30       	cpi	r18, 0x04	; 4
    1c42:	31 05       	cpc	r19, r1
    1c44:	c9 f0       	breq	.+50     	; 0x1c78 <pushButtonInit+0x86>
    1c46:	1d c0       	rjmp	.+58     	; 0x1c82 <pushButtonInit+0x90>
	{
		case BTN_0:
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	60 e1       	ldi	r22, 0x10	; 16
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
    1c52:	17 c0       	rjmp	.+46     	; 0x1c82 <pushButtonInit+0x90>
			break;
		case BTN_1:
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	64 e0       	ldi	r22, 0x04	; 4
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
    1c5e:	11 c0       	rjmp	.+34     	; 0x1c82 <pushButtonInit+0x90>
			break;
		case BTN_2:
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	64 e0       	ldi	r22, 0x04	; 4
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <pushButtonInit+0x90>
			break;
		case BTN_3:
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	68 e0       	ldi	r22, 0x08	; 8
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <pushButtonInit+0x90>
			break;
		case BTN_4_INT0:
			gpioPinDirection(GPIOD, BIT2, INPUT);
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	64 e0       	ldi	r22, 0x04	; 4
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
			break;
	}
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <pushButtonGetStatus+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <pushButtonGetStatus+0x8>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char current_status=0;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
	switch(en_butotn_id)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	3c 83       	std	Y+4, r19	; 0x04
    1ca6:	2b 83       	std	Y+3, r18	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <pushButtonGetStatus+0x26>
    1cb2:	50 c0       	rjmp	.+160    	; 0x1d54 <pushButtonGetStatus+0xc6>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	23 30       	cpi	r18, 0x03	; 3
    1cba:	31 05       	cpc	r19, r1
    1cbc:	54 f4       	brge	.+20     	; 0x1cd2 <pushButtonGetStatus+0x44>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	99 f0       	breq	.+38     	; 0x1cec <pushButtonGetStatus+0x5e>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	21 30       	cpi	r18, 0x01	; 1
    1ccc:	31 05       	cpc	r19, r1
    1cce:	41 f1       	breq	.+80     	; 0x1d20 <pushButtonGetStatus+0x92>
    1cd0:	89 c0       	rjmp	.+274    	; 0x1de4 <pushButtonGetStatus+0x156>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	91 05       	cpc	r25, r1
    1cda:	09 f4       	brne	.+2      	; 0x1cde <pushButtonGetStatus+0x50>
    1cdc:	54 c0       	rjmp	.+168    	; 0x1d86 <pushButtonGetStatus+0xf8>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	24 30       	cpi	r18, 0x04	; 4
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <pushButtonGetStatus+0x5c>
    1ce8:	66 c0       	rjmp	.+204    	; 0x1db6 <pushButtonGetStatus+0x128>
    1cea:	7c c0       	rjmp	.+248    	; 0x1de4 <pushButtonGetStatus+0x156>
	{
		case BTN_0:
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	60 e1       	ldi	r22, 0x10	; 16
    1cf0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <pushButtonGetStatus+0x6c>
    1cf8:	75 c0       	rjmp	.+234    	; 0x1de4 <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    1cfa:	6e e1       	ldi	r22, 0x1E	; 30
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	60 e1       	ldi	r22, 0x10	; 16
    1d0a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <pushButtonGetStatus+0x86>
    1d12:	68 c0       	rjmp	.+208    	; 0x1de4 <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	60 e1       	ldi	r22, 0x10	; 16
    1d18:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	62 c0       	rjmp	.+196    	; 0x1de4 <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_1:
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <pushButtonGetStatus+0xa0>
    1d2c:	5b c0       	rjmp	.+182    	; 0x1de4 <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    1d2e:	6e e1       	ldi	r22, 0x1E	; 30
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	64 e0       	ldi	r22, 0x04	; 4
    1d3e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d42:	88 23       	and	r24, r24
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <pushButtonGetStatus+0xba>
    1d46:	4e c0       	rjmp	.+156    	; 0x1de4 <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	48 c0       	rjmp	.+144    	; 0x1de4 <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_2:
			if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	64 e0       	ldi	r22, 0x04	; 4
    1d58:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d5c:	88 23       	and	r24, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <pushButtonGetStatus+0xd4>
    1d60:	41 c0       	rjmp	.+130    	; 0x1de4 <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    1d62:	6e e1       	ldi	r22, 0x1E	; 30
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d76:	88 23       	and	r24, r24
    1d78:	a9 f1       	breq	.+106    	; 0x1de4 <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	64 e0       	ldi	r22, 0x04	; 4
    1d7e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	2f c0       	rjmp	.+94     	; 0x1de4 <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_3:
			if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	68 e0       	ldi	r22, 0x08	; 8
    1d8a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1d8e:	88 23       	and	r24, r24
    1d90:	49 f1       	breq	.+82     	; 0x1de4 <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    1d92:	6e e1       	ldi	r22, 0x1E	; 30
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	68 e0       	ldi	r22, 0x08	; 8
    1da2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1da6:	88 23       	and	r24, r24
    1da8:	e9 f0       	breq	.+58     	; 0x1de4 <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	68 e0       	ldi	r22, 0x08	; 8
    1dae:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	17 c0       	rjmp	.+46     	; 0x1de4 <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_4_INT0:
			if(gpioPinRead(GPIOD, BIT2))
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	64 e0       	ldi	r22, 0x04	; 4
    1dba:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1dbe:	88 23       	and	r24, r24
    1dc0:	89 f0       	breq	.+34     	; 0x1de4 <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    1dc2:	6e e1       	ldi	r22, 0x1E	; 30
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(GPIOD, BIT2))
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	64 e0       	ldi	r22, 0x04	; 4
    1dd2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1dd6:	88 23       	and	r24, r24
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(GPIOD, BIT2);
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	64 e0       	ldi	r22, 0x04	; 4
    1dde:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <gpioPinRead>
    1de2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			break;

	}
	return current_status;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <sevenSegInit>:
#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <sevenSegInit+0x6>
    1dfa:	0f 92       	push	r0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
	switch (a_segment_id)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	3b 83       	std	Y+3, r19	; 0x03
    1e0a:	2a 83       	std	Y+2, r18	; 0x02
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	31 f0       	breq	.+12     	; 0x1e20 <sevenSegInit+0x2c>
    1e14:	2a 81       	ldd	r18, Y+2	; 0x02
    1e16:	3b 81       	ldd	r19, Y+3	; 0x03
    1e18:	21 30       	cpi	r18, 0x01	; 1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	b1 f0       	breq	.+44     	; 0x1e4a <sevenSegInit+0x56>
    1e1e:	29 c0       	rjmp	.+82     	; 0x1e72 <sevenSegInit+0x7e>
	{
	case SEG_0:
		gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	6f e0       	ldi	r22, 0x0F	; 15
    1e24:	4f ef       	ldi	r20, 0xFF	; 255
    1e26:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	6f e0       	ldi	r22, 0x0F	; 15
    1e2e:	4f e0       	ldi	r20, 0x0F	; 15
    1e30:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT,OUTPUT);
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	64 e0       	ldi	r22, 0x04	; 4
    1e38:	4f ef       	ldi	r20, 0xFF	; 255
    1e3a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	44 e0       	ldi	r20, 0x04	; 4
    1e44:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <sevenSegInit+0x7e>
		break;
	case SEG_1:
		gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS,OUTPUT);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	6f e0       	ldi	r22, 0x0F	; 15
    1e4e:	4f ef       	ldi	r20, 0xFF	; 255
    1e50:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	6f e0       	ldi	r22, 0x0F	; 15
    1e58:	4f e0       	ldi	r20, 0x0F	; 15
    1e5a:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT,OUTPUT);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	68 e0       	ldi	r22, 0x08	; 8
    1e62:	4f ef       	ldi	r20, 0xFF	; 255
    1e64:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpioPinDirection>
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	68 e0       	ldi	r22, 0x08	; 8
    1e6c:	48 e0       	ldi	r20, 0x08	; 8
    1e6e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;
	}
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <sevenSegEnable>:


void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <sevenSegEnable+0x6>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3b 83       	std	Y+3, r19	; 0x03
    1e94:	2a 83       	std	Y+2, r18	; 0x02
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <sevenSegEnable+0x2c>
    1e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea2:	21 30       	cpi	r18, 0x01	; 1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	39 f0       	breq	.+14     	; 0x1eb6 <sevenSegEnable+0x38>
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <sevenSegEnable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    1eaa:	83 e0       	ldi	r24, 0x03	; 3
    1eac:	64 e0       	ldi	r22, 0x04	; 4
    1eae:	44 e0       	ldi	r20, 0x04	; 4
    1eb0:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <sevenSegEnable+0x42>
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	68 e0       	ldi	r22, 0x08	; 8
    1eba:	48 e0       	ldi	r20, 0x08	; 8
    1ebc:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;
	}
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <sevenSegDisable+0x6>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3b 83       	std	Y+3, r19	; 0x03
    1ee2:	2a 83       	std	Y+2, r18	; 0x02
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	31 f0       	breq	.+12     	; 0x1ef8 <sevenSegDisable+0x2c>
    1eec:	2a 81       	ldd	r18, Y+2	; 0x02
    1eee:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef0:	21 30       	cpi	r18, 0x01	; 1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <sevenSegDisable+0x38>
    1ef6:	0b c0       	rjmp	.+22     	; 0x1f0e <sevenSegDisable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, LOW);
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	64 e0       	ldi	r22, 0x04	; 4
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <sevenSegDisable+0x42>
		/*here I send LOW as a value because it will be ORed by the way
		 * with the port value in "gpioPinWrite" function
		 */
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, LOW);
    1f04:	83 e0       	ldi	r24, 0x03	; 3
    1f06:	68 e0       	ldi	r22, 0x08	; 8
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;
	}
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <sevenSegWrite+0x6>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <sevenSegWrite+0x8>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	6a 83       	std	Y+2, r22	; 0x02
	switch (en_segment_id)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3c 83       	std	Y+4, r19	; 0x04
    1f32:	2b 83       	std	Y+3, r18	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <sevenSegWrite+0x2e>
    1f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f40:	21 30       	cpi	r18, 0x01	; 1
    1f42:	31 05       	cpc	r19, r1
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <sevenSegWrite+0x44>
    1f46:	15 c0       	rjmp	.+42     	; 0x1f72 <sevenSegWrite+0x58>
	{
	case SEG_0:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	6f e0       	ldi	r22, 0x0F	; 15
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	6f e0       	ldi	r22, 0x0F	; 15
    1f56:	4a 81       	ldd	r20, Y+2	; 0x02
    1f58:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
    1f5c:	0a c0       	rjmp	.+20     	; 0x1f72 <sevenSegWrite+0x58>
		break;
	case SEG_1:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	6f e0       	ldi	r22, 0x0F	; 15
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	6f e0       	ldi	r22, 0x0F	; 15
    1f6c:	4a 81       	ldd	r20, Y+2	; 0x02
    1f6e:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpioPinWrite>
		break;
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <softwareDelayMs>:
#include "softwareDelay.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	2c 97       	sbiw	r28, 0x0c	; 12
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	69 87       	std	Y+9, r22	; 0x09
    1f96:	7a 87       	std	Y+10, r23	; 0x0a
    1f98:	8b 87       	std	Y+11, r24	; 0x0b
    1f9a:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    1f9c:	1d 82       	std	Y+5, r1	; 0x05
    1f9e:	1e 82       	std	Y+6, r1	; 0x06
    1fa0:	1f 82       	std	Y+7, r1	; 0x07
    1fa2:	18 86       	std	Y+8, r1	; 0x08
    1fa4:	27 c0       	rjmp	.+78     	; 0x1ff4 <softwareDelayMs+0x74>
    {
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    1fa6:	19 82       	std	Y+1, r1	; 0x01
    1fa8:	1a 82       	std	Y+2, r1	; 0x02
    1faa:	1b 82       	std	Y+3, r1	; 0x03
    1fac:	1c 82       	std	Y+4, r1	; 0x04
    1fae:	0b c0       	rjmp	.+22     	; 0x1fc6 <softwareDelayMs+0x46>
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	b1 1d       	adc	r27, r1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	ab 83       	std	Y+3, r26	; 0x03
    1fc4:	bc 83       	std	Y+4, r27	; 0x04
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	ab 81       	ldd	r26, Y+3	; 0x03
    1fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fce:	81 3b       	cpi	r24, 0xB1	; 177
    1fd0:	21 e0       	ldi	r18, 0x01	; 1
    1fd2:	92 07       	cpc	r25, r18
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	a2 07       	cpc	r26, r18
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	b2 07       	cpc	r27, r18
    1fdc:	48 f3       	brcs	.-46     	; 0x1fb0 <softwareDelayMs+0x30>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	af 81       	ldd	r26, Y+7	; 0x07
    1fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	b1 1d       	adc	r27, r1
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	af 83       	std	Y+7, r26	; 0x07
    1ff2:	b8 87       	std	Y+8, r27	; 0x08
    1ff4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ff8:	4f 81       	ldd	r20, Y+7	; 0x07
    1ffa:	58 85       	ldd	r21, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	ab 85       	ldd	r26, Y+11	; 0x0b
    2002:	bc 85       	ldd	r27, Y+12	; 0x0c
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	4a 07       	cpc	r20, r26
    200a:	5b 07       	cpc	r21, r27
    200c:	60 f2       	brcs	.-104    	; 0x1fa6 <softwareDelayMs+0x26>
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    	{

    	}
    }
}
    200e:	2c 96       	adiw	r28, 0x0c	; 12
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <timer0Init>:
volatile uint8_t g8_off_time;
#define TIMER_ICR1_TOP_VALUE 2499
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,
		En_timer0perscaler_t en_prescal, uint8_t u8_initialValue,
		uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    2020:	ef 92       	push	r14
    2022:	0f 93       	push	r16
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	28 97       	sbiw	r28, 0x08	; 8
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	6a 83       	std	Y+2, r22	; 0x02
    203c:	4b 83       	std	Y+3, r20	; 0x03
    203e:	2c 83       	std	Y+4, r18	; 0x04
    2040:	0d 83       	std	Y+5, r16	; 0x05
    2042:	ee 82       	std	Y+6, r14	; 0x06

	switch (en_mode)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	38 87       	std	Y+8, r19	; 0x08
    204c:	2f 83       	std	Y+7, r18	; 0x07
    204e:	8f 81       	ldd	r24, Y+7	; 0x07
    2050:	98 85       	ldd	r25, Y+8	; 0x08
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	31 f0       	breq	.+12     	; 0x2062 <timer0Init+0x42>
    2056:	2f 81       	ldd	r18, Y+7	; 0x07
    2058:	38 85       	ldd	r19, Y+8	; 0x08
    205a:	28 30       	cpi	r18, 0x08	; 8
    205c:	31 05       	cpc	r19, r1
    205e:	a9 f0       	breq	.+42     	; 0x208a <timer0Init+0x6a>
    2060:	27 c0       	rjmp	.+78     	; 0x20b0 <timer0Init+0x90>
	{
	case T0_NORMAL_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    2062:	e2 e5       	ldi	r30, 0x52	; 82
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8c 81       	ldd	r24, Y+4	; 0x04
    2068:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    206a:	e9 e5       	ldi	r30, 0x59	; 89
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8e 81       	ldd	r24, Y+6	; 0x06
    2070:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare;
    2072:	ec e5       	ldi	r30, 0x5C	; 92
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0 = en_prescal | en_OC0 | (1<<FOC0);   /*I made switch case because of FOC0 will be disabled to zero in the PWM mode*/
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	89 2b       	or	r24, r25
    2084:	80 68       	ori	r24, 0x80	; 128
    2086:	80 83       	st	Z, r24
    2088:	13 c0       	rjmp	.+38     	; 0x20b0 <timer0Init+0x90>
		break;

	case T0_COMP_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    208a:	e2 e5       	ldi	r30, 0x52	; 82
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare; /*set the compare value*/
    2092:	ec e5       	ldi	r30, 0x5C	; 92
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    209a:	e9 e5       	ldi	r30, 0x59	; 89
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0= en_prescal | en_OC0 | (1<<FOC0);
    20a2:	e3 e5       	ldi	r30, 0x53	; 83
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	89 2b       	or	r24, r25
    20ac:	80 68       	ori	r24, 0x80	; 128
    20ae:	80 83       	st	Z, r24
		break;
	}
}
    20b0:	28 96       	adiw	r28, 0x08	; 8
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	0f 91       	pop	r16
    20c2:	ef 90       	pop	r14
    20c4:	08 95       	ret

000020c6 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	0f 92       	push	r0
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8_value;
    20d2:	e2 e5       	ldi	r30, 0x52	; 82
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	80 83       	st	Z, r24
}
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <timer0Read>:

uint8_t timer0Read(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t TCNT0_value=TCNT0;
    20ec:	e2 e5       	ldi	r30, 0x52	; 82
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	89 83       	std	Y+1, r24	; 0x01
	return TCNT0_value;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <timer0Start>:

void timer0Start(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_PRESCALER_NO;
    2106:	e3 e5       	ldi	r30, 0x53	; 83
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	80 83       	st	Z, r24
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <timer0Stop>:

void timer0Stop(void)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_NO_CLOCK;
    211c:	e3 e5       	ldi	r30, 0x53	; 83
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	10 82       	st	Z, r1
}
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    2128:	ef 92       	push	r14
    212a:	0f 93       	push	r16
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <timer0DelayMs+0xa>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
    213a:	88 e0       	ldi	r24, 0x08	; 8
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	43 e0       	ldi	r20, 0x03	; 3
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	0a ef       	ldi	r16, 0xFA	; 250
    2144:	ee 24       	eor	r14, r14
    2146:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
    214a:	18 c0       	rjmp	.+48     	; 0x217c <timer0DelayMs+0x54>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
    214c:	e8 e5       	ldi	r30, 0x58	; 88
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	82 70       	andi	r24, 0x02	; 2
    2158:	90 70       	andi	r25, 0x00	; 0
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	b9 f3       	breq	.-18     	; 0x214c <timer0DelayMs+0x24>
		SET_BIT(TIFR,OCF0);
    215e:	a8 e5       	ldi	r26, 0x58	; 88
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e8 e5       	ldi	r30, 0x58	; 88
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	8c 93       	st	X, r24
		TCNT0=0;
    216c:	e2 e5       	ldi	r30, 0x52	; 82
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
	while(u16_delay_in_ms)
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	21 f7       	brne	.-56     	; 0x214c <timer0DelayMs+0x24>
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u16_delay_in_ms--;
	}
	timer0Stop();
    2184:	0e 94 8a 10 	call	0x2114	; 0x2114 <timer0Stop>
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	0f 91       	pop	r16
    2192:	ef 90       	pop	r14
    2194:	08 95       	ret

00002196 <timer0DelayMs_with_interrupt>:

void timer0DelayMs_with_interrupt(uint16_t u16_delay_in_ms)
{
    2196:	ef 92       	push	r14
    2198:	0f 93       	push	r16
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <timer0DelayMs_with_interrupt+0xa>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    21a8:	88 e0       	ldi	r24, 0x08	; 8
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	43 e0       	ldi	r20, 0x03	; 3
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	0a ef       	ldi	r16, 0xFA	; 250
    21b2:	ee 24       	eor	r14, r14
    21b4:	68 94       	set
    21b6:	e1 f8       	bld	r14, 1
    21b8:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	0f 91       	pop	r16
    21c6:	ef 90       	pop	r14
    21c8:	08 95       	ret

000021ca <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    21ca:	ef 92       	push	r14
    21cc:	0f 93       	push	r16
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <timer0DelayUs+0xa>
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <timer0DelayUs+0xc>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	69 83       	std	Y+1, r22	; 0x01
    21dc:	7a 83       	std	Y+2, r23	; 0x02
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
    21e2:	88 e0       	ldi	r24, 0x08	; 8
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	00 e1       	ldi	r16, 0x10	; 16
    21ec:	ee 24       	eor	r14, r14
    21ee:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
    21f2:	1d c0       	rjmp	.+58     	; 0x222e <timer0DelayUs+0x64>
	while(u32_delay_in_us)
	{
		while(TCNT0<OCR0);    /*another way to check*/
    21f4:	e2 e5       	ldi	r30, 0x52	; 82
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	90 81       	ld	r25, Z
    21fa:	ec e5       	ldi	r30, 0x5C	; 92
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	98 17       	cp	r25, r24
    2202:	c0 f3       	brcs	.-16     	; 0x21f4 <timer0DelayUs+0x2a>
		SET_BIT(TIFR,OCF0);
    2204:	a8 e5       	ldi	r26, 0x58	; 88
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e5       	ldi	r30, 0x58	; 88
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	82 60       	ori	r24, 0x02	; 2
    2210:	8c 93       	st	X, r24
		TCNT0=0;
    2212:	e2 e5       	ldi	r30, 0x52	; 82
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	10 82       	st	Z, r1
		u32_delay_in_us--;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	ab 81       	ldd	r26, Y+3	; 0x03
    221e:	bc 81       	ldd	r27, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	a1 09       	sbc	r26, r1
    2224:	b1 09       	sbc	r27, r1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	ab 83       	std	Y+3, r26	; 0x03
    222c:	bc 83       	std	Y+4, r27	; 0x04

void timer0DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
	while(u32_delay_in_us)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	ab 81       	ldd	r26, Y+3	; 0x03
    2234:	bc 81       	ldd	r27, Y+4	; 0x04
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	a1 05       	cpc	r26, r1
    223a:	b1 05       	cpc	r27, r1
    223c:	d9 f6       	brne	.-74     	; 0x21f4 <timer0DelayUs+0x2a>
		while(TCNT0<OCR0);    /*another way to check*/
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer0Stop();
    223e:	0e 94 8a 10 	call	0x2114	; 0x2114 <timer0Stop>
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	0f 91       	pop	r16
    2250:	ef 90       	pop	r14
    2252:	08 95       	ret

00002254 <timer0HwPWM>:
 * in this function the PWM generated using the fast PWM mode
 * the user has to choose one of the defined frequencies
 */

void timer0HwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <timer0HwPWM+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <timer0HwPWM+0x8>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = 0; /*timer initial value*/
    2264:	e2 e5       	ldi	r30, 0x52	; 82
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    226a:	e9 e5       	ldi	r30, 0x59	; 89
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	10 82       	st	Z, r1
	OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; /*output compare value*/
    2270:	ec e5       	ldi	r30, 0x5C	; 92
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	98 2f       	mov	r25, r24
    227c:	88 27       	eor	r24, r24
    227e:	24 e6       	ldi	r18, 0x64	; 100
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__divmodhi4>
    2288:	cb 01       	movw	r24, r22
    228a:	80 83       	st	Z, r24

	switch(u8_frequency)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3c 83       	std	Y+4, r19	; 0x04
    2294:	2b 83       	std	Y+3, r18	; 0x03
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	91 05       	cpc	r25, r1
    229e:	29 f1       	breq	.+74     	; 0x22ea <timer0HwPWM+0x96>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	24 30       	cpi	r18, 0x04	; 4
    22a6:	31 05       	cpc	r19, r1
    22a8:	5c f4       	brge	.+22     	; 0x22c0 <timer0HwPWM+0x6c>
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	91 05       	cpc	r25, r1
    22b2:	89 f0       	breq	.+34     	; 0x22d6 <timer0HwPWM+0x82>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	89 f0       	breq	.+34     	; 0x22e0 <timer0HwPWM+0x8c>
    22be:	23 c0       	rjmp	.+70     	; 0x2306 <timer0HwPWM+0xb2>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	84 30       	cpi	r24, 0x04	; 4
    22c6:	91 05       	cpc	r25, r1
    22c8:	a9 f0       	breq	.+42     	; 0x22f4 <timer0HwPWM+0xa0>
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	25 30       	cpi	r18, 0x05	; 5
    22d0:	31 05       	cpc	r19, r1
    22d2:	a9 f0       	breq	.+42     	; 0x22fe <timer0HwPWM+0xaa>
    22d4:	18 c0       	rjmp	.+48     	; 0x2306 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_NO | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    22d6:	e3 e5       	ldi	r30, 0x53	; 83
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	89 e6       	ldi	r24, 0x69	; 105
    22dc:	80 83       	st	Z, r24
    22de:	13 c0       	rjmp	.+38     	; 0x2306 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_8 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    22e0:	e3 e5       	ldi	r30, 0x53	; 83
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	8a e6       	ldi	r24, 0x6A	; 106
    22e6:	80 83       	st	Z, r24
    22e8:	0e c0       	rjmp	.+28     	; 0x2306 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
			 */
			TCCR0 =T0_PRESCALER_64 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    22ea:	e3 e5       	ldi	r30, 0x53	; 83
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	8b e6       	ldi	r24, 0x6B	; 107
    22f0:	80 83       	st	Z, r24
    22f2:	09 c0       	rjmp	.+18     	; 0x2306 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_256 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    22f4:	e3 e5       	ldi	r30, 0x53	; 83
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	8c e6       	ldi	r24, 0x6C	; 108
    22fa:	80 83       	st	Z, r24
    22fc:	04 c0       	rjmp	.+8      	; 0x2306 <timer0HwPWM+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_1024 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    22fe:	e3 e5       	ldi	r30, 0x53	; 83
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	8d e6       	ldi	r24, 0x6D	; 109
    2304:	80 83       	st	Z, r24
			break;
	}
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2314:	ef 92       	push	r14
    2316:	0f 93       	push	r16
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <timer0SwPWM+0xa>
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t OCR0_TEMP=(u8_dutyCycle)*(156/100.0)+100;
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	aa 27       	eor	r26, r26
    2330:	97 fd       	sbrc	r25, 7
    2332:	a0 95       	com	r26
    2334:	ba 2f       	mov	r27, r26
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	24 e1       	ldi	r18, 0x14	; 20
    2348:	3e ea       	ldi	r19, 0xAE	; 174
    234a:	47 ec       	ldi	r20, 0xC7	; 199
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	48 ec       	ldi	r20, 0xC8	; 200
    2360:	52 e4       	ldi	r21, 0x42	; 66
    2362:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	89 83       	std	Y+1, r24	; 0x01
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,6,OCR0_TEMP,T0_INTERRUPT_NORMAL|T0_INTERRUPT_CMP);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	45 e0       	ldi	r20, 0x05	; 5
    237e:	26 e0       	ldi	r18, 0x06	; 6
    2380:	09 81       	ldd	r16, Y+1	; 0x01
    2382:	0f 2e       	mov	r0, r31
    2384:	f3 e0       	ldi	r31, 0x03	; 3
    2386:	ef 2e       	mov	r14, r31
    2388:	f0 2d       	mov	r31, r0
    238a:	0e 94 10 10 	call	0x2020	; 0x2020 <timer0Init>
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	0f 91       	pop	r16
    239a:	ef 90       	pop	r14
    239c:	08 95       	ret

0000239e <timer1Init>:

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
		En_timer1perscaler_t en_prescal, uint16_t u16_initialValue,
		uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,
		uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    239e:	af 92       	push	r10
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	2f 97       	sbiw	r28, 0x0f	; 15
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	7b 83       	std	Y+3, r23	; 0x03
    23c4:	6a 83       	std	Y+2, r22	; 0x02
    23c6:	4c 83       	std	Y+4, r20	; 0x04
    23c8:	3e 83       	std	Y+6, r19	; 0x06
    23ca:	2d 83       	std	Y+5, r18	; 0x05
    23cc:	18 87       	std	Y+8, r17	; 0x08
    23ce:	0f 83       	std	Y+7, r16	; 0x07
    23d0:	fa 86       	std	Y+10, r15	; 0x0a
    23d2:	e9 86       	std	Y+9, r14	; 0x09
    23d4:	dc 86       	std	Y+12, r13	; 0x0c
    23d6:	cb 86       	std	Y+11, r12	; 0x0b
    23d8:	ad 86       	std	Y+13, r10	; 0x0d

	switch (en_mode)
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3f 87       	std	Y+15, r19	; 0x0f
    23e2:	2e 87       	std	Y+14, r18	; 0x0e
    23e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e8:	88 30       	cpi	r24, 0x08	; 8
    23ea:	91 05       	cpc	r25, r1
    23ec:	21 f1       	breq	.+72     	; 0x2436 <timer1Init+0x98>
    23ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    23f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    23f2:	28 31       	cpi	r18, 0x18	; 24
    23f4:	31 05       	cpc	r19, r1
    23f6:	09 f4       	brne	.+2      	; 0x23fa <timer1Init+0x5c>
    23f8:	43 c0       	rjmp	.+134    	; 0x2480 <timer1Init+0xe2>
    23fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    23fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	09 f0       	breq	.+2      	; 0x2404 <timer1Init+0x66>
    2402:	62 c0       	rjmp	.+196    	; 0x24c8 <timer1Init+0x12a>
	{
	case T1_NORMAL_MODE:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2404:	ed e4       	ldi	r30, 0x4D	; 77
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	89 2f       	mov	r24, r25
    240e:	99 27       	eor	r25, r25
    2410:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2412:	ec e4       	ldi	r30, 0x4C	; 76
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    241a:	e9 e5       	ldi	r30, 0x59	; 89
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 0 (normal mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2422:	ef e4       	ldi	r30, 0x4F	; 79
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	83 60       	ori	r24, 0x03	; 3
    242a:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. choose the Prescaler using (CS12 CS11 CS10)
		 * 2. mode number 0 (normal mode)   WGM13=0  WGM12=0
	     */
		TCCR1B = en_prescal;
    242c:	ee e4       	ldi	r30, 0x4E	; 78
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	80 83       	st	Z, r24
    2434:	49 c0       	rjmp	.+146    	; 0x24c8 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_OCR1A_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2436:	ed e4       	ldi	r30, 0x4D	; 77
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	89 2f       	mov	r24, r25
    2440:	99 27       	eor	r25, r25
    2442:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2444:	ec e4       	ldi	r30, 0x4C	; 76
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    244c:	e9 e5       	ldi	r30, 0x59	; 89
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	80 83       	st	Z, r24
		OCR1AH = ((u16_outputCompareA & 0xFF00)>>8); /*set the compare value*/
    2454:	eb e4       	ldi	r30, 0x4B	; 75
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	8f 81       	ldd	r24, Y+7	; 0x07
    245a:	98 85       	ldd	r25, Y+8	; 0x08
    245c:	89 2f       	mov	r24, r25
    245e:	99 27       	eor	r25, r25
    2460:	80 83       	st	Z, r24
		OCR1AL = (u16_outputCompareA & 0x00FF);
    2462:	ea e4       	ldi	r30, 0x4A	; 74
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	83 60       	ori	r24, 0x03	; 3
    2472:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 4 (CTC mode_OCR1A)   WGM13=0  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12);
    2474:	ee e4       	ldi	r30, 0x4E	; 78
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	88 60       	ori	r24, 0x08	; 8
    247c:	80 83       	st	Z, r24
    247e:	24 c0       	rjmp	.+72     	; 0x24c8 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_ICR1_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2480:	ed e4       	ldi	r30, 0x4D	; 77
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	89 2f       	mov	r24, r25
    248a:	99 27       	eor	r25, r25
    248c:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    248e:	ec e4       	ldi	r30, 0x4C	; 76
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2496:	e9 e5       	ldi	r30, 0x59	; 89
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	8d 85       	ldd	r24, Y+13	; 0x0d
    249c:	80 83       	st	Z, r24
		ICR1H = ((u16_inputCapture & 0xFF00)>>8); /*set the input capture value*/
    249e:	e7 e4       	ldi	r30, 0x47	; 71
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24a6:	89 2f       	mov	r24, r25
    24a8:	99 27       	eor	r25, r25
    24aa:	80 83       	st	Z, r24
		ICR1L = (u16_inputCapture & 0x00FF);
    24ac:	e6 e4       	ldi	r30, 0x46	; 70
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b2:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    24b4:	ef e4       	ldi	r30, 0x4F	; 79
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	83 60       	ori	r24, 0x03	; 3
    24bc:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 12 (CTC mode _ICR1)   WGM13=1  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12) | (1<<WGM13);
    24be:	ee e4       	ldi	r30, 0x4E	; 78
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	88 61       	ori	r24, 0x18	; 24
    24c6:	80 83       	st	Z, r24
		break;
	}
}
    24c8:	2f 96       	adiw	r28, 0x0f	; 15
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	df 90       	pop	r13
    24e2:	cf 90       	pop	r12
    24e4:	af 90       	pop	r10
    24e6:	08 95       	ret

000024e8 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <timer1Set+0x6>
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H = ((u16_value & 0xFF00)>>8); /*timer initial value*/
    24f6:	ed e4       	ldi	r30, 0x4D	; 77
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	89 2f       	mov	r24, r25
    2500:	99 27       	eor	r25, r25
    2502:	80 83       	st	Z, r24
	TCNT1L = (u16_value & 0x00FF);
    2504:	ec e4       	ldi	r30, 0x4C	; 76
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	80 83       	st	Z, r24
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <timer1Read>:

uint16_t timer1Read(void)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	uint8_t TCNT1_value=TCNT1;
    2520:	ec e4       	ldi	r30, 0x4C	; 76
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	89 83       	std	Y+1, r24	; 0x01
	return TCNT1_value;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
}
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <timer1Start>:

void timer1Start(void)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_PRESCALER_NO;
    2540:	ee e4       	ldi	r30, 0x4E	; 78
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 83       	st	Z, r24
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <timer1Stop>:

void timer1Stop(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_NO_CLOCK;
    2556:	ee e4       	ldi	r30, 0x4E	; 78
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	10 82       	st	Z, r1
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    2562:	af 92       	push	r10
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <timer1DelayMs+0x14>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
    257e:	88 e0       	ldi	r24, 0x08	; 8
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	43 e0       	ldi	r20, 0x03	; 3
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	0a ef       	ldi	r16, 0xFA	; 250
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	ee 24       	eor	r14, r14
    2590:	ff 24       	eor	r15, r15
    2592:	cc 24       	eor	r12, r12
    2594:	dd 24       	eor	r13, r13
    2596:	aa 24       	eor	r10, r10
    2598:	0e 94 cf 11 	call	0x239e	; 0x239e <timer1Init>
    259c:	19 c0       	rjmp	.+50     	; 0x25d0 <timer1DelayMs+0x6e>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
    259e:	e8 e5       	ldi	r30, 0x58	; 88
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	80 71       	andi	r24, 0x10	; 16
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	b9 f3       	breq	.-18     	; 0x259e <timer1DelayMs+0x3c>
		SET_BIT(TIFR,OCF1A);
    25b0:	a8 e5       	ldi	r26, 0x58	; 88
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e8 e5       	ldi	r30, 0x58	; 88
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	80 61       	ori	r24, 0x10	; 16
    25bc:	8c 93       	st	X, r24
		TCNT1=0;
    25be:	ec e4       	ldi	r30, 0x4C	; 76
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	11 82       	std	Z+1, r1	; 0x01
    25c4:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
	while(u16_delay_in_ms)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	19 f7       	brne	.-58     	; 0x259e <timer1DelayMs+0x3c>
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF1A);
		TCNT1=0;
		u16_delay_in_ms--;
	}
	timer1Stop();
    25d8:	0e 94 a7 12 	call	0x254e	; 0x254e <timer1Stop>
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	af 90       	pop	r10
    25f2:	08 95       	ret

000025f4 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    25f4:	af 92       	push	r10
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <timer1DelayUs+0x14>
    2608:	00 d0       	rcall	.+0      	; 0x260a <timer1DelayUs+0x16>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	69 83       	std	Y+1, r22	; 0x01
    2610:	7a 83       	std	Y+2, r23	; 0x02
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
    2616:	88 e0       	ldi	r24, 0x08	; 8
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	00 e1       	ldi	r16, 0x10	; 16
    2624:	10 e0       	ldi	r17, 0x00	; 0
    2626:	ee 24       	eor	r14, r14
    2628:	ff 24       	eor	r15, r15
    262a:	cc 24       	eor	r12, r12
    262c:	dd 24       	eor	r13, r13
    262e:	aa 24       	eor	r10, r10
    2630:	0e 94 cf 11 	call	0x239e	; 0x239e <timer1Init>
    2634:	1e c0       	rjmp	.+60     	; 0x2672 <timer1DelayUs+0x7e>
	while(u32_delay_in_us)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
    2636:	e8 e5       	ldi	r30, 0x58	; 88
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	80 71       	andi	r24, 0x10	; 16
    2642:	90 70       	andi	r25, 0x00	; 0
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	b9 f3       	breq	.-18     	; 0x2636 <timer1DelayUs+0x42>
		SET_BIT(TIFR,OCF0);
    2648:	a8 e5       	ldi	r26, 0x58	; 88
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e8 e5       	ldi	r30, 0x58	; 88
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
		TCNT0=0;
    2656:	e2 e5       	ldi	r30, 0x52	; 82
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	10 82       	st	Z, r1
		u32_delay_in_us--;
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	ab 81       	ldd	r26, Y+3	; 0x03
    2662:	bc 81       	ldd	r27, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	a1 09       	sbc	r26, r1
    2668:	b1 09       	sbc	r27, r1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	ab 83       	std	Y+3, r26	; 0x03
    2670:	bc 83       	std	Y+4, r27	; 0x04

void timer1DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
	while(u32_delay_in_us)
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	ab 81       	ldd	r26, Y+3	; 0x03
    2678:	bc 81       	ldd	r27, Y+4	; 0x04
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	a1 05       	cpc	r26, r1
    267e:	b1 05       	cpc	r27, r1
    2680:	d1 f6       	brne	.-76     	; 0x2636 <timer1DelayUs+0x42>
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer1Stop();
    2682:	0e 94 a7 12 	call	0x254e	; 0x254e <timer1Stop>
	return;
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	ff 90       	pop	r15
    2698:	ef 90       	pop	r14
    269a:	df 90       	pop	r13
    269c:	cf 90       	pop	r12
    269e:	af 90       	pop	r10
    26a0:	08 95       	ret

000026a2 <timer1SwPWM>:

/*
 * in this function a PWM signal is generated using mode number 14 (fast PWM ICR1 TOP)
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <timer1SwPWM+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <timer1SwPWM+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0; /*timer initial value*/
    26b2:	ec e4       	ldi	r30, 0x4C	; 76
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    26ba:	e9 e5       	ldi	r30, 0x59	; 89
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	10 82       	st	Z, r1
	OCR1A = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    26c0:	ea e4       	ldi	r30, 0x4A	; 74
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	c9 01       	movw	r24, r18
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	82 0f       	add	r24, r18
    26d2:	93 1f       	adc	r25, r19
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24

	switch(u8_frequency)
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3c 83       	std	Y+4, r19	; 0x04
    26ec:	2b 83       	std	Y+3, r18	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	91 05       	cpc	r25, r1
    26f6:	c9 f1       	breq	.+114    	; 0x276a <timer1SwPWM+0xc8>
    26f8:	2b 81       	ldd	r18, Y+3	; 0x03
    26fa:	3c 81       	ldd	r19, Y+4	; 0x04
    26fc:	24 30       	cpi	r18, 0x04	; 4
    26fe:	31 05       	cpc	r19, r1
    2700:	5c f4       	brge	.+22     	; 0x2718 <timer1SwPWM+0x76>
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	91 05       	cpc	r25, r1
    270a:	89 f0       	breq	.+34     	; 0x272e <timer1SwPWM+0x8c>
    270c:	2b 81       	ldd	r18, Y+3	; 0x03
    270e:	3c 81       	ldd	r19, Y+4	; 0x04
    2710:	22 30       	cpi	r18, 0x02	; 2
    2712:	31 05       	cpc	r19, r1
    2714:	d9 f0       	breq	.+54     	; 0x274c <timer1SwPWM+0xaa>
    2716:	55 c0       	rjmp	.+170    	; 0x27c2 <timer1SwPWM+0x120>
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	84 30       	cpi	r24, 0x04	; 4
    271e:	91 05       	cpc	r25, r1
    2720:	99 f1       	breq	.+102    	; 0x2788 <timer1SwPWM+0xe6>
    2722:	2b 81       	ldd	r18, Y+3	; 0x03
    2724:	3c 81       	ldd	r19, Y+4	; 0x04
    2726:	25 30       	cpi	r18, 0x05	; 5
    2728:	31 05       	cpc	r19, r1
    272a:	e9 f1       	breq	.+122    	; 0x27a6 <timer1SwPWM+0x104>
    272c:	4a c0       	rjmp	.+148    	; 0x27c2 <timer1SwPWM+0x120>
	{

	case(T1_FREQUENCY_6KHZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    272e:	e6 e4       	ldi	r30, 0x46	; 70
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	83 ec       	ldi	r24, 0xC3	; 195
    2734:	99 e0       	ldi	r25, 0x09	; 9
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    273a:	ef e4       	ldi	r30, 0x4F	; 79
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	82 e8       	ldi	r24, 0x82	; 130
    2740:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_NO;
    2742:	ee e4       	ldi	r30, 0x4E	; 78
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	80 83       	st	Z, r24
    274a:	3b c0       	rjmp	.+118    	; 0x27c2 <timer1SwPWM+0x120>
			break;

	case(T1_FREQUENCY_800HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    274c:	e6 e4       	ldi	r30, 0x46	; 70
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	83 ec       	ldi	r24, 0xC3	; 195
    2752:	99 e0       	ldi	r25, 0x09	; 9
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2758:	ef e4       	ldi	r30, 0x4F	; 79
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	82 e8       	ldi	r24, 0x82	; 130
    275e:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/8
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_8;
    2760:	ee e4       	ldi	r30, 0x4E	; 78
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	8a e1       	ldi	r24, 0x1A	; 26
    2766:	80 83       	st	Z, r24
    2768:	2c c0       	rjmp	.+88     	; 0x27c2 <timer1SwPWM+0x120>
			break;

	case(T1_FREQUENCY_100HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    276a:	e6 e4       	ldi	r30, 0x46	; 70
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	83 ec       	ldi	r24, 0xC3	; 195
    2770:	99 e0       	ldi	r25, 0x09	; 9
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2776:	ef e4       	ldi	r30, 0x4F	; 79
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	82 e8       	ldi	r24, 0x82	; 130
    277c:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/64
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_64;
    277e:	ee e4       	ldi	r30, 0x4E	; 78
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	8b e1       	ldi	r24, 0x1B	; 27
    2784:	80 83       	st	Z, r24
    2786:	1d c0       	rjmp	.+58     	; 0x27c2 <timer1SwPWM+0x120>
			break;

	case(T1_FREQUENCY_25HZ):  //90hz
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    2788:	e6 e4       	ldi	r30, 0x46	; 70
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	83 ec       	ldi	r24, 0xC3	; 195
    278e:	99 e0       	ldi	r25, 0x09	; 9
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Disconnect OC1B COM1B0=0 COM1B1=0
		     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2794:	ef e4       	ldi	r30, 0x4F	; 79
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	82 e8       	ldi	r24, 0x82	; 130
    279a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/256
		     */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_256;
    279c:	ee e4       	ldi	r30, 0x4E	; 78
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	8c e1       	ldi	r24, 0x1C	; 28
    27a2:	80 83       	st	Z, r24
    27a4:	0e c0       	rjmp	.+28     	; 0x27c2 <timer1SwPWM+0x120>
			break;

	case(T1_FREQUENCY_6HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    27a6:	e6 e4       	ldi	r30, 0x46	; 70
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	83 ec       	ldi	r24, 0xC3	; 195
    27ac:	99 e0       	ldi	r25, 0x09	; 9
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Disconnect OC1B COM1B0=0 COM1B1=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1);
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	82 e8       	ldi	r24, 0x82	; 130
    27b8:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaler = F_CPU/1024
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_1024;
    27ba:	ee e4       	ldi	r30, 0x4E	; 78
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	8d e1       	ldi	r24, 0x1D	; 29
    27c0:	80 83       	st	Z, r24
			break;
	}
}
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <__divmodhi4>:
    27d0:	97 fb       	bst	r25, 7
    27d2:	09 2e       	mov	r0, r25
    27d4:	07 26       	eor	r0, r23
    27d6:	0a d0       	rcall	.+20     	; 0x27ec <__divmodhi4_neg1>
    27d8:	77 fd       	sbrc	r23, 7
    27da:	04 d0       	rcall	.+8      	; 0x27e4 <__divmodhi4_neg2>
    27dc:	0c d0       	rcall	.+24     	; 0x27f6 <__udivmodhi4>
    27de:	06 d0       	rcall	.+12     	; 0x27ec <__divmodhi4_neg1>
    27e0:	00 20       	and	r0, r0
    27e2:	1a f4       	brpl	.+6      	; 0x27ea <__divmodhi4_exit>

000027e4 <__divmodhi4_neg2>:
    27e4:	70 95       	com	r23
    27e6:	61 95       	neg	r22
    27e8:	7f 4f       	sbci	r23, 0xFF	; 255

000027ea <__divmodhi4_exit>:
    27ea:	08 95       	ret

000027ec <__divmodhi4_neg1>:
    27ec:	f6 f7       	brtc	.-4      	; 0x27ea <__divmodhi4_exit>
    27ee:	90 95       	com	r25
    27f0:	81 95       	neg	r24
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	08 95       	ret

000027f6 <__udivmodhi4>:
    27f6:	aa 1b       	sub	r26, r26
    27f8:	bb 1b       	sub	r27, r27
    27fa:	51 e1       	ldi	r21, 0x11	; 17
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <__udivmodhi4_ep>

000027fe <__udivmodhi4_loop>:
    27fe:	aa 1f       	adc	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	a6 17       	cp	r26, r22
    2804:	b7 07       	cpc	r27, r23
    2806:	10 f0       	brcs	.+4      	; 0x280c <__udivmodhi4_ep>
    2808:	a6 1b       	sub	r26, r22
    280a:	b7 0b       	sbc	r27, r23

0000280c <__udivmodhi4_ep>:
    280c:	88 1f       	adc	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	5a 95       	dec	r21
    2812:	a9 f7       	brne	.-22     	; 0x27fe <__udivmodhi4_loop>
    2814:	80 95       	com	r24
    2816:	90 95       	com	r25
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	08 95       	ret

0000281e <__prologue_saves__>:
    281e:	2f 92       	push	r2
    2820:	3f 92       	push	r3
    2822:	4f 92       	push	r4
    2824:	5f 92       	push	r5
    2826:	6f 92       	push	r6
    2828:	7f 92       	push	r7
    282a:	8f 92       	push	r8
    282c:	9f 92       	push	r9
    282e:	af 92       	push	r10
    2830:	bf 92       	push	r11
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	ca 1b       	sub	r28, r26
    2848:	db 0b       	sbc	r29, r27
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	09 94       	ijmp

00002856 <__epilogue_restores__>:
    2856:	2a 88       	ldd	r2, Y+18	; 0x12
    2858:	39 88       	ldd	r3, Y+17	; 0x11
    285a:	48 88       	ldd	r4, Y+16	; 0x10
    285c:	5f 84       	ldd	r5, Y+15	; 0x0f
    285e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2860:	7d 84       	ldd	r7, Y+13	; 0x0d
    2862:	8c 84       	ldd	r8, Y+12	; 0x0c
    2864:	9b 84       	ldd	r9, Y+11	; 0x0b
    2866:	aa 84       	ldd	r10, Y+10	; 0x0a
    2868:	b9 84       	ldd	r11, Y+9	; 0x09
    286a:	c8 84       	ldd	r12, Y+8	; 0x08
    286c:	df 80       	ldd	r13, Y+7	; 0x07
    286e:	ee 80       	ldd	r14, Y+6	; 0x06
    2870:	fd 80       	ldd	r15, Y+5	; 0x05
    2872:	0c 81       	ldd	r16, Y+4	; 0x04
    2874:	1b 81       	ldd	r17, Y+3	; 0x03
    2876:	aa 81       	ldd	r26, Y+2	; 0x02
    2878:	b9 81       	ldd	r27, Y+1	; 0x01
    287a:	ce 0f       	add	r28, r30
    287c:	d1 1d       	adc	r29, r1
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	ed 01       	movw	r28, r26
    288a:	08 95       	ret

0000288c <_exit>:
    288c:	f8 94       	cli

0000288e <__stop_program>:
    288e:	ff cf       	rjmp	.-2      	; 0x288e <__stop_program>
